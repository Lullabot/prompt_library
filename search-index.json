[{"title":"Code Quality Standards","description":"Rules for maintaining high code quality across all projects.","content":{"content":"```\n# Code Quality Standards\n\n## General Principles\n1. Write code that is easy to read and understand\n2. Follow the DRY (Don't Repeat Yourself) principle\n3. Keep functions and methods small and focused\n4. Use meaningful variable and function names\n5. Document complex logic and decisions\n\n## Code Style\n- Use consistent indentation (2 or 4 spaces)\n- Follow language-specific style guides\n- Use proper spacing around operators\n- Limit line length to 80-100 characters\n- Use descriptive comments where necessary\n\n## Testing\n- Write tests for all new functionality\n- Maintain test coverage above 80%\n- Include both unit and integration tests\n- Test edge cases and error conditions\n- Keep tests independent and isolated\n\n## Documentation\n- Document public APIs and interfaces\n- Include usage examples\n- Keep README files up to date\n- Document configuration options\n- Maintain changelog\n\n## Performance\n- Optimize critical code paths\n- Use appropriate data structures\n- Minimize database queries\n- Implement caching where appropriate\n- Monitor and profile performance \n```","data":{"title":"Code Quality Standards","description":"Rules for maintaining high code quality across all projects.","layout":"markdown.njk","category":"Development","tags":["standards","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/cursor-rules/code-quality/","discipline":"development","contentType":"","tags":["standards","best practices","development"],"date":"2024-03-20"},{"title":"Drupal 11 Development Standards","description":"Rules for maintaining high code quality in Drupal 11 projects.","content":{"content":"```\n# Drupal 11 Development Standards\n\n## Drupal Coding Standards\n- Follow Drupal core coding standards\n- Use PHPCS and DrupalPractice for code review\n- Implement proper dependency injection\n- Use Drupal's service container\n- Follow PSR-4 autoloading standards\n\n## Module Development\n- Use proper module structure\n- Implement proper hook system\n- Use configuration management\n- Follow Drupal's plugin system\n- Implement proper update hooks\n\n## Theme Development\n- Use proper theme structure\n- Follow Twig best practices\n- Implement proper asset libraries\n- Use Drupal's breakpoint system\n- Follow accessibility standards\n\n## Security\n- Use Drupal's security APIs\n- Implement proper access control\n- Use Drupal's database abstraction\n- Sanitize all user input\n- Escape all output\n\n## Performance\n- Use Drupal's caching system\n- Optimize entity queries\n- Implement proper cache tags\n- Use lazy loading where appropriate\n- Optimize asset delivery\n\n## Testing\n- Write PHPUnit tests\n- Use Drupal's testing framework\n- Test all custom functionality\n- Include functional tests\n- Test edge cases\n\n## Documentation\n- Document all custom code\n- Use proper docblocks\n- Document configuration\n- Maintain README files\n- Document deployment process \n```","data":{"title":"Drupal 11 Development Standards","description":"Rules for maintaining high code quality in Drupal 11 projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","standards","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/cursor-rules/drupal-standards/","discipline":"development","contentType":"","tags":["drupal","standards","best practices","development"],"date":"2024-03-20"},{"title":"11ty Project Configuration","description":"Configuration and setup instructions for 11ty static site projects.","content":{"content":"\n# 11ty Project Configuration\n\n## Project Structure\n```\n├── _data/              # Global data files\n├── _includes/          # Layouts and partials\n├── _layouts/           # Page templates\n├── assets/             # Static assets\n│   ├── css/\n│   ├── js/\n│   └── images/\n├── content/            # Content files\n├── .eleventy.js        # 11ty configuration\n├── .gitignore\n├── package.json\n└── README.md\n```\n\n## .eleventy.js Configuration\n```javascript\nmodule.exports = function(eleventyConfig) {\n  // Copy static assets\n  eleventyConfig.addPassthroughCopy(\"assets\");\n  \n  // Add filters\n  eleventyConfig.addFilter(\"date\", function(date) {\n    return new Date(date).toLocaleDateString();\n  });\n\n  // Add collections\n  eleventyConfig.addCollection(\"posts\", function(collection) {\n    return collection.getFilteredByGlob(\"content/posts/*.md\");\n  });\n\n  return {\n    dir: {\n      input: \".\",\n      output: \"_site\",\n      includes: \"_includes\",\n      layouts: \"_layouts\",\n      data: \"_data\"\n    },\n    templateFormats: [\"md\", \"njk\", \"html\"],\n    markdownTemplateEngine: \"njk\",\n    htmlTemplateEngine: \"njk\",\n    dataTemplateEngine: \"njk\"\n  };\n};\n```\n\n## package.json Scripts\n```json\n{\n  \"scripts\": {\n    \"start\": \"eleventy --serve\",\n    \"build\": \"eleventy\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n## GitHub Pages Deployment\n1. Create `.github/workflows/deploy.yml`\n2. Configure repository settings\n3. Set up GitHub Pages source\n4. Monitor deployment status ","data":{"title":"11ty Project Configuration","description":"Configuration and setup instructions for 11ty static site projects.","layout":"markdown.njk","category":"Static Sites","tags":["11ty","setup","configuration","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/project-configs/11ty-setup/","discipline":"development","contentType":"","tags":["11ty","setup","configuration","development"],"date":"2024-03-20"},{"title":"Drupal 11 Project Setup","description":"Configuration and setup instructions for Drupal 11 projects.","content":{"content":"\n# Drupal 11 Project Configuration\n\n## Project Structure\n```\n├── docroot/              # Drupal installation\n│   ├── core/            # Drupal core\n│   ├── modules/         # Custom modules\n│   ├── profiles/        # Installation profiles\n│   ├── sites/           # Site-specific files\n│   │   └── default/     # Default site\n│   │       ├── files/   # Public files\n│   │       └── config/  # Configuration files\n│   └── themes/          # Custom themes\n├── config/              # Configuration export\n├── scripts/             # Deployment scripts\n├── tests/               # Test files\n├── vendor/              # Composer dependencies\n├── .gitignore\n├── composer.json\n├── composer.lock\n└── README.md\n```\n\n## composer.json Configuration\n```json\n{\n    \"name\": \"organization/project\",\n    \"description\": \"Drupal 11 project\",\n    \"type\": \"project\",\n    \"license\": \"GPL-2.0-or-later\",\n    \"require\": {\n        \"composer/installers\": \"^2.0\",\n        \"drupal/core\": \"^11.0\",\n        \"drupal/core-composer-scaffold\": \"^11.0\",\n        \"drupal/core-project-message\": \"^11.0\",\n        \"drupal/core-recommended\": \"^11.0\"\n    },\n    \"require-dev\": {\n        \"drupal/core-dev\": \"^11.0\",\n        \"phpunit/phpunit\": \"^9.6\",\n        \"drupal/coder\": \"^8.3\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"composer/installers\": true,\n            \"drupal/core-composer-scaffold\": true,\n            \"drupal/core-project-message\": true\n        }\n    },\n    \"scripts\": {\n        \"post-install-cmd\": \"Drupal\\\\Core\\\\Composer\\\\Composer::scaffoldFiles\",\n        \"post-update-cmd\": \"Drupal\\\\Core\\\\Composer\\\\Composer::scaffoldFiles\"\n    }\n}\n```\n\n## CI/CD Configuration\n1. Set up GitHub Actions\n2. Configure automated testing\n3. Set up deployment pipeline\n4. Configure environment variables\n\n## Development Environment\n1. Local development setup\n2. Database configuration\n3. PHP settings\n4. Development tools\n5. Debugging configuration ","data":{"title":"Drupal 11 Project Setup","description":"Configuration and setup instructions for Drupal 11 projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","setup","configuration","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/project-configs/drupal-setup/","discipline":"development","contentType":"","tags":["drupal","setup","configuration","development"],"date":"2024-03-20"},{"title":"AI Code Review Assistant","description":"AI prompts for performing thorough code reviews and ensuring best practices.","content":{"content":"```\nPlease review the following code with a focus on:\n\n1. Code Quality and Best Practices\n   - Code organization and structure\n   - Naming conventions\n   - Code duplication\n   - Error handling\n   - Documentation\n\n2. Security Considerations\n   - Input validation\n   - Authentication and authorization\n   - Data protection\n   - Common vulnerabilities\n\n3. Performance\n   - Algorithm efficiency\n   - Resource usage\n   - Database queries\n   - Caching strategies\n\n4. Maintainability\n   - Code readability\n   - Modularity\n   - Testability\n   - Future extensibility\n\nProvide specific recommendations for improvements, including:\n- Code examples for suggested changes\n- References to relevant documentation\n- Security best practices\n- Performance optimization techniques \n```","data":{"title":"AI Code Review Assistant","description":"AI prompts for performing thorough code reviews and ensuring best practices.","layout":"markdown.njk","category":"Code Review","tags":["code review","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/prompts/ai-code-review/","discipline":"development","contentType":"","tags":["code review","best practices","development"],"date":"2024-03-20"},{"title":"Drupal 11 Code Review Assistant","description":"AI prompts for reviewing Drupal 11 code and ensuring best practices.","content":{"content":"```\nPlease review the following Drupal 11 code with a focus on:\n\n1. Drupal Coding Standards\n   - Drupal core coding standards compliance\n   - PHPCS and DrupalPractice standards\n   - Proper use of Drupal APIs and services\n   - Correct hook implementations\n   - Proper use of dependency injection\n\n2. Drupal Security\n   - Proper use of Drupal's security APIs\n   - CSRF protection implementation\n   - Proper access control\n   - Safe database queries\n   - Input sanitization and output escaping\n\n3. Drupal Performance\n   - Cache implementation\n   - Entity query optimization\n   - Proper use of Drupal's caching system\n   - Database query optimization\n   - Asset aggregation and optimization\n\n4. Drupal Maintainability\n   - Proper module and theme structure\n   - Configuration management\n   - Update hooks\n   - Documentation standards\n   - Test coverage\n\nProvide specific recommendations for improvements, including:\n- Drupal-specific code examples\n- References to Drupal documentation\n- Security best practices for Drupal\n- Performance optimization techniques for Drupal \n```","data":{"title":"Drupal 11 Code Review Assistant","description":"AI prompts for reviewing Drupal 11 code and ensuring best practices.","layout":"markdown.njk","category":"Code Review","tags":["drupal","code review","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/prompts/drupal-code-review/","discipline":"development","contentType":"","tags":["drupal","code review","best practices","development"],"date":"2024-03-20"},{"title":"General Development Workflow","description":"Workflow states and processes for general software development projects.","content":{"content":"\n# Development Workflow State\n\n## Current Status\n- **Phase**: Implementation\n- **Version**: 0.1.0\n- **Last Updated**: 2024-03-20\n\n## Completed Tasks\n- [x] Project initialization\n- [x] Basic structure setup\n- [x] Template creation\n- [x] GitHub Pages configuration\n\n## In Progress\n- [ ] Content population\n- [ ] Search implementation\n- [ ] Testing setup\n- [ ] Documentation\n\n## Next Steps\n1. Add example content\n2. Implement search functionality\n3. Set up testing framework\n4. Complete documentation\n5. Deploy to production\n\n## Issues and Resolutions\n### Current Issues\n1. None reported\n\n### Resolved Issues\n1. None yet\n\n## Performance Metrics\n- Build Time: Not measured\n- Page Load: Not measured\n- Search Response: Not implemented\n\n## Notes\n- Focus on content structure\n- Maintain documentation\n- Regular updates required\n- Monitor performance metrics ","data":{"title":"General Development Workflow","description":"Workflow states and processes for general software development projects.","layout":"markdown.njk","category":"Development","tags":["workflow","development","process","best practices"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/workflow-states/development/","discipline":"development","contentType":"","tags":["workflow","development","process","best practices"],"date":"2024-03-20"},{"title":"Drupal Development Workflow","description":"Workflow states and processes for Drupal development projects.","content":{"content":"```\n# Drupal 11 Development Workflow\n\n## Development States\n\n### 1. Project Setup\n- Initialize Composer project\n- Configure development environment\n- Set up version control\n- Configure CI/CD pipeline\n- Set up local development tools\n\n### 2. Feature Development\n- Create feature branch\n- Implement functionality\n- Write tests\n- Document changes\n- Code review process\n- Merge to development branch\n\n### 3. Testing\n- Run PHPUnit tests\n- Execute PHPCS checks\n- Perform security scans\n- Test accessibility\n- Validate performance\n- User acceptance testing\n\n### 4. Deployment\n- Create release branch\n- Update version numbers\n- Generate changelog\n- Deploy to staging\n- Final testing\n- Production deployment\n\n### 5. Maintenance\n- Security updates\n- Performance monitoring\n- Bug fixes\n- Documentation updates\n- Dependency updates\n- Backup verification\n\n## Quality Gates\n\n### Code Quality\n- PHPCS compliance\n- PHPStan analysis\n- Test coverage > 80%\n- No critical security issues\n- Performance benchmarks met\n\n### Documentation\n- README updated\n- API documentation current\n- Change log maintained\n- Deployment instructions\n- Troubleshooting guide\n\n### Security\n- Security updates applied\n- Access control verified\n- Input validation checked\n- Sensitive data protected\n- Audit logs maintained\n\n### Performance\n- Page load times < 2s\n- Cache hit ratio > 90%\n- Database queries optimized\n- Asset delivery optimized\n- Resource usage monitored \n```","data":{"title":"Drupal Development Workflow","description":"Workflow states and processes for Drupal development projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","workflow","development","process"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/prompt_library/development/workflow-states/drupal-development/","discipline":"development","contentType":"","tags":["drupal","workflow","development","process"],"date":"2024-03-20"},{"title":"","description":"","content":{"content":"# Prompt Library\n\nA collection of AI prompts, cursor rules, project configurations, and workflow states across different disciplines. Built with 11ty and hosted on GitHub Pages.\n\n![Screenshot of the Prompt Library showing the Development AI Prompts page](assets/images/prompt_library.png)\n\n## Features\n\n- Clean, modern design\n- Responsive layout\n- Easy navigation\n- Search functionality\n- Content categorization by discipline\n- Markdown support\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js (v16 or higher)\n- npm or yarn\n- Git\n\n### Installation\n\n1. Clone the repository\n```bash\ngit clone https://github.com/yourusername/prompt-library.git\ncd prompt-library\n```\n\n2. Install dependencies\n```bash\nnpm install\n```\n\n3. Start the development server\n```bash\nnpm start\n```\n\n4. Build for production\n```bash\nnpm run build\n```\n\n## Project Structure\n\n```\n├── _data/              # Global data files\n├── _includes/          # Includes and partials\n├── _layouts/           # Page templates\n│   ├── base.njk        # Base layout\n│   ├── discipline.njk  # Discipline-specific layout\n│   └── content-type.njk # Content type layout\n├── assets/             # Static assets\n│   ├── css/           # Stylesheets\n│   ├── js/            # JavaScript files\n│   └── images/        # Image assets\n├── development/        # Development discipline content\n│   ├── prompts/       # Development prompts\n│   ├── cursor-rules/  # Development cursor rules\n│   ├── project-configs/ # Development project configs\n│   └── workflow-states/ # Development workflow states\n├── project-management/ # Project Management discipline content\n│   ├── prompts/\n│   ├── cursor-rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── sales-marketing/    # Sales & Marketing discipline content\n│   ├── prompts/\n│   ├── cursor-rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── content-strategy/   # Content Strategy discipline content\n│   ├── prompts/\n│   ├── cursor-rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── design/            # Design discipline content\n│   ├── prompts/\n│   ├── cursor-rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── .github/           # GitHub configuration\n│   └── workflows/     # GitHub Actions workflows\n├── .eleventy.js       # 11ty configuration\n├── .gitignore\n├── package.json\n└── README.md\n```\n\n## Content Organization\n\nThe library is organized by disciplines and content types:\n\n### Disciplines\n- Development\n- Project Management\n- Sales & Marketing\n- Content Strategy\n- Design\n\n### Content Types\n- Prompts: AI prompts for various use cases\n- Cursor Rules: Guidelines for development environments\n- Project Configs: Project configuration templates\n- Workflow States: Process and workflow documentation\n\nEach discipline contains all content types, allowing for specialized content within each field.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the ISC License.\n\n## Acknowledgments\n\n- [11ty](https://www.11ty.dev/)\n- [GitHub Pages](https://pages.github.com/) ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/README/","discipline":"","contentType":"","tags":[],"date":"2025-04-03T22:30:20.611Z"},{"title":"","description":"","content":{"content":"# 11ty Prompt Library Project Configuration\n\n## Project Overview\nThis project is a static site built with 11ty that organizes and presents AI prompts, cursor rules, project configurations, and workflow state examples across different disciplines. The site is hosted on GitHub Pages and features a clean, modern design with discipline-based content organization.\n\n## Prerequisites\n- Node.js (v16 or higher)\n- npm or yarn\n- Git\n- GitHub account\n\n## Initial Setup\n\n1. **Create a new GitHub repository**\n   ```bash\n   # Initialize a new repository\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   git branch -M main\n   git remote add origin <your-repo-url>\n   git push -u origin main\n   ```\n\n2. **Initialize 11ty project**\n   ```bash\n   # Create package.json\n   npm init -y\n\n   # Install 11ty and other dependencies\n   npm install --save-dev @11ty/eleventy\n   ```\n\n3. **Project Structure**\n   ```\n   ├── _data/              # Global data files\n   ├── _includes/          # Includes and partials\n   ├── _layouts/           # Page templates\n   │   ├── base.njk        # Base layout\n   │   ├── discipline.njk  # Discipline-specific layout\n   │   └── content-type.njk # Content type layout\n   ├── assets/             # Static assets\n   │   ├── css/           # Stylesheets\n   │   ├── js/            # JavaScript files\n   │   └── images/        # Image assets\n   ├── development/        # Development discipline content\n   │   ├── prompts/       # Development prompts\n   │   ├── cursor-rules/  # Development cursor rules\n   │   ├── project-configs/ # Development project configs\n   │   └── workflow-states/ # Development workflow states\n   ├── project-management/ # Project Management discipline\n   ├── sales-marketing/    # Sales & Marketing discipline\n   ├── content-strategy/   # Content Strategy discipline\n   ├── design/            # Design discipline\n   ├── .github/workflows/  # GitHub Actions workflows\n   ├── .eleventy.js       # 11ty configuration\n   ├── package.json\n   └── README.md\n   ```\n\n## Configuration Files\n\n### .eleventy.js\n```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = function(eleventyConfig) {\n  // Copy static assets\n  eleventyConfig.addPassthroughCopy(\"assets\");\n\n  // Add date filter with format support\n  eleventyConfig.addFilter(\"date\", function(date, format = \"yyyy-MM-dd\") {\n    if (date === \"now\") {\n      date = new Date();\n    } else if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n    \n    if (isNaN(date.getTime())) {\n      return \"\";\n    }\n\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n\n    switch (format) {\n      case \"yyyy\":\n        return year.toString();\n      default:\n        return `${year}-${month}-${day}`;\n    }\n  });\n\n  // Add discipline filter\n  eleventyConfig.addFilter(\"filterByDiscipline\", function(collection, discipline) {\n    if (!collection) return [];\n    return collection.filter(item => item.data.discipline === discipline);\n  });\n\n  // Add collections for content types\n  const disciplines = ['development', 'project-management', 'sales-marketing', 'content-strategy', 'design'];\n  const contentTypes = ['prompts', 'cursor-rules', 'project-configs', 'workflow-states'];\n\n  contentTypes.forEach(type => {\n    eleventyConfig.addCollection(type, function(collection) {\n      return collection.getFilteredByGlob(\n        disciplines.map(discipline => `${discipline}/${type}/**/*.md`)\n      );\n    });\n  });\n\n  // Add base URL for GitHub Pages\n  eleventyConfig.addGlobalData(\"baseUrl\", process.env.GITHUB_ACTIONS ? \"/prompt_library\" : \"\");\n\n  return {\n    dir: {\n      input: \".\",\n      output: \"_site\",\n      includes: \"_includes\",\n      layouts: \"_layouts\",\n      data: \"_data\"\n    },\n    templateFormats: [\"md\", \"njk\", \"html\"],\n    markdownTemplateEngine: \"njk\",\n    htmlTemplateEngine: \"njk\",\n    dataTemplateEngine: \"njk\",\n    pathPrefix: process.env.GITHUB_ACTIONS ? \"/prompt_library/\" : \"/\"\n  };\n};\n```\n\n### package.json Scripts\n```json\n{\n  \"scripts\": {\n    \"start\": \"eleventy --serve\",\n    \"build\": \"eleventy\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n## Content Structure\n\n### Discipline Organization\nEach discipline follows the same content type structure:\n```markdown\n---\ntitle: \"Content Title\"\ndescription: \"Brief description\"\ncategory: \"Category\"\ntags: [\"tag1\", \"tag2\"]\ndate: \"2024-03-20\"\ndiscipline: \"development\"\n---\n\nContent goes here...\n```\n\n### Layout Templates\n\n#### base.njk\nBase template with common elements:\n```njk\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ title }} - Prompt Library</title>\n    <link rel=\"stylesheet\" href=\"{{ baseUrl }}/assets/css/styles.css\">\n</head>\n<body>\n    <header>\n        <nav>\n            <a href=\"{{ baseUrl }}/\">Home</a>\n            <a href=\"{{ baseUrl }}/prompts\">Prompts</a>\n            <a href=\"{{ baseUrl }}/cursor-rules\">Cursor Rules</a>\n            <a href=\"{{ baseUrl }}/project-configs\">Project Configs</a>\n            <a href=\"{{ baseUrl }}/workflow-states\">Workflow States</a>\n        </nav>\n    </header>\n\n    <main>\n        {{ content | safe }}\n    </main>\n\n    <footer>\n        <p>&copy; {{ \"now\" | date(\"yyyy\") }} Prompt Library</p>\n    </footer>\n</body>\n</html>\n```\n\n#### discipline.njk\nTemplate for discipline-specific pages:\n```njk\n---\nlayout: base.njk\n---\n\n<nav class=\"discipline-nav\">\n    <a href=\"{{ baseUrl }}/{{ discipline }}/prompts\">Prompts</a>\n    <a href=\"{{ baseUrl }}/{{ discipline }}/cursor-rules\">Cursor Rules</a>\n    <a href=\"{{ baseUrl }}/{{ discipline }}/project-configs\">Project Configs</a>\n    <a href=\"{{ baseUrl }}/{{ discipline }}/workflow-states\">Workflow States</a>\n</nav>\n\n{{ content | safe }}\n```\n\n#### content-type.njk\nTemplate for content type pages:\n```njk\n---\nlayout: discipline.njk\n---\n\n<div class=\"content-type-header\">\n    <h1>{{ title }}</h1>\n    <p class=\"description\">{{ description }}</p>\n</div>\n\n<div class=\"content-list\">\n    {% for item in collections[contentType] | filterByDiscipline(discipline) %}\n        <article class=\"content-item\">\n            <h2><a href=\"{{ item.url }}\">{{ item.data.title }}</a></h2>\n            <p>{{ item.data.description }}</p>\n            <div class=\"metadata\">\n                <span class=\"date\">{{ item.date | date(\"yyyy-MM-dd\") }}</span>\n                {% if item.data.tags %}\n                    <div class=\"tags\">\n                        {% for tag in item.data.tags %}\n                            <span class=\"tag\">{{ tag }}</span>\n                        {% endfor %}\n                    </div>\n                {% endif %}\n            </div>\n        </article>\n    {% endfor %}\n</div>\n```\n\n## GitHub Pages Setup\n\n### .github/workflows/deploy.yml\n```yaml\nname: Deploy to GitHub Pages\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site\n```\n\n## Development Workflow\n\n1. **Create content in appropriate discipline directory**\n   ```bash\n   # Example: Creating a new prompt in the development discipline\n   mkdir -p development/prompts/new-prompt\n   touch development/prompts/new-prompt/index.md\n   ```\n\n2. **Test locally**\n   ```bash\n   npm start\n   ```\n\n3. **Build for production**\n   ```bash\n   npm run build\n   ```\n\n4. **Commit and push changes**\n   ```bash\n   git add .\n   git commit -m \"Add new content\"\n   git push origin main\n   ```\n\n## Maintenance\n\n- Keep content organized within appropriate disciplines\n- Regularly update dependencies\n- Monitor GitHub Pages deployment status\n- Review and update content structure as needed\n- Test search functionality after content updates\n- Check for broken links and assets\n- Maintain consistent styling across all pages ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project_config/","discipline":"","contentType":"","tags":[],"date":"2025-04-03T22:30:20.611Z"},{"title":"","description":"","content":{"content":"# Workflow State Documentation\n\n## Current State\n- **Project Status**: Content Organization Phase\n- **Last Updated**: 2024-03-20\n- **Current Version**: 0.2.0\n\n### Completed Tasks\n- [x] Created project configuration documentation\n- [x] Established project structure\n- [x] Defined content organization by disciplines\n- [x] Set up GitHub Pages deployment workflow\n- [x] Created base layout template\n- [x] Created discipline layout template\n- [x] Created content type layout template\n- [x] Implemented consistent styling across pages\n- [x] Set up development discipline content\n- [x] Created example prompts and rules\n- [x] Added search functionality\n- [x] Updated documentation\n\n### In Progress\n- [ ] Creating content for other disciplines\n- [ ] Enhancing search capabilities\n- [ ] Implementing content filtering\n- [ ] Adding content creation guidelines\n\n### Pending Tasks\n- [ ] Content for Project Management discipline\n- [ ] Content for Sales & Marketing discipline\n- [ ] Content for Content Strategy discipline\n- [ ] Content for Design discipline\n- [ ] Testing framework setup\n- [ ] Analytics integration\n- [ ] User contribution workflow\n\n## Development Plan\n\n### Phase 1: Foundation (Completed)\n- [x] Initialize 11ty project\n- [x] Set up basic templates\n- [x] Configure GitHub Pages\n- [x] Create initial content structure\n- [x] Test deployment workflow\n- [x] Implement base styling\n\n### Phase 2: Content Organization (Current)\n- [x] Implement discipline-based structure\n- [x] Create content type templates\n- [x] Set up development discipline content\n- [x] Implement consistent styling\n- [ ] Create content guidelines\n- [ ] Add content validation\n\n### Phase 3: Enhancement\n- [ ] Implement advanced search features\n- [ ] Add discipline-specific filters\n- [ ] Create user contribution workflow\n- [ ] Add content categorization\n- [ ] Implement content relationships\n- [ ] Add content versioning\n\n### Phase 4: Polish\n- [ ] Optimize performance\n- [ ] Enhance accessibility\n- [ ] Complete documentation\n- [ ] Add analytics\n- [ ] Final testing and review\n\n## Rules and Guidelines\n\n### Development Rules\n1. All changes must be made in feature branches\n2. Each feature branch must have corresponding tests\n3. Pull requests require at least one review\n4. Documentation must be updated with any changes\n5. Follow semantic versioning for releases\n\n### Content Rules\n1. Content must be organized by discipline\n2. Each discipline follows the same content types\n3. All content must include proper frontmatter\n4. Content must be properly categorized with tags\n5. Regular content audits required\n\n### Deployment Rules\n1. All deployments must pass tests\n2. Production deployments only from main branch\n3. Regular backups of content required\n4. Monitor performance metrics\n5. Document all deployment changes\n\n## Change Log\n\n### 2024-03-20\n- Reorganized content by disciplines\n- Created discipline and content type layouts\n- Implemented consistent styling\n- Added development discipline content\n- Updated project documentation\n\n### Upcoming Changes\n- Add content for remaining disciplines\n- Enhance search functionality\n- Implement content filtering\n- Add content creation guidelines\n\n## Performance Metrics\n- **Build Time**: < 1s\n- **Page Load Time**: < 2s\n- **Search Response Time**: < 500ms\n- **Content Count**: 8 items\n\n## Issues and Resolutions\n\n### Current Issues\n1. Need to populate content for other disciplines\n2. Search functionality needs enhancement\n3. Content filtering not yet implemented\n\n### Resolved Issues\n1. Content organization structure implemented\n2. Template hierarchy established\n3. Consistent styling achieved\n4. Development content migration completed\n\n## Notes and Observations\n- Discipline-based organization provides better content structure\n- Content type templates ensure consistency\n- Development discipline serves as a model for other disciplines\n- Regular documentation updates essential\n\n## Next Steps\n1. Create content for remaining disciplines\n2. Enhance search functionality\n3. Implement content filtering\n4. Add content creation guidelines\n5. Set up testing framework ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/workflow_state/","discipline":"","contentType":"","tags":[],"date":"2025-04-03T22:30:20.611Z"}]