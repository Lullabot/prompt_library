[{"title":"Lullabot Voice and Tone Styleguide","description":"MAINTAIN consistent brand voice and tone when WRITING CONTENT to ENSURE clear and effective communication","content":{"content":"`````\n---\ndescription: MAINTAIN consistent brand voice and tone when WRITING CONTENT to ENSURE clear and effective communication\nglobs: *.md,*.txt\nalwaysApply: false\n---\n# Voice and Tone Standards\n\n<version>1.0.0</version>\n\n## Context\n- Apply when writing or editing any client-facing content\n- Used to maintain brand consistency across all communications\n- Essential for conveying professionalism and expertise\n\n## Requirements\n- Adhere to core voice characteristics\n- Adapt tone to match specific content types\n- Structure content for maximum clarity and impact\n- Follow specific writing style rules\n- Incorporate brand reinforcement naturally\n\n## Core Voice Characteristics\n\nAll content should consistently embody these qualities:\n\n- **Knowledgeable**: Demonstrate deep technical understanding and industry expertise\n- **Empowering**: Give readers actionable insights they can implement\n- **Conversational**: Use natural language with \"you\" for readers and \"we\" for the company\n- **Clear and Simple**: Break down complex concepts without oversimplification\n- **Helpful**: Focus on solving problems and providing practical value\n- **Respectful**: Maintain professional courtesy toward all mentioned parties\n\n## Tone Patterns by Content Type\n\n- **Technical Tutorials**: Confident and instructional, not condescending\n- **Case Studies**: Confident but humble, focusing on lessons learned\n- **Industry Insights**: Thoughtful and analytical with measured opinions\n- **Company Culture**: Warm and authentic with personal touches\n- **Client Communications**: Professional, responsive, and solutions-oriented\n\n## Structural Elements\n\nEssential components for all content:\n\n- Relevant, approachable introduction\n- Clear problem statement or purpose declaration\n- Logical progression from general to specific\n- Defined technical terms on first use\n- Practical examples illustrating concepts\n- Actionable takeaways or next steps\n\n## Writing Style Rules\n\n1. Use second-person (\"you\") to address the reader\n2. Represent the company with \"we\" (first-person plural)\n3. Keep paragraphs short (3-4 sentences maximum)\n4. Vary sentence length for rhythm and readability\n5. Use active voice predominantly\n6. Break text with meaningful headings and subheadings\n7. Define technical terms for broader audience understanding\n8. Follow American English spelling conventions\n\n## Examples\n\n<example>\n**Technical Introduction**\n\n\"Managing content across multiple platforms presents unique challenges for enterprise organizations. At Lullabot, we've helped companies like NBC solve these exact problems. Here's how you can implement a similar approach for your content architecture.\"\n\nThis example demonstrates expertise, addresses the reader directly, establishes credibility, and promises valuable information.\n</example>\n\n<example>\n**Technical Explanation**\n\n\"When you implement a headless CMS architecture—where your content management system is separate from your front-end presentation layer—you gain flexibility in how your content appears across different platforms.\"\n\nThis example defines technical terminology, addresses the reader directly, and clearly explains benefits.\n</example>\n\n<example type=\"invalid\">\n**Poor Introduction**\n\n\"Content management is hard. This article will explain multi-platform content management.\"\n\nThis example lacks specificity, fails to establish expertise, doesn't address the reader, and provides no compelling reason to continue reading.\n</example>\n\n<example type=\"invalid\">\n**Poor Technical Explanation**\n\n\"Headless CMS separates the content repository from content presentation, offering flexibility through APIs.\"\n\nThis example uses undefined technical terms, lacks conversational tone, and doesn't clarify the benefit to the reader.\n</example>\n\n## Voice and Tone Decision Flow\n\n```mermaid\n---\ntitle: Content Voice and Tone Selection Process\n---\ngraph TD\n    A[Identify Content Type] --> B[Determine Primary Audience]\n    B --> C[Select Appropriate Tone Pattern]\n    C --> D[Apply Core Voice Characteristics]\n    D --> E[Structure Content With Required Elements]\n    E --> F[Review Against Writing Style Rules]\n    F --> G[Check Examples for Consistency]\n    G --> H[Finalize Content]\n```\n\n`````","data":{"title":"Lullabot Voice and Tone Styleguide","description":"MAINTAIN consistent brand voice and tone when WRITING CONTENT to ENSURE clear and effective communication","date":"2025-05-07","layout":"markdown.njk","discipline":"content-strategy","contentType":"rules","tags":["brand voice","tone","writing style","content guidelines","communication"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/content-strategy/rules/lullabot-voice-and-tone-styleguide/","discipline":"content-strategy","contentType":"rules","tags":["brand voice","tone","writing style","content guidelines","communication"],"date":"2025-05-07"},{"title":"11ty Project Configuration","description":"Configuration and setup instructions for 11ty static site projects.","content":{"content":"`````\n# 11ty Project Configuration\n\n## Project Structure\n```\n├── _data/              # Global data files\n├── _includes/          # Layouts and partials\n├── _layouts/           # Page templates\n├── assets/             # Static assets\n│   ├── css/\n│   ├── js/\n│   └── images/\n├── content/            # Content files\n├── .eleventy.js        # 11ty configuration\n├── .gitignore\n├── package.json\n└── README.md\n```\n\n## .eleventy.js Configuration\n```javascript\nmodule.exports = function(eleventyConfig) {\n  // Copy static assets\n  eleventyConfig.addPassthroughCopy(\"assets\");\n  \n  // Add filters\n  eleventyConfig.addFilter(\"date\", function(date) {\n    return new Date(date).toLocaleDateString();\n  });\n\n  // Add collections\n  eleventyConfig.addCollection(\"posts\", function(collection) {\n    return collection.getFilteredByGlob(\"content/posts/*.md\");\n  });\n\n  return {\n    dir: {\n      input: \".\",\n      output: \"_site\",\n      includes: \"_includes\",\n      layouts: \"_layouts\",\n      data: \"_data\"\n    },\n    templateFormats: [\"md\", \"njk\", \"html\"],\n    markdownTemplateEngine: \"njk\",\n    htmlTemplateEngine: \"njk\",\n    dataTemplateEngine: \"njk\"\n  };\n};\n```\n\n## package.json Scripts\n```json\n{\n  \"scripts\": {\n    \"start\": \"eleventy --serve\",\n    \"build\": \"eleventy\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n## GitHub Pages Deployment\n1. Create `.github/workflows/deploy.yml`\n2. Configure repository settings\n3. Set up GitHub Pages source\n4. Monitor deployment status \n`````","data":{"title":"11ty Project Configuration","description":"Configuration and setup instructions for 11ty static site projects.","layout":"markdown.njk","category":"Static Sites","tags":["11ty","setup","configuration","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/project-configs/11ty-setup/","discipline":"development","contentType":"","tags":["11ty","setup","configuration","development"],"date":"2024-03-20"},{"title":"Drupal 11 Project Setup","description":"Configuration and setup instructions for Drupal 11 projects.","content":{"content":"`````\n# Drupal 11 Project Configuration\n\n## Project Structure\n```\n├── docroot/              # Drupal installation\n│   ├── core/            # Drupal core\n│   ├── modules/         # Custom modules\n│   ├── profiles/        # Installation profiles\n│   ├── sites/           # Site-specific files\n│   │   └── default/     # Default site\n│   │       ├── files/   # Public files\n│   │       └── config/  # Configuration files\n│   └── themes/          # Custom themes\n├── config/              # Configuration export\n├── scripts/             # Deployment scripts\n├── tests/               # Test files\n├── vendor/              # Composer dependencies\n├── .gitignore\n├── composer.json\n├── composer.lock\n└── README.md\n```\n\n## composer.json Configuration\n```json\n{\n    \"name\": \"organization/project\",\n    \"description\": \"Drupal 11 project\",\n    \"type\": \"project\",\n    \"license\": \"GPL-2.0-or-later\",\n    \"require\": {\n        \"composer/installers\": \"^2.0\",\n        \"drupal/core\": \"^11.0\",\n        \"drupal/core-composer-scaffold\": \"^11.0\",\n        \"drupal/core-project-message\": \"^11.0\",\n        \"drupal/core-recommended\": \"^11.0\"\n    },\n    \"require-dev\": {\n        \"drupal/core-dev\": \"^11.0\",\n        \"phpunit/phpunit\": \"^9.6\",\n        \"drupal/coder\": \"^8.3\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"composer/installers\": true,\n            \"drupal/core-composer-scaffold\": true,\n            \"drupal/core-project-message\": true\n        }\n    },\n    \"scripts\": {\n        \"post-install-cmd\": \"Drupal\\\\Core\\\\Composer\\\\Composer::scaffoldFiles\",\n        \"post-update-cmd\": \"Drupal\\\\Core\\\\Composer\\\\Composer::scaffoldFiles\"\n    }\n}\n```\n\n## CI/CD Configuration\n1. Set up GitHub Actions\n2. Configure automated testing\n3. Set up deployment pipeline\n4. Configure environment variables\n\n## Development Environment\n1. Local development setup\n2. Database configuration\n3. PHP settings\n4. Development tools\n5. Debugging configuration \n`````","data":{"title":"Drupal 11 Project Setup","description":"Configuration and setup instructions for Drupal 11 projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","setup","configuration","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/project-configs/drupal-setup/","discipline":"development","contentType":"","tags":["drupal","setup","configuration","development"],"date":"2024-03-20"},{"title":"ADR Generator","description":"Generate an ADR from a conversation or transcription about a decision.","content":{"content":"`````\nYou are a Drupal engineer with excellent communication skills.\nPart of your job is to document important architectural decisions the team has made in the form of Architecture Decision Records, or ADRs.\nYou listen to the reasoning presented by team members and ask clarifying questions so you can format the architecture decision to fit the desired format, as outlined below.\nLullabot's ADR repository is the model you use when forming your ADRs.\n\nIt's critical to understand the Context, Decision, Exceptions, and Consequences for each proposed decision. Each new ADR should be in a Proposed state while the team reviews it.\n\n---\n# In the metadata section, # is a comment, not a heading.\ndate: YYYY-MM-DD\n\n# New ADRs start at proposed, then move to accepted, and no longer relevant ADRs are deprecated or superseded.\nstatus: proposed\n\n# Tags are freeform - relevant keywords for this decision\ntags:\n  - tag1\n  - tag2\n\n# Include anyone who was involved in the decision or discussions\ncontributors:\n  - Contributor Name\ntitle: [Decision Title]\ncontext: [1-sentence summary describing the context of the decision]\n\n---\n## Decision\n\n[Describe our response to these forces. It is stated in full sentences, with active voice. \"We will …\".]\n\n## Exceptions\n\n[Outline what exceptions are allowed, and when it's acceptable to make them.]\n\n## Consequences\n\n[Describe the resulting context, after applying the decision. All consequences should be listed here, not just the \"positive\" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.]\n\n## Status\n[Accepted | Deprecated]\n\n<References>\n- Lullabot's ADR repository: https://architecture.lullabot.com/\n- Basis: https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions.html\n- Examples and core definitions: https://github.com/joelparkerhenderson/architecture-decision-record\n</References>\n`````","data":{"title":"ADR Generator","description":"Generate an ADR from a conversation or transcription about a decision.","layout":"markdown.njk","date":"2025-04-23","discipline":"development","contentType":"prompts","tags":["architecture","best practices","documentation"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/prompts/adr/","discipline":"development","contentType":"prompts","tags":["architecture","best practices","documentation"],"date":"2025-04-23"},{"title":"AI Code Review Assistant","description":"AI prompts for performing thorough code reviews and ensuring best practices.","content":{"content":"```\nPlease review the following code with a focus on:\n\n1. Code Quality and Best Practices\n   - Code organization and structure\n   - Naming conventions\n   - Code duplication\n   - Error handling\n   - Documentation\n\n2. Security Considerations\n   - Input validation\n   - Authentication and authorization\n   - Data protection\n   - Common vulnerabilities\n\n3. Performance\n   - Algorithm efficiency\n   - Resource usage\n   - Database queries\n   - Caching strategies\n\n4. Maintainability\n   - Code readability\n   - Modularity\n   - Testability\n   - Future extensibility\n\nProvide specific recommendations for improvements, including:\n- Code examples for suggested changes\n- References to relevant documentation\n- Security best practices\n- Performance optimization techniques \n```","data":{"title":"AI Code Review Assistant","description":"AI prompts for performing thorough code reviews and ensuring best practices.","layout":"markdown.njk","category":"Code Review","tags":["code review","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/prompts/ai-code-review/","discipline":"development","contentType":"","tags":["code review","best practices","development"],"date":"2024-03-20"},{"title":"Drupal 11 Code Review Assistant","description":"AI prompts for reviewing Drupal 11 code and ensuring best practices.","content":{"content":"```\nPlease review the following Drupal 11 code with a focus on:\n\n1. Drupal Coding Standards\n   - Drupal core coding standards compliance\n   - PHPCS and DrupalPractice standards\n   - Proper use of Drupal APIs and services\n   - Correct hook implementations\n   - Proper use of dependency injection\n\n2. Drupal Security\n   - Proper use of Drupal's security APIs\n   - CSRF protection implementation\n   - Proper access control\n   - Safe database queries\n   - Input sanitization and output escaping\n\n3. Drupal Performance\n   - Cache implementation\n   - Entity query optimization\n   - Proper use of Drupal's caching system\n   - Database query optimization\n   - Asset aggregation and optimization\n\n4. Drupal Maintainability\n   - Proper module and theme structure\n   - Configuration management\n   - Update hooks\n   - Documentation standards\n   - Test coverage\n\nProvide specific recommendations for improvements, including:\n- Drupal-specific code examples\n- References to Drupal documentation\n- Security best practices for Drupal\n- Performance optimization techniques for Drupal \n```","data":{"title":"Drupal 11 Code Review Assistant","description":"AI prompts for reviewing Drupal 11 code and ensuring best practices.","layout":"markdown.njk","category":"Code Review","tags":["drupal","code review","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/prompts/drupal-code-review/","discipline":"development","contentType":"","tags":["drupal","code review","best practices","development"],"date":"2024-03-20"},{"title":"Basic Prompting: Essential Resources for Getting Started","description":"A curated set of foundational resources for learning how to write effective prompts for AI language models. These links cover best practices, guides, and community-curated prompt collections.","content":{"content":"## Recommended Resources\n\n- **Prompting Guide**  \n  [promptingguide.ai](https://www.promptingguide.ai/)  \n  *A comprehensive guide to prompt engineering, including techniques, best practices, and examples for working with large language models.*\n\n- **Tips for Prompting (AuraChat)**  \n  [aurachat.io/learn/tips-for-prompting](https://aurachat.io/learn/tips-for-prompting)  \n  *Practical tips and best practices for writing effective prompts to get better results from AI chatbots.*\n\n- **Anthropic Claude Prompt Engineering Overview**  \n  [docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview)  \n  *Official documentation from Anthropic on how to craft effective prompts for Claude, including examples and strategies.*\n\n- **Awesome ChatGPT Prompts**  \n  [github.com/f/awesome-chatgpt-prompts](https://github.com/f/awesome-chatgpt-prompts)  \n  *A curated list of practical prompt examples for ChatGPT and similar models.*\n\n- **Awesome Prompts (ai-boost)**  \n  [github.com/ai-boost/awesome-prompts](https://github.com/ai-boost/awesome-prompts)  \n  *Curated list of ChatGPT prompts from the top-rated GPTs in the GPTs Store. Includes advanced prompt engineering papers.*\n\n- **Prompt Engineering Guide (dair-ai)**  \n  [github.com/dair-ai/Prompt-Engineering-Guide](https://github.com/dair-ai/Prompt-Engineering-Guide)  \n  *Guides, papers, lectures, notebooks, and resources for prompt engineering.*\n\n- **Claude Code for Drupal**  \n  [git.drupalcode.org/project/claude_code/-/blob/1.0.x/assets/CLAUDE.md](https://git.drupalcode.org/project/claude_code/-/blob/1.0.x/assets/CLAUDE.md)  \n  *Documentation for integrating Claude with Drupal, including prompt examples and usage.* ","data":{"title":"Basic Prompting: Essential Resources for Getting Started","description":"A curated set of foundational resources for learning how to write effective prompts for AI language models. These links cover best practices, guides, and community-curated prompt collections.","url":"/development/resources/basic-prompting/","resource_type":"guide list","skill_level":"Beginner","discipline":"development","contentType":"resources","layout":"markdown.njk","date":"2025-05-12","topics":["prompt engineering","AI","best practices","documentation"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/resources/basic-prompting/","discipline":"development","contentType":"resources","tags":[],"date":"2025-05-12"},{"title":"Drupal and DDEV: Reference Links and Documentation Guidance","description":"Essential links for Drupal and DDEV development, plus step-by-step instructions and best practices for adding documentation to Cursor AI projects.","content":{"content":"# How and Why to Add Docs to Cursor\n\nAdding documentation to Cursor (or similar AI agents) is essential for providing persistent, reusable context that improves the agent's accuracy and usefulness. Well-maintained docs reduce hallucinations, standardize workflows, and encode domain knowledge for both humans and AI.\n\n## How to Add Docs to Cursor\n\n- Open the `@Docs` panel in Cursor and select **Add new doc**.\n- Paste the URL of the documentation you want to add. (Tip: Add a trailing slash to the URL to index all subpages and subdirectories.)\n- Cursor will crawl, index, and keep your custom doc up to date automatically.\n- You can manage your custom docs in **Settings > Features > Docs**—edit, delete, or add new docs as needed.\n- Once added, reference your custom docs in chat or prompts using the `@Docs` symbol to bring them into context for the agent.\n\n---\n\n# Drupal and DDEV Reference Links\n\nEssential links for Drupal and DDEV development, useful for both agents and developers.\n\n## Drupal\n- **[Drupal - Hooks](https://www.drupal.org/node/3442349):** Overview and usage of hooks in Drupal.\n- **[Drupal - Development guide](https://www.drupal.org/docs/develop):** Official Drupal development documentation.\n- **[Drupal - Theming](https://www.drupal.org/docs/develop/theming-drupal):** Guide to theming in Drupal.\n- **[Drupal - Modules](https://www.drupal.org/docs/develop/creating-modules):** Creating and managing Drupal modules.\n- **[Drupal - APIs](https://www.drupal.org/docs/develop/drupal-apis):** Reference for Drupal's APIs.\n- **[Drupal - Core modules and theming](https://www.drupal.org/docs/develop/core-modules-and-themes):** Documentation for core modules and themes.\n\n## DDEV\n- **[DDEV - Usage](https://ddev.readthedocs.io/en/stable/users/usage/):** How to use DDEV for local development.\n- **[DDEV - FAQ](https://ddev.readthedocs.io/en/stable/users/usage/faq/):** Frequently asked questions about DDEV.\n- **[DDEV - Commands](https://ddev.readthedocs.io/en/stable/users/usage/commands/):** List of DDEV commands and their usage.\n\n## Other\n- **[Lullabot ADRs](https://architecture.lullabot.com):** Architectural Decision Records from Lullabot for reference and inspiration. ","data":{"title":"Drupal and DDEV: Reference Links and Documentation Guidance","description":"Essential links for Drupal and DDEV development, plus step-by-step instructions and best practices for adding documentation to Cursor AI projects.","url":"/development/resources/drupal-and-ddev-links/","resource_type":"guide list","skill_level":"Intermediate","discipline":"development","contentType":"resources","layout":"markdown.njk","date":"2025-05-12","topics":["Drupal","DDEV","documentation","AI agent context","best practices"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/resources/drupal-and-ddev-links/","discipline":"development","contentType":"resources","tags":[],"date":"2025-05-12"},{"title":"Code Quality Standards","description":"Rules for maintaining high code quality across all projects.","content":{"content":"```\n# Code Quality Standards\n\n## General Principles\n1. Write code that is easy to read and understand\n2. Follow the DRY (Don't Repeat Yourself) principle\n3. Keep functions and methods small and focused\n4. Use meaningful variable and function names\n5. Document complex logic and decisions\n\n## Code Style\n- Use consistent indentation (2 or 4 spaces)\n- Follow language-specific style guides\n- Use proper spacing around operators\n- Limit line length to 80-100 characters\n- Use descriptive comments where necessary\n\n## Testing\n- Write tests for all new functionality\n- Maintain test coverage above 80%\n- Include both unit and integration tests\n- Test edge cases and error conditions\n- Keep tests independent and isolated\n\n## Documentation\n- Document public APIs and interfaces\n- Include usage examples\n- Keep README files up to date\n- Document configuration options\n- Maintain changelog\n\n## Performance\n- Optimize critical code paths\n- Use appropriate data structures\n- Minimize database queries\n- Implement caching where appropriate\n- Monitor and profile performance \n```","data":{"title":"Code Quality Standards","description":"Rules for maintaining high code quality across all projects.","layout":"markdown.njk","category":"Development","tags":["standards","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/rules/code-quality/","discipline":"development","contentType":"","tags":["standards","best practices","development"],"date":"2024-03-20"},{"title":"Drupal 11 Development Standards","description":"Rules for maintaining high code quality in Drupal 11 projects.","content":{"content":"```\n# Drupal 11 Development Standards\n\n## Drupal Coding Standards\n- Follow Drupal core coding standards\n- Use PHPCS and DrupalPractice for code review\n- Implement proper dependency injection\n- Use Drupal's service container\n- Follow PSR-4 autoloading standards\n\n## Module Development\n- Use proper module structure\n- Implement proper hook system\n- Use configuration management\n- Follow Drupal's plugin system\n- Implement proper update hooks\n\n## Theme Development\n- Use proper theme structure\n- Follow Twig best practices\n- Implement proper asset libraries\n- Use Drupal's breakpoint system\n- Follow accessibility standards\n\n## Security\n- Use Drupal's security APIs\n- Implement proper access control\n- Use Drupal's database abstraction\n- Sanitize all user input\n- Escape all output\n\n## Performance\n- Use Drupal's caching system\n- Optimize entity queries\n- Implement proper cache tags\n- Use lazy loading where appropriate\n- Optimize asset delivery\n\n## Testing\n- Write PHPUnit tests\n- Use Drupal's testing framework\n- Test all custom functionality\n- Include functional tests\n- Test edge cases\n\n## Documentation\n- Document all custom code\n- Use proper docblocks\n- Document configuration\n- Maintain README files\n- Document deployment process \n```","data":{"title":"Drupal 11 Development Standards","description":"Rules for maintaining high code quality in Drupal 11 projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","standards","best practices","development"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/rules/drupal-standards/","discipline":"development","contentType":"","tags":["drupal","standards","best practices","development"],"date":"2024-03-20"},{"title":"Drupal Development","description":"Rules for maintaining high code quality in Drupal projects.","content":{"content":"\n## How these files work together\n\n- drupal-core.mdc is Always applied, giving every generation a Drupal foundation.\n\n- drupal-theme.mdc and drupal-tests.mdc are Auto Attached—they load only when you edit Twig or test files, keeping the model focused.\n\n### 1 `drupal-core.mdc` — Core coding standards & patterns (Auto Attached)\n\n```mdc\n---\ndescription: >\n  Drupal 10 core standards & your team’s personal preferences. Ensures strict\n  typing, DI, visibility, final classes, and hook patterns.\nglobs:\n  - \"**/*.php\"\n  - \"**/*.module\"\n  - \"**/*.install\"\n  - \"**/*.services.yml\"\nalwaysApply: true\n---\n\n# Drupal 10 Core Rules\n\n1. **Strict Types & PSR‑12**  \n   ~~~php\n   declare(strict_types=1);\n   ~~~\n\n2. **Final Classes & Visibility**  \n   - Declare every class `final` unless you explicitly intend it to be extended.  \n   - Make all properties `private readonly` when possible; otherwise `private`.  \n   - Methods default to `private`; use `protected`/`public` only as needed.\n\n3. **Dependency Injection**  \n   - Never call `\\Drupal::service()` or `\\Drupal::config()` in classes.  \n   - Use constructor injection with promoted properties:  \n     ~~~php\n     public function __construct(\n         private readonly ConfigFactoryInterface $config,\n         private readonly LoggerChannelInterface $logger,\n     ) {}\n     ~~~\n\n4. **Hook Implementations**  \n   - Thin wrapper: delegate to an invokable class with the `@Hook` attribute.  \n     See OOP hooks: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Hook%21Attribute%21Hook.php/class/Hook/11.x  \n   - Provide a `LegacyHook` bridge for procedural modules:  \n     https://www.drupal.org/node/3442349\n\n5. **Service Definitions**  \n   ~~~yaml\n   services:\n     my_module.foo:\n       class: Drupal\\my_module\\Foo\n       arguments: ['@config.factory', '@logger.channel.my_module']\n       tags: ['event_subscriber']\n   ~~~\n\n6. **Composer & Vendor**  \n   - Add third‑party libraries via `composer require`.  \n   - Never commit `vendor/`.\n\n7. **Coding Standards & Checks**  \n   - 2‑space indent, 80–120 col soft limit.  \n   - Run `phpcbf --standard=Drupal,DrupalPractice` on staged files.\n\n8. **Self‑Verification Checklist**  \n   - [ ] Class is `final` and marked `strict_types`.  \n   - [ ] All dependencies injected via constructor.  \n   - [ ] No static calls to `\\Drupal::`.  \n   - [ ] Hooks use OOP attribute + LegacyHook.  \n   - [ ] Services listed in `<module>.services.yml`.  \n   - [ ] Visibility of properties/methods minimized.  \n```\n\n---\n\n### 2 `drupal-theme.mdc` — Twig & front‑end (Auto Attached)\n\n```mdc\n---\ndescription: Drupal 10 theming & Twig best practices.\nglobs:\n  - \"**/*.html.twig\"\n  - \"**/*.theme\"\nalwaysApply: false\n---\n\n# Drupal Theme Rules\n\n* Limit Twig logic to simple conditionals/loops; heavy logic goes to `*.theme` preprocess.\n* Follow **BEM** classes (`block__element--modifier`).\n* Use `{% raw %}{{ attach_library('my_theme/component') }}{% endraw %}` for assets.\n* Prefer `|t` filter for translatable strings.\n* To create template overrides, follow naming conventions (e.g. `node--article.html.twig`).\n* Provide a matching `*.libraries.yml` entry for every new asset bundle.\n```\n\n---\n\n### 3 `drupal-testing.mdc` — Testing patterns (Auto Attached)\n\n```mdc\n---\ndescription: PHPUnit Kernel & Functional test scaffolds.\nglobs:\n  - \"tests/src/**/*.php\"\nalwaysApply: false\n---\n\n# Drupal Testing Rules\n\n1. **Base classes**  \n   * Use `KernelTestBase` for unit‑ish tests needing services.  \n   * Use `BrowserTestBase` for full‑stack functional tests.\n\n2. **Fixtures & setup**  \n   * Install required modules via `$this->enableModules(['node', 'my_module']);`\n   * Use `$this->drupalCreateUser()` and `$this->drupalLogin()` helpers.\n\n3. **Assertions**  \n   * Prefer `$this->assertTrue()` / `$this->assertEquals()` over deprecated helpers.  \n   * For rendered HTML, use `$this->assertSession()->elementExists('css', '.class');`.\n\n4. **CI**  \n   * Tests must pass with `phpunit -c core/phpunit.xml.dist`.\n```","data":{"title":"Drupal Development","description":"Rules for maintaining high code quality in Drupal projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","standards","best practices","development"],"date":"2024-04-17","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/rules/drupal/","discipline":"development","contentType":"","tags":["drupal","standards","best practices","development"],"date":"2024-04-17"},{"title":"General Development Workflow","description":"Workflow states and processes for general software development projects.","content":{"content":"```\n# Development Workflow State\n\n## Current Status\n- **Phase**: Implementation\n- **Version**: 0.1.0\n- **Last Updated**: 2024-03-20\n\n## Completed Tasks\n- [x] Project initialization\n- [x] Basic structure setup\n- [x] Template creation\n- [x] GitHub Pages configuration\n\n## In Progress\n- [ ] Content population\n- [ ] Search implementation\n- [ ] Testing setup\n- [ ] Documentation\n\n## Next Steps\n1. Add example content\n2. Implement search functionality\n3. Set up testing framework\n4. Complete documentation\n5. Deploy to production\n\n## Issues and Resolutions\n### Current Issues\n1. None reported\n\n### Resolved Issues\n1. None yet\n\n## Performance Metrics\n- Build Time: Not measured\n- Page Load: Not measured\n- Search Response: Not implemented\n\n## Notes\n- Focus on content structure\n- Maintain documentation\n- Regular updates required\n- Monitor performance metrics \n```","data":{"title":"General Development Workflow","description":"Workflow states and processes for general software development projects.","layout":"markdown.njk","category":"Development","tags":["workflow","development","process","best practices"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/workflow-states/development/","discipline":"development","contentType":"","tags":["workflow","development","process","best practices"],"date":"2024-03-20"},{"title":"Drupal Development Workflow","description":"Workflow states and processes for Drupal development projects.","content":{"content":"```\n# Drupal 11 Development Workflow\n\n## Development States\n\n### 1. Project Setup\n- Initialize Composer project\n- Configure development environment\n- Set up version control\n- Configure CI/CD pipeline\n- Set up local development tools\n\n### 2. Feature Development\n- Create feature branch\n- Implement functionality\n- Write tests\n- Document changes\n- Code review process\n- Merge to development branch\n\n### 3. Testing\n- Run PHPUnit tests\n- Execute PHPCS checks\n- Perform security scans\n- Test accessibility\n- Validate performance\n- User acceptance testing\n\n### 4. Deployment\n- Create release branch\n- Update version numbers\n- Generate changelog\n- Deploy to staging\n- Final testing\n- Production deployment\n\n### 5. Maintenance\n- Security updates\n- Performance monitoring\n- Bug fixes\n- Documentation updates\n- Dependency updates\n- Backup verification\n\n## Quality Gates\n\n### Code Quality\n- PHPCS compliance\n- PHPStan analysis\n- Test coverage > 80%\n- No critical security issues\n- Performance benchmarks met\n\n### Documentation\n- README updated\n- API documentation current\n- Change log maintained\n- Deployment instructions\n- Troubleshooting guide\n\n### Security\n- Security updates applied\n- Access control verified\n- Input validation checked\n- Sensitive data protected\n- Audit logs maintained\n\n### Performance\n- Page load times < 2s\n- Cache hit ratio > 90%\n- Database queries optimized\n- Asset delivery optimized\n- Resource usage monitored \n```","data":{"title":"Drupal Development Workflow","description":"Workflow states and processes for Drupal development projects.","layout":"markdown.njk","category":"Drupal","tags":["drupal","workflow","development","process"],"date":"2024-03-20","discipline":"development"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/development/workflow-states/drupal-development/","discipline":"development","contentType":"","tags":["drupal","workflow","development","process"],"date":"2024-03-20"},{"title":"Meeting Action Items Extractor","description":"AI prompt for extracting and formatting action items from meeting transcripts","content":{"content":"\n`````\nYou are an AI assistant tasked with extracting action items from a meeting transcript. This is a crucial task as it helps team members identify and follow up on important tasks discussed during the meeting.\n\nGuidelines for identifying action items:\n1. Look for specific tasks or responsibilities assigned to individuals or teams\n2. Pay attention to deadlines or timeframes mentioned\n3. Note any follow-up activities or next steps discussed\n4. Identify decisions that require further action\n\nHere is the meeting transcript:\n\n<meeting_transcript>\npm/meetings/Pre-kickoff/transcript.txt\n</meeting_transcript>\n\nPlease carefully read through the transcript and extract all action items. For each action item:\n1. Identify the task or responsibility\n2. Note who is responsible (if specified)\n3. Include any deadlines or timeframes mentioned\n4. Provide context if necessary (briefly)\n\nAfter extracting the action items, provide a brief summary of how many action items you found.\n\nFormat your response as follows:\n1. List each action item in a numbered list\n2. Use bold text for the main task\n3. Use italics for the responsible person or team\n4. Include deadlines in parentheses\n5. Add a brief context or note if needed, separated by a colon\n\nYour final output should only include the numbered list of action items followed by the summary of the number of items found. Do not include any other text or explanations. Enclose your entire response in <action_items> tags.\n\n<action_items>\n1. **[Main task]** - *[Responsible person/team]* (Deadline): Context or note if needed\n2. **[Main task]** - *[Responsible person/team]* (Deadline): Context or note if needed\n...\n\nSummary: [Number] action items found.\n</action_items>\n`````\n\n### Example Usage\n\nHere's an example of using this prompt with a meeting transcript:\n\n```text\nMeeting Transcript:\nSarah: We need to update the project timeline by next Friday.\nJohn: I'll take care of the vendor contracts, aiming to have them signed by end of month.\nTeam: Let's schedule the kickoff meeting for early next week.\nMike: I can prepare the budget forecast, give me 3 days.\n\nAI Response:\n<action_items>\n1. **Update project timeline** - *Sarah* (Next Friday)\n2. **Process vendor contracts** - *John* (End of month): Needs signatures\n3. **Schedule kickoff meeting** - *Team* (Early next week)\n4. **Prepare budget forecast** - *Mike* (3 days)\n\nSummary: 4 action items found.\n</action_items>\n``` ","data":{"title":"Meeting Action Items Extractor","description":"AI prompt for extracting and formatting action items from meeting transcripts","date":"2024-03-21","layout":"markdown.njk","discipline":"project-management","contentType":"prompts","tags":["meetings","action-items","transcripts","project-management","task-tracking"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project-management/prompts/meeting-action-items/","discipline":"project-management","contentType":"prompts","tags":["meetings","action-items","transcripts","project-management","task-tracking"],"date":"2024-03-21"},{"title":"Meeting Notes Extraction","description":"Converts raw meeting transcripts into organized, concise meeting notes by extracting essential information","content":{"content":"`````\n# Meeting Notes Extraction Prompt\n\nYou are a professional meeting assistant tasked with converting a raw meeting transcript into organized, concise meeting notes. Your job is to identify and extract the essential information while filtering out casual conversation and irrelevant details.\n\n## Extraction Guidelines:\n\n1. **Meeting Overview**:\n   - Identify the date and primary purpose of the meeting\n   - List all participants (with roles if mentioned)\n\n2. **Key Discussion Topics**:\n   - Identify main topics discussed (use H3 headers)\n   - Provide a 2-3 sentence summary of each topic\n   - Include only substantive information, not casual exchanges\n\n3. **Decisions Made**:\n   - Extract clear decisions or conclusions reached\n   - Note any consensus or disagreements on important matters\n\n4. **Action Items**:\n   - List tasks assigned to specific people\n   - Include deadlines if mentioned\n   - Format as: Task - Owner - (Deadline)\n\n5. **Updates/Progress Reports**:\n   - Note any status updates on ongoing projects\n   - Summarize progress reported by team members\n\n6. **Next Steps**:\n   - Identify planned next steps or follow-up items\n   - Note any scheduled follow-up meetings\n\n## Output Format:\n```\n# Meeting Notes: [Date]\n\n## Participants\n- [Names of participants]\n\n## Summary\n[1-2 paragraph overview of key points]\n\n## Discussion Topics\n\n### [Topic 1]\n[Concise summary]\n\n### [Topic 2]\n[Concise summary]\n\n## Decisions\n- [Decision 1]\n- [Decision 2]\n\n## Action Items\n- [Task 1] - [Owner] - ([Deadline])\n- [Task 2] - [Owner] - ([Deadline])\n\n## Updates\n- [Update 1]\n- [Update 2]\n\n## Next Steps\n- [Next step 1]\n- [Next step 2]\n```\n\nPlease analyze the following meeting transcript and extract the key information according to these guidelines. Focus on substance over form, and ensure all critical information is captured while eliminating irrelevant chatter. \n`````","data":{"title":"Meeting Notes Extraction","description":"Converts raw meeting transcripts into organized, concise meeting notes by extracting essential information","date":"2025-05-01","layout":"markdown.njk","discipline":"project-management","contentType":"prompts","tags":["meetings","documentation","transcripts","notes"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project-management/prompts/meeting-notes-extraction/","discipline":"project-management","contentType":"prompts","tags":["meetings","documentation","transcripts","notes"],"date":"2025-05-01"},{"title":"Weekly Project Journal Entry","description":"AI prompt for formatting a transcript into our weekly project journal entry format.","content":{"content":"\n`````\nYou are a project manager for a web development company building websites and platforms for clients.\nAs such you need to produce a weekly report for your manager detailing the progress and health of the current project.\nThe input will most likely be a transcript or dictation.\n\n<requirements>\n1. The report should be written in first person tense.\n2. Each section should contain enumerated items.\n3. Refer to the glossary below for any jargon or unusual terms.\n</requirements>\n\nThe format is as follows:\n\n<format>\n### Progress & Milestones\n[itemized list of accomplishments]\n\n### Problems/Concerns \n[itemized list of issues or concerns]\n\n### Opportunities\n[itemized list of things we might be able to explore outside the scope of this project.]\n\n### Other Notes\n[anything else that seems worth noting that doesn't fall into the above categories.]\n\n### Things to Share With the Group\n[A sentence or two summarizing the project health, and a list of any items outside of standard work updates that should be shared with other PMs or account managers that may be of use on their projects or would affect business outside of day-to-day operations on this project.]\n\n### Quote of the Week\n[lookup a funny or inspirational quote around project management or software development, with it's attribution.]\n</format>\n\n<glossary>\n# Glossary of terms I may use to describe these projects:\n- \n</glossary>\n`````\n","data":{"title":"Weekly Project Journal Entry","description":"AI prompt for formatting a transcript into our weekly project journal entry format.","date":"2025-04-17","layout":"markdown.njk","discipline":"project-management","contentType":"prompts","tags":["meetings","action-items","transcripts","project-management","task-tracking"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project-management/prompts/project-journal-entry/","discipline":"project-management","contentType":"prompts","tags":["meetings","action-items","transcripts","project-management","task-tracking"],"date":"2025-04-17"},{"title":"Readable Zoom Transcripts","description":"A prompt for cleaning and formatting meeting transcripts to improve readability while maintaining content integrity.","content":{"content":"`````\nYou will be given a transcript of a conversation. Your task is to clean up this transcript to make it more readable while maintaining the original content and meaning.\n\n## Instructions\n\nFollow these steps to clean up the transcript:\n\n1. Remove all timestamps from the transcript.\n\n2. Combine consecutive entries from the same author into a single paragraph. For example:\n\n   \n   John [10:15]: Hello there.\n   John [10:16]: How are you?\n   \n\n   Should become:\n   \n   John: Hello there. How are you?\n   \n\n3. Remove filler words and slight interjections such as \"Um\", \"Ah\", \"Uh\", \"Er\", and similar sounds. Only remove these when they are used as filler words and not when they are part of the actual content.\n\n4. Maintain the overall content and meaning of the text. Do not paraphrase or summarize the content. Keep the exact wording except for the removals mentioned above.\n\n5. Format the cleaned transcript as follows:\n   - Start each new speaker's dialogue with their name followed by a colon.\n   - Use a blank line to separate different speakers' dialogues.\n   - If a single speaker's dialogue is very long, you may split it into paragraphs for readability, but do not add blank lines between these paragraphs.\n\n6. Ensure that the cleaned transcript remains true to the original content, preserving the flow of the conversation and all important information.\n\nOnce you have cleaned up the transcript according to these instructions, please provide the cleaned version in a new markdown file. Process the entire transcript and verify once complete. \n`````","data":{"title":"Readable Zoom Transcripts","description":"A prompt for cleaning and formatting meeting transcripts to improve readability while maintaining content integrity.","date":"2024-04-04","layout":"markdown.njk","discipline":"project-management","contentType":"prompts","tags":["transcription","meetings","documentation","communication"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project-management/prompts/readable-zoom-transcripts/","discipline":"project-management","contentType":"prompts","tags":["transcription","meetings","documentation","communication"],"date":"2024-04-04"},{"title":"Summarize This","description":"A prompt for summarizing long transcripts of meetings, YouTube videos, and other content","content":{"content":"\r\n# A prompt for summarizing long transcipts of meetings, YouTube videos, etc.\r\n\r\n`````\r\nWhen creating a summary, include:\r\n\r\n- A brief introduction explaining the video's main purpose/problem\r\n- A detailed breakdown of all major points, with specific examples from the video\r\n- Sub-sections for each key concept with explanations of how they connect\r\n- Practical applications of the ideas presented\r\n- Any frameworks or systems the presenter introduces\r\n- Notable quotes or specific terminology used by the presenter\r\n\r\nStructure the summary with clear headings and bullet points where appropriate to enhance readability.\r\n\r\n## Summary rules for sizing\r\n\r\nIF request contains \"short\" OR \"small\" THEN use 250-300 words to summarize\r\nIF request contains \"medium\" THEN use 300-500 words  to summarize\r\nIF request contains \"long\" OR \"large\" THEN use 500-750 words to summarize \r\nIF no size preference is detected THEN ask for clarification\r\n`````","data":{"title":"Summarize This","description":"A prompt for summarizing long transcripts of meetings, YouTube videos, and other content","date":"2025-04-11","layout":"markdown.njk","discipline":"project-management","contentType":"prompts","tags":["summary","transcripts","meetings","video"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project-management/prompts/summarize-this/","discipline":"project-management","contentType":"prompts","tags":["summary","transcripts","meetings","video"],"date":"2025-04-11"},{"title":"Quality Assurance Test Checklist","description":"A comprehensive checklist to ensure quality and consistency before releasing any feature or update. Covers requirements, testing, documentation, and stakeholder sign-off.","content":{"content":"# Quality Assurance Test Checklist\n\n```\nUse this checklist to ensure quality and consistency before releasing any feature or update:\n\n- [ ] Requirements are clearly defined and understood\n- [ ] All acceptance criteria are met\n- [ ] Code has been peer reviewed\n- [ ] Unit tests are written and passing\n- [ ] Integration tests are written and passing\n- [ ] Manual testing completed on all supported browsers/devices\n- [ ] No critical or high-severity bugs remain\n- [ ] Documentation is updated\n- [ ] Rollback plan is in place\n- [ ] Stakeholders have signed off\n```\n---\n\n*Add or modify checklist items as needed for your project or workflow.* ","data":{"title":"Quality Assurance Test Checklist","description":"A comprehensive checklist to ensure quality and consistency before releasing any feature or update. Covers requirements, testing, documentation, and stakeholder sign-off.","date":"2025-04-11","layout":"markdown.njk","discipline":"quality-assurance","contentType":"prompts","tags":["quality-assurance","testing","checklist","release","bugs","review","documentation"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/quality-assurance/prompts/qa-test-checklist/","discipline":"quality-assurance","contentType":"prompts","tags":["quality-assurance","testing","checklist","release","bugs","review","documentation"],"date":"2025-04-11"},{"title":"","description":"","content":{"content":"# Prompt Library\n\nA collection of AI prompts, rules (guidelines for development environments), project configurations, and workflow states across different disciplines. Built with 11ty and hosted on GitHub Pages.\n\n![Screenshot of the Prompt Library showing the Development AI Prompts page](assets/images/prompt_library.png)\n\n## Features\n\n- Clean, modern design\n- Responsive layout\n- Easy navigation\n- Search functionality\n- Content categorization by discipline\n- Markdown support\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js (v16 or higher)\n- npm or yarn\n- Git\n\n### Installation\n\n1. Clone the repository\n```bash\ngit clone https://github.com/yourusername/prompt-library.git\ncd prompt-library\n```\n\n2. Install dependencies\n```bash\nnpm install\n```\n\n3. Start the development server\n```bash\nnpm start\n```\n\n4. Build for production\n```bash\nnpm run build\n```\n\n## Project Structure\n\n```\n├── _data/              # Global data files\n├── _includes/          # Includes and partials\n├── _layouts/           # Page templates\n│   ├── base.njk        # Base layout\n│   ├── discipline.njk  # Discipline-specific layout\n│   └── content-type.njk # Content type layout\n├── assets/             # Static assets\n│   ├── css/           # Stylesheets\n│   ├── js/            # JavaScript files\n│   └── images/        # Image assets\n├── development/        # Development discipline content\n│   ├── prompts/       # Development prompts\n│   ├── rules/  # Development rules\n│   ├── project-configs/ # Development project configs\n│   └── workflow-states/ # Development workflow states\n├── project-management/ # Project Management discipline content\n│   ├── prompts/\n│   ├── rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── sales-marketing/    # Sales & Marketing discipline content\n│   ├── prompts/\n│   ├── rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── content-strategy/   # Content Strategy discipline content\n│   ├── prompts/\n│   ├── rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── design/            # Design discipline content\n│   ├── prompts/\n│   ├── rules/\n│   ├── project-configs/\n│   └── workflow-states/\n├── quality-assurance/        # Quality Assurance discipline content\n│   ├── prompts/        # Quality Assurance prompts and checklists\n│   ├── rules/   # Quality Assurance-specific rules and guidelines for maintaining consistency\n│   ├── project-configs/ # Quality Assurance tool or process configurations\n│   └── workflow-states/ # Quality Assurance workflow documentation\n├── .github/           # GitHub configuration\n│   └── workflows/     # GitHub Actions workflows\n├── .eleventy.js       # 11ty configuration\n├── .gitignore\n├── package.json\n└── README.md\n```\n\n## Content Organization\n\nThe library is organized by disciplines and content types:\n\n### Disciplines\n- Development\n- Project Management\n- Sales & Marketing\n- Content Strategy\n- Design\n- Quality Assurance\n\n### Content Types\n- Prompts: AI prompts for various use cases\n- Rules: Guidelines for development environments\n- Project Configs: Project configuration templates\n- Workflow States: Process and workflow documentation\n\nEach discipline contains all content types, allowing for specialized content within each field.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n- [Submit a Prompt](https://github.com/Lullabot/prompt_library/issues/new?template=prompt-submission.yml) - Share AI prompts for various use cases\n- [Submit a Rule](https://github.com/Lullabot/prompt_library/issues/new?template=rule-submission.yml) - Contribute guidelines for development environments\n- [Submit a Project Config](https://github.com/Lullabot/prompt_library/issues/new?template=project-config-submission.yml) - Share project configuration templates\n- [Submit a Workflow State](https://github.com/Lullabot/prompt_library/issues/new?template=workflow-state-submission.yml) - Contribute process and workflow documentation\n\n## License\n\nThis project is licensed under the ISC License.\n\n## Acknowledgments\n\n- [11ty](https://www.11ty.dev/)\n- [GitHub Pages](https://pages.github.com/) ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/README/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# 11ty Prompt Library Project Configuration\n\n## Project Overview\nThis project is a static site built with 11ty that organizes and presents AI prompts, rules, project configurations, and workflow state examples across different disciplines. The site is hosted on GitHub Pages and features a clean, modern design with discipline-based content organization.\n\n## Prerequisites\n- Node.js (v16 or higher)\n- npm or yarn\n- Git\n- GitHub account\n\n## Initial Setup\n\n1. **Create a new GitHub repository**\n   ```bash\n   # Initialize a new repository\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   git branch -M main\n   git remote add origin <your-repo-url>\n   git push -u origin main\n   ```\n\n2. **Initialize 11ty project**\n   ```bash\n   # Create package.json\n   npm init -y\n\n   # Install 11ty and other dependencies\n   npm install --save-dev @11ty/eleventy\n   ```\n\n3. **Project Structure**\n   ```\n   ├── _data/              # Global data files\n   ├── _includes/          # Includes and partials\n   ├── _layouts/           # Page templates\n   │   ├── base.njk        # Base layout\n   │   ├── discipline.njk  # Discipline-specific layout\n   │   └── content-type.njk # Content type layout\n   ├── assets/             # Static assets\n   │   ├── css/           # Stylesheets\n   │   ├── js/            # JavaScript files\n   │   └── images/        # Image assets\n   ├── development/        # Development discipline content\n   │   ├── prompts/       # Development prompts\n   │   ├── rules/  # Development rules\n   │   ├── project-configs/ # Development project configs\n   │   └── workflow-states/ # Development workflow states\n   ├── project-management/ # Project Management discipline\n   ├── sales-marketing/    # Sales & Marketing discipline\n   ├── content-strategy/   # Content Strategy discipline\n   ├── design/            # Design discipline\n   ├── .github/workflows/  # GitHub Actions workflows\n   ├── .eleventy.js       # 11ty configuration\n   ├── package.json\n   └── README.md\n   ```\n\n## Configuration Files\n\n### .eleventy.js\n```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = function(eleventyConfig) {\n  // Copy static assets\n  eleventyConfig.addPassthroughCopy(\"assets\");\n\n  // Add date filter with format support\n  eleventyConfig.addFilter(\"date\", function(date, format = \"yyyy-MM-dd\") {\n    if (date === \"now\") {\n      date = new Date();\n    } else if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n    \n    if (isNaN(date.getTime())) {\n      return \"\";\n    }\n\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n\n    switch (format) {\n      case \"yyyy\":\n        return year.toString();\n      default:\n        return `${year}-${month}-${day}`;\n    }\n  });\n\n  // Add discipline filter\n  eleventyConfig.addFilter(\"filterByDiscipline\", function(collection, discipline) {\n    if (!collection) return [];\n    return collection.filter(item => item.data.discipline === discipline);\n  });\n\n  // Add collections for content types\n  const disciplines = ['development', 'project-management', 'sales-marketing', 'content-strategy', 'design'];\n  const contentTypes = ['prompts', 'rules', 'project-configs', 'workflow-states'];\n\n  contentTypes.forEach(type => {\n    eleventyConfig.addCollection(type, function(collection) {\n      return collection.getFilteredByGlob(\n        disciplines.map(discipline => `${discipline}/${type}/**/*.md`)\n      );\n    });\n  });\n\n  // Add base URL for GitHub Pages\n  eleventyConfig.addGlobalData(\"baseUrl\", process.env.GITHUB_ACTIONS ? \"/prompt_library\" : \"\");\n\n  return {\n    dir: {\n      input: \".\",\n      output: \"_site\",\n      includes: \"_includes\",\n      layouts: \"_layouts\",\n      data: \"_data\"\n    },\n    templateFormats: [\"md\", \"njk\", \"html\"],\n    markdownTemplateEngine: \"njk\",\n    htmlTemplateEngine: \"njk\",\n    dataTemplateEngine: \"njk\",\n    pathPrefix: process.env.GITHUB_ACTIONS ? \"/prompt_library/\" : \"/\"\n  };\n};\n```\n\n### package.json Scripts\n```json\n{\n  \"scripts\": {\n    \"start\": \"eleventy --serve\",\n    \"build\": \"eleventy\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n## Content Structure\n\n### Discipline Organization\nEach discipline follows the same content type structure:\n```markdown\n---\ntitle: \"Content Title\"\ndescription: \"Brief description\"\ncategory: \"Category\"\ntags: [\"tag1\", \"tag2\"]\ndate: \"2024-03-20\"\ndiscipline: \"development\"\n---\n\nContent goes here...\n```\n\n### Layout Templates\n\n#### base.njk\nBase template with common elements:\n```njk\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ title }} - Prompt Library</title>\n    <link rel=\"stylesheet\" href=\"{{ baseUrl }}/assets/css/styles.css\">\n</head>\n<body>\n    <header>\n        <nav>\n            <a href=\"{{ baseUrl }}/\">Home</a>\n            <a href=\"{{ baseUrl }}/prompts\">Prompts</a>\n            <a href=\"{{ baseUrl }}/rules\">Rules</a>\n            <a href=\"{{ baseUrl }}/project-configs\">Project Configs</a>\n            <a href=\"{{ baseUrl }}/workflow-states\">Workflow States</a>\n        </nav>\n    </header>\n\n    <main>\n        {{ content | safe }}\n    </main>\n\n    <footer>\n        <p>&copy; {{ \"now\" | date(\"yyyy\") }} Prompt Library</p>\n    </footer>\n</body>\n</html>\n```\n\n#### discipline.njk\nTemplate for discipline-specific pages:\n```njk\n---\nlayout: base.njk\n---\n\n<nav class=\"discipline-nav\">\n    <a href=\"{{ baseUrl }}/{{ discipline }}/prompts\">Prompts</a>\n    <a href=\"{{ baseUrl }}/{{ discipline }}/rules\">Rules</a>\n    <a href=\"{{ baseUrl }}/{{ discipline }}/project-configs\">Project Configs</a>\n    <a href=\"{{ baseUrl }}/{{ discipline }}/workflow-states\">Workflow States</a>\n</nav>\n\n{{ content | safe }}\n```\n\n#### content-type.njk\nTemplate for content type pages:\n```njk\n---\nlayout: discipline.njk\n---\n\n<div class=\"content-type-header\">\n    <h1>{{ title }}</h1>\n    <p class=\"description\">{{ description }}</p>\n</div>\n\n<div class=\"content-list\">\n    {% for item in collections[contentType] | filterByDiscipline(discipline) %}\n        <article class=\"content-item\">\n            <h2><a href=\"{{ item.url }}\">{{ item.data.title }}</a></h2>\n            <p>{{ item.data.description }}</p>\n            <div class=\"metadata\">\n                <span class=\"date\">{{ item.date | date(\"yyyy-MM-dd\") }}</span>\n                {% if item.data.tags %}\n                    <div class=\"tags\">\n                        {% for tag in item.data.tags %}\n                            <span class=\"tag\">{{ tag }}</span>\n                        {% endfor %}\n                    </div>\n                {% endif %}\n            </div>\n        </article>\n    {% endfor %}\n</div>\n```\n\n## GitHub Pages Setup\n\n### .github/workflows/deploy.yml\n```yaml\nname: Deploy to GitHub Pages\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site\n```\n\n## Development Workflow\n\n1. **Create content in appropriate discipline directory**\n   ```bash\n   # Example: Creating a new prompt in the development discipline\n   mkdir -p development/prompts/new-prompt\n   touch development/prompts/new-prompt/index.md\n   ```\n\n2. **Test locally**\n   ```bash\n   npm start\n   ```\n\n3. **Build for production**\n   ```bash\n   npm run build\n   ```\n\n4. **Commit and push changes**\n   ```bash\n   git add .\n   git commit -m \"Add new content\"\n   git push origin main\n   ```\n\n## Maintenance\n\n- Keep content organized within appropriate disciplines\n- Regularly update dependencies\n- Monitor GitHub Pages deployment status\n- Review and update content structure as needed\n- Test search functionality after content updates\n- Check for broken links and assets\n- Maintain consistent styling across all pages ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/project_config/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# Workflow State Documentation\n\n## Current State\n- **Project Status**: Content Organization Phase\n- **Last Updated**: 2024-03-20\n- **Current Version**: 0.2.0\n\n### Completed Tasks\n- [x] Created project configuration documentation\n- [x] Established project structure\n- [x] Defined content organization by disciplines\n- [x] Set up GitHub Pages deployment workflow\n- [x] Created base layout template\n- [x] Created discipline layout template\n- [x] Created content type layout template\n- [x] Implemented consistent styling across pages\n- [x] Set up development discipline content\n- [x] Created example prompts and rules\n- [x] Added search functionality\n- [x] Updated documentation\n\n### In Progress\n- [ ] Creating content for other disciplines\n- [ ] Enhancing search capabilities\n- [ ] Implementing content filtering\n- [ ] Adding content creation guidelines\n\n### Pending Tasks\n- [ ] Content for Project Management discipline\n- [ ] Content for Sales & Marketing discipline\n- [ ] Content for Content Strategy discipline\n- [ ] Content for Design discipline\n- [ ] Testing framework setup\n- [ ] Analytics integration\n- [ ] User contribution workflow\n\n## Development Plan\n\n### Phase 1: Foundation (Completed)\n- [x] Initialize 11ty project\n- [x] Set up basic templates\n- [x] Configure GitHub Pages\n- [x] Create initial content structure\n- [x] Test deployment workflow\n- [x] Implement base styling\n\n### Phase 2: Content Organization (Current)\n- [x] Implement discipline-based structure\n- [x] Create content type templates\n- [x] Set up development discipline content\n- [x] Implement consistent styling\n- [ ] Create content guidelines\n- [ ] Add content validation\n\n### Phase 3: Enhancement\n- [ ] Implement advanced search features\n- [ ] Add discipline-specific filters\n- [ ] Create user contribution workflow\n- [ ] Add content categorization\n- [ ] Implement content relationships\n- [ ] Add content versioning\n\n### Phase 4: Polish\n- [ ] Optimize performance\n- [ ] Enhance accessibility\n- [ ] Complete documentation\n- [ ] Add analytics\n- [ ] Final testing and review\n\n## Rules and Guidelines\n\n### Development Rules\n1. All changes must be made in feature branches\n2. Each feature branch must have corresponding tests\n3. Pull requests require at least one review\n4. Documentation must be updated with any changes\n5. Follow semantic versioning for releases\n\n### Content Rules\n1. Content must be organized by discipline\n2. Each discipline follows the same content types\n3. All content must include proper frontmatter\n4. Content must be properly categorized with tags\n5. Regular content audits required\n\n### Deployment Rules\n1. All deployments must pass tests\n2. Production deployments only from main branch\n3. Regular backups of content required\n4. Monitor performance metrics\n5. Document all deployment changes\n\n## Change Log\n\n### 2024-03-20\n- Reorganized content by disciplines\n- Created discipline and content type layouts\n- Implemented consistent styling\n- Added development discipline content\n- Updated project documentation\n\n### Upcoming Changes\n- Add content for remaining disciplines\n- Enhance search functionality\n- Implement content filtering\n- Add content creation guidelines\n\n## Performance Metrics\n- **Build Time**: < 1s\n- **Page Load Time**: < 2s\n- **Search Response Time**: < 500ms\n- **Content Count**: 8 items\n\n## Issues and Resolutions\n\n### Current Issues\n1. Need to populate content for other disciplines\n2. Search functionality needs enhancement\n3. Content filtering not yet implemented\n\n### Resolved Issues\n1. Content organization structure implemented\n2. Template hierarchy established\n3. Consistent styling achieved\n4. Development content migration completed\n\n## Notes and Observations\n- Discipline-based organization provides better content structure\n- Content type templates ensure consistency\n- Development discipline serves as a model for other disciplines\n- Regular documentation updates essential\n\n## Next Steps\n1. Create content for remaining disciplines\n2. Enhance search functionality\n3. Implement content filtering\n4. Add content creation guidelines\n5. Set up testing framework ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/workflow_state/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"\n## Issue Reference\nCloses #[issue-number] <!-- Replace with the issue number this PR addresses -->\n\n## Description of Changes\nDescribe what this PR changes, adds, or fixes. Include context and reasoning for the change.\n\n## Testing Instructions\n1. List steps to test the changes\n2. Include any setup or configuration required\n3. Note any edge cases to consider\n\n## Screenshots (if applicable)\nAdd screenshots or GIFs to help reviewers understand the changes.\n\n## Checklist for Reviewers\n- [ ] Code follows project best practices\n- [ ] All tests pass locally\n- [ ] Documentation is updated as needed\n- [ ] Configuration changes (if any) are exported and committed\n- [ ] Update hooks or data migrations are included (if needed)\n- [ ] No sensitive data or credentials are committed\n- [ ] PR description is clear and complete\n\n## Additional Notes\nAdd any other information for reviewers here. ","data":{"name":"Pull Request","about":"Submit a pull request to Noko-LSM"},"isEmpty":false,"excerpt":""},"url":"/prompt_library/.github/PULL_REQUEST_TEMPLATE/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# Active Context\n\n## Current Focus\n- Implementing and testing GitHub Issue Templates as a primary method for content contribution, aligning with an \"invite and curate\" strategy.\n- Refining the contribution workflow based on discussions in Issue #34.\n- Ensuring all discipline/content-type folders (including QA) are properly initialized with customized `index.njk` files containing relevant metadata and placeholder content, replacing any `.gitkeep` files.\n- **FIXED:** Quality Assurance discipline was missing from Eleventy's config. It has now been added to the `disciplines` array, so QA content is visible and highlighted on the homepage and navigation.\n- **Next:** Rebuild the site and verify that the homepage and navigation now correctly highlight Quality Assurance when content exists.\n\n## Recent Activity\n- Discussed various approaches to simplifying contribution and frontmatter generation (GitHub Issue #34).\n- Explored GitHub Issue Templates/Forms as a user-friendly option.\n- Drafted and created the initial `prompt-submission.yml` template in `.github/ISSUE_TEMPLATE/`.\n- Replaced `.gitkeep` files in all `quality-assurance/` subfolders with Quality Assurance-specific `index.njk` files, each including tailored metadata and a section description.\n\n## Next Steps\n- **Test Issue Template:** Submit test content using the new prompt submission template on GitHub.\n- **Define Maintainer Workflow:** Document the process for maintainers to review issue submissions and convert them into markdown files with correct frontmatter and structure.\n- **Finalize Template Fields:** Review and finalize the dropdown options for `discipline` and `content-type` in `prompt-submission.yml`.\n- **Create More Templates:** Draft and create similar issue templates for other content types (workflows, rules, configs) as needed.\n- **Update Contribution Docs:** Update `contributing.njk` to reflect the primary use of issue templates.\n- **Verify Section Initialization:** Ensure all discipline/content-type folders are initialized with appropriate `index.njk` files and metadata. ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/memory-bank/activeContext/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# Product Context\n\n## Why This Project Exists\nTo provide a central, organized repository for AI prompts, rules, project configurations, and workflow states.\n\n## Problems It Solves\nAddresses the issue of scattered resources, making it difficult for individuals to find and share relevant prompts, rules, configurations, and workflows efficiently. It eliminates the need to search across disparate locations or rely on ad-hoc sharing methods.\n\n## How It Should Work\nThe collection is presented through a web user interface built with the 11ty static site generator. Content is stored in flat Markdown files and organized by discipline (e.g., Project Management, Development). Users access the content via this web UI.\n\n## User Experience Goals\nThe user experience should be straightforward and intuitive. Users should be able to:\n*   Easily search for specific content using a search bar.\n*   Browse content categorized by discipline.\n*   Find clear instructions on how to contribute their own content to the library.\n*   **Contribution Strategy:** Employ an \"invite and curate\" model, encouraging contributions through various channels, including user-friendly GitHub Issue Templates/Forms, with maintainers handling the final integration. ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/memory-bank/productContext/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# Progress\n\n## What Works / Exists\n- Project repository cloned.\n- Basic project structure as defined in `README.md` is present.\n- Core memory bank files created and populated with initial project details and context.\n- Dependencies verified via `package.json` (`@11ty/eleventy@^3.0.0`).\n- 11ty configuration (`.eleventy.js`) details (collections, filters, search index generation, directory structure, base path handling) documented.\n- CI/CD workflow (`.github/workflows/deploy.yml`) identified and basic purpose (deployment, base path handling) documented.\n- Initial content is populated in discipline directories (e.g., `development/`, `project-management/`).\n- Search UI implemented (see `_includes/search.njk`).\n- Search UI implementation details (client-side, uses `search-index.json`, includes modal view) understood and documented.\n- Contribution process documented (see `contributing.njk`).\n- Contribution process details (GitHub, Cursor w/ rules, Issues methods; metadata/formatting requirements) understood and documented.\n- Content file structure verified (discipline folders, content-type subfolders, `kebab-case.md` file naming, presence of `index.njk` at both levels).\n- **GitHub Issue Template:** Created initial template (`prompt-submission.yml`) for submitting prompts via issues.\n- **Quality Assurance Section Initialization:** All `quality-assurance/` subfolders now have customized `index.njk` files with Quality Assurance-specific metadata and placeholder content, replacing `.gitkeep` files.\n- **Quality Assurance Config Fix:** The Eleventy config now includes 'quality-assurance' in the disciplines array, so QA content is visible and highlighted on the homepage and navigation.\n\n## What's Left to Build / Document\n- Verification of the *actual* file structure and content existence within all discipline/content-type folders.\n- Detailed documentation for specific components or features if needed (e.g., specific 11ty filters).\n- Further population of content across all disciplines and types.\n- **Define Maintainer Workflow:** Process for handling issue template submissions needs to be defined and documented.\n- **Update Contribution Docs:** `contributing.njk` needs to be updated to feature the issue template method.\n- **Additional Issue Templates:** Templates for other content types (workflows, rules, etc.) may be needed.\n\n## Known Issues\n- None identified yet. ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/memory-bank/progress/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"A collection of AI prompts, rules, project configurations, and workflow states across different disciplines. Built with 11ty and hosted on GitHub Pages. ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/memory-bank/projectbrief/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# System Patterns\n\n## Architecture\n- Static website generated by 11ty.\n- Content is sourced from Markdown files organized within discipline-specific directories.\n- Hosted directly via GitHub Pages.\n\n## Content Organization\n- **Top-level:** Disciplines (e.g., `development/`, `project-management/`, `sales-marketing/`, `content-strategy/`, `design`, `quality-assurance`)\n- **Second-level:** Content Types (`prompts/`, `rules/`, `project-configs/`, `workflow-states/`)\n- Specific content items are individual Markdown files within these directories, typically using `kebab-case.md` naming.\n- An `index.njk` file often exists within discipline directories (e.g., `development/index.njk`) and content-type directories (e.g., `development/prompts/index.njk`) likely serving as landing/listing pages.\n- 11ty collections are automatically generated for each content type, aggregating across disciplines.\n- **IMPORTANT:** The list of disciplines in `.eleventy.js` (`const disciplines = [...]`) must always include all actual discipline folders. If a discipline is missing from this array, its content will not appear in collections, the homepage, or navigation. This caused the Quality Assurance section to be invisible until fixed.\n\n## Templating\n- Nunjucks (.njk) is used as the primary templating engine (for md, html, data files).\n- Key layout files:\n    - `_layouts/base.njk`\n    - `_layouts/discipline.njk`\n    - `_layouts/content-type.njk`\n- Includes/partials are stored in `_includes/`.\n- Global data is stored in `_data/`.\n- Custom Nunjucks filters defined in `.eleventy.js`: `date`, `filterByDiscipline`, `fullUrl`, `hasContent`.\n- Directory structure configured in `.eleventy.js`: input (`.`), output (`_site`), includes (`_includes`), layouts (`_layouts`), data (`_data`).\n\n## Search\n- A search index (`search-index.json`) is generated during build containing title, description, content, url, discipline, contentType, tags, and date for all `.md` files.\n- Search functionality is implemented client-side via JavaScript in `_includes/search.njk`.\n- **Implementation:**\n    - Fetches `search-index.json` on page load.\n    - Filters the index in the browser based on user input (case-insensitive matching on title, description, content, tags).\n    - Results displayed dynamically, updating as user types (min 2 chars).\n- **Features:**\n    - Results link to the content page.\n    - \"View Prompt\" button on each result opens a modal displaying the full Markdown content rendered using `marked.parse()` (requires `marked.js` library).\n- Styling for search components and modal is included within `_includes/search.njk`.\n\n## Styling & Assets\n- Static assets (CSS, JS, Images) are located in the `assets/` directory and copied directly to `_site/assets` during build.\n\n## CI/CD\n- GitHub Actions workflow defined in `.github/workflows/deploy.yml`.\n- **Trigger:** Runs on push to `main` branch and `workflow_dispatch`.\n- **Environment:** `ubuntu-latest` with Node.js v22.\n- **Process:**\n    1. Checkout code.\n    2. Setup Node.js & cache npm dependencies.\n    3. Install dependencies (`npm install`).\n    4. Build site (`npm run build`) - output to `./_site`.\n    5. Deploy `./_site` contents to `gh-pages` branch using `peaceiris/actions-gh-pages@v4`.\n- The build process adapts URLs based on `process.env.GITHUB_ACTIONS` (adds `/prompt_library` base path), configured in `.eleventy.js`.\n- A `baseUrl` global variable and `pathPrefix` are configured in `.eleventy.js` to handle deployment to GitHub Pages subpath.\n\n## Contribution Process\n- Contribution guidelines are documented in the `contributing.njk` page.\n- **Methods:**\n    - **GitHub Direct:** Standard Fork -> Branch -> Add File -> Commit -> PR workflow.\n    - **Cursor:** Recommends using Cursor AI with the `prompt-library-requirements` rule for guided content creation.\n    - **GitHub Issues:** Allows users to suggest content via issues tagged \"Content Suggestion:\".\n- **Content Requirements:**\n    - **Metadata (Frontmatter):** `title`, `description`, `date`, `tags` (min 2).\n    - **Formatting:** Markdown, clear headings, code blocks, reasonable line length, lists.\n    - **Validation:** Check metadata, preview locally (`npm start`), validate links/code, check style.\n- The `contributing.njk` page includes an accordion UI (JS/CSS) to present the methods.\n\n### Planned Contribution Workflow (via Issue Templates)\n- **Initiation:** Contributor selects an Issue Template (e.g., for prompts) and fills out the form.\n- **Submission:** A GitHub Issue is created with structured data and specific labels (e.g., `new-contribution`, `needs-review`).\n- **Curation:** Maintainer reviews the issue, verifies the content, and potentially refines the data (e.g., adds tags).\n- **Conversion:** Maintainer manually creates the corresponding Markdown file in the correct location, populating the frontmatter and content from the issue data.\n- **Integration:** Maintainer commits the new file, typically via a PR, for final review and merge.\n\n## Section Initialization Pattern\n- All discipline/content-type folders (e.g., `quality-assurance/prompts/`, `quality-assurance/rules/`, etc.) should be initialized with a customized `index.njk` file containing relevant metadata (title, description, layout, discipline, contentType, category) and placeholder content describing the section's purpose.\n- This replaces the use of `.gitkeep` files for empty folder tracking, ensuring each section is ready for content and discoverable in the UI.\n- This pattern was applied to the Quality Assurance section, with each subfolder now containing a Quality Assurance-specific `index.njk` file. ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/memory-bank/systemPatterns/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"","description":"","content":{"content":"# Tech Context\n\n## Core Technologies\n- **Static Site Generator:** 11ty (Eleventy)\n- **Hosting:** GitHub Pages\n- **Content Format:** Markdown (.md)\n- **Runtime:** Node.js (v16 or higher required)\n- **Package Manager:** npm (or yarn)\n- **Version Control:** Git\n\n## Supporting Technologies / Formats\n- **GitHub Issue Templates:** YAML format used for creating structured issue forms (`.github/ISSUE_TEMPLATE/*.yml`).\n\n## Development Setup\n1.  Clone the repository.\n2.  Install dependencies using `npm install`.\n3.  Run the development server using `npm start`.\n\n## Build Process\n- Production builds are generated using `npm run build`.\n\n## Dependencies\n- **Primary:** `@11ty/eleventy` (^3.0.0) as a dev dependency.\n- See `package.json` for a full list of npm dependencies. (Verified). ","data":{},"isEmpty":false,"excerpt":""},"url":"/prompt_library/memory-bank/techContext/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"[Bug] <short description>","description":"","content":{"content":"\n## Description\nA clear and concise description of what the bug is.\n\n## Steps to Reproduce\n1. Go to '...'\n2. Click on '...'\n3. Scroll down to '...'\n4. See error\n\n## Expected Behavior\nA clear and concise description of what you expected to happen.\n\n## Actual Behavior\nWhat actually happened?\n\n## Environment\n- OS:\n- Browser:\n- Noko-LSM version:\n- Any relevant configuration (e.g., custom modules, config changes):\n\n## Screenshots\nIf applicable, add screenshots to help explain your problem.\n\n## Acceptance Criteria\n- [ ] Bug is reproducible\n- [ ] Steps to fix are clear\n- [ ] PR includes tests (if applicable)\n- [ ] Documentation updated (if needed)\n\n## Additional Context\nAdd any other context about the problem here. ","data":{"name":"🐛 Bug report","about":"Report a bug to help us improve Noko-LSM","title":"[Bug] <short description>","labels":["bug"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/.github/ISSUE_TEMPLATE/bug_report/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"[Docs] <short description>","description":"","content":{"content":"\n## Summary\nBriefly describe the documentation update needed.\n\n## Affected Documentation\nList the files, sections, or topics that need updating.\n\n## Proposed Changes\nDescribe the changes you propose.\n\n## Motivation\nWhy is this update necessary? Who will benefit?\n\n## Acceptance Criteria\n- [ ] Documentation is clear and accurate\n- [ ] Follows Drupal and project documentation standards\n- [ ] All relevant sections are updated\n\n## Additional Context\nAdd any other context or screenshots about the documentation update here. ","data":{"name":"📝 Documentation update","about":"Request an update or improvement to the documentation","title":"[Docs] <short description>","labels":["documentation"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/.github/ISSUE_TEMPLATE/documentation_update/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"[Feature] <short description>","description":"","content":{"content":"\n## Summary\nA clear and concise description of the feature or enhancement.\n\n## Problem Statement\nWhat problem does this feature solve? Why is it important?\n\n## Proposed Solution\nDescribe the solution you'd like, including any specific requirements or constraints.\n\n## Alternatives Considered\nHave you considered any alternative solutions or features?\n\n## Acceptance Criteria\n- [ ] Feature solves the stated problem\n- [ ] Implementation follows project best practices\n- [ ] Tests and documentation are updated\n\n## Additional Context\nAdd any other context or screenshots about the feature request here. ","data":{"name":"✨ Feature request","about":"Suggest a new feature or enhancement for Noko-LSM","title":"[Feature] <short description>","labels":["enhancement"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/.github/ISSUE_TEMPLATE/feature_request/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"},{"title":"[Performance] <short description>","description":"","content":{"content":"\n## Summary\nA clear and concise description of the performance issue.\n\n## Affected Area\nWhich part of the application is affected (e.g., chart rendering, API response, etc.)?\n\n## Steps to Reproduce\n1. Go to '...'\n2. Perform '...'\n3. Observe performance issue\n\n## Expected Performance\nDescribe what you expected in terms of speed or responsiveness.\n\n## Actual Performance\nDescribe what actually happened, including any metrics or measurements if available.\n\n## Environment\n- OS:\n- Browser:\n- Noko-LSM version:\n- Data size (if relevant):\n\n## Proposed Solution\nIf you have ideas for how to resolve the issue, describe them here.\n\n## Acceptance Criteria\n- [ ] Issue is reproducible\n- [ ] Performance improvement is measurable\n- [ ] Solution follows best practices\n- [ ] Tests and documentation updated (if needed)\n\n## Additional Context\nAdd any other context or screenshots about the performance issue here. ","data":{"name":"🚀 Performance issue","about":"Report a performance problem or bottleneck in Noko-LSM","title":"[Performance] <short description>","labels":["performance"]},"isEmpty":false,"excerpt":""},"url":"/prompt_library/.github/ISSUE_TEMPLATE/performance_issue/","discipline":"","contentType":"","tags":[],"date":"2025-05-27T16:25:09.827Z"}]