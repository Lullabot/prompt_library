---
title: "Help & Guidance"
description: "Helpful resources and explanations for using the Prompt Library."
layout: "base.njk"
---

<div class="help-container">
  <h1 class="help-title">Help & Guidance</h1>

  <details class="accordion-section">
    <summary class="accordion-title">Prompting Best Practices</summary>
    <div class="accordion-content">
      <p>Here are some excellent resources for learning how to write effective prompts:</p>
      <ul>
        <li><a href="https://www.promptingguide.ai/" target="_blank" rel="noopener noreferrer">Prompting Guide by DAIR.AI</a></li>
        <li><a href="https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview" target="_blank" rel="noopener noreferrer">Anthropic's Introduction to Prompt Engineering</a></li>
        <li><a href="https://aurachat.io/learn/tips-for-prompting" target="_blank" rel="noopener noreferrer">AuraChat Prompting Tips</a></li>
        <li><a href="https://platform.openai.com/docs/guides/prompt-engineering/six-strategies-for-getting-better-results" target="_blank" rel="noopener noreferrer">OpenAI's Prompt Engineering Strategies</a></li>
        <li><a href="https://academy.openai.com/" target="_blank" rel="noopener noreferrer">OpenAI Academy</a></li>
      </ul>
    </div>
  </details>

  <h2 class="section-heading">Artifact Types</h2>
  <p>The Prompt Library organizes reusable assets into several artifact types. Each type serves a distinct purpose in AI-assisted development and project management.</p>

  <details class="artifact-section accordion-section">
    <summary class="accordion-title">AI Prompts</summary>
    <div class="accordion-content">
      <p>AI prompts are predefined inputs used to guide AI models in generating responses. They are essential for ensuring that AI outputs are relevant and useful.</p>
      <p class="file-location"><strong>Usage:</strong> Copy and paste the prompt directly into your AI assistant's chat window.</p>
      <div class="example-block">
        <div class="example-label">Example: Project Management User Story Generator</div>
        <code># User Story Generator Prompt

## Format Template
As a [type of user]
I want to [perform some action]
So that [achieve some goal]

## Key Considerations
- User's role and context
- Specific action or functionality
- Clear business value or benefit
- Acceptance criteria
- Technical constraints

## Instructions
Please write 3-5 user stories following this format for: [feature description]

## Example Output
As a content editor
I want to preview content in different screen sizes
So that I can ensure responsive design works correctly

Acceptance Criteria:
- Support desktop, tablet, and mobile views
- Allow custom viewport dimensions
- Show responsive breakpoints
- Real-time preview updates</code>
      </div>
      <div class="submit-link"><a href="https://github.com/Lullabot/prompt_library/issues/new?template=prompt-submission.yml" class="cta-button">Submit a new Prompt</a></div>
    </div>
  </details>

  <details class="artifact-section accordion-section">
    <summary class="accordion-title">Rules (.cursor/rules)</summary>
    <div class="accordion-content">
      <p>Cursor Rules define specific behaviors, guidelines, and configurations for your development environment and AI interactions within the Cursor editor. They help maintain consistency, enforce standards, and streamline workflows.</p>
      <p class="file-location"><strong>File Location Examples:</strong> <code>.cursor/rules/code-review.mdc</code>, <code>.cursor/rules/project-guidelines.md</code></p>
      <p>These rules can cover a wide range of topics, including coding standards, commit message formats, documentation requirements, and even persona definitions for the AI.</p>
      <div class="example-block">
        <div class="example-label">Example: Code Review Guidelines</div>
        <code># Code Review Guidelines

## Scope
Applies to: JavaScript, TypeScript, and React files (*.js, *.ts, *.jsx, *.tsx)

## Review Checklist
### Code Quality
- [ ] Error handling and edge cases covered
- [ ] Consistent naming conventions followed
- [ ] Test coverage for new functionality
- [ ] No security vulnerabilities present
- [ ] Performance considerations addressed
- [ ] Accessibility standards met

### Automation Settings
- Auto-format on save enabled
- Import organization automated
- Warning level severity

## Additional Notes
- Run linter before submitting
- Update documentation if needed
- Consider backwards compatibility</code>
      </div>
      <div class="submit-link"><a href="https://github.com/Lullabot/prompt_library/issues/new?template=rule-submission.yml" class="cta-button">Submit a new Rule</a></div>
    </div>
  </details>

  <details class="artifact-section accordion-section">
    <summary class="accordion-title">Project Configs</summary>
    <div class="accordion-content">
      <p>Project configurations are settings and parameters that define how a project is built, run, or how specific tools related to the project should behave. They are crucial for maintaining consistency and sharing setup information.</p>
      <p class="file-location"><strong>File Location Example:</strong> <code>[category]/project-configs/[config-name].md</code> (e.g., <code>development/project-configs/11ty-setup.md</code>)</p>
      <div class="example-block">
        <div class="example-label">Example: Next.js Project Configuration</div>
        <code># Next.js Configuration Guide

## Image Optimization
- Supported domains: assets.example.com
- Formats: AVIF, WebP
- Quality settings optimized for web

## Internationalization
- Supported languages: English, Spanish, French
- Default: English
- Automatic language detection enabled

## Environment Variables
Required variables:
- API_ENDPOINT: Backend API URL
- ANALYTICS_ID: Web analytics identifier

## Experimental Features
Enabled features:
- Server Actions
- Typed Routes

## URL Management
### Redirects
Old Path | New Path | Type
---------|----------|------
/old-blog/:slug | /blog/:slug | Permanent

## Development Notes
- Update env variables per environment
- Test redirects after deployment
- Monitor experimental features</code>
      </div>
      <div class="submit-link"><a href="https://github.com/Lullabot/prompt_library/issues/new?template=project-config-submission.yml" class="cta-button">Submit a new Project Config</a></div>
    </div>
  </details>

  <details class="artifact-section accordion-section">
    <summary class="accordion-title">Workflow States</summary>
    <div class="accordion-content">
      <p>Workflow states represent the different stages of a project, task, or content lifecycle. They help in tracking progress, defining processes, and managing tasks efficiently.</p>
      <p class="file-location"><strong>File Location Example:</strong> <code>[category]/workflow-states/[workflow-name].md</code> (e.g., <code>content-strategy/workflow-states/editorial-workflow.md</code>)</p>
      <div class="example-block">
        <div class="example-label">Example: Content Publishing Workflow</div>
        <code># Content Publishing Workflow

## Draft
**Owner**: Content Writer
**Required**: title, body, category
Initial content creation phase

## Technical Review
**Owner**: Technical Editor
**Required**: technical_accuracy, code_review
Code snippets and technical accuracy check

## Editorial Review
**Owner**: Editor
**Required**: grammar_check, style_guide_compliance
Grammar, style, and tone review

## Final Approval
**Owner**: Content Manager
**Required**: seo_check, accessibility_check
Final review before publishing

## Published
**Required**: publish_date, author, meta_data
Content is live on the website

## Workflow Transitions
1. Draft → Technical Review
2. Technical Review → Draft or Editorial Review
3. Editorial Review → Technical Review or Final Approval
4. Final Approval → Editorial Review or Published

## Notes
- All required fields must be completed
- Each state requires sign-off
- Published content needs archive strategy</code>
      </div>
      <div class="submit-link"><a href="https://github.com/Lullabot/prompt_library/issues/new?template=workflow-state-submission.yml" class="cta-button">Submit a new Workflow State</a></div>
    </div>
  </details>

  <h2 class="section-heading">Core Concepts</h2>

  <details class="accordion-section">
    <summary class="accordion-title">Memory Bank</summary>
    <div class="accordion-content">
      <p>The Memory Bank is a structured collection of Markdown files designed to provide persistent context and project knowledge. Since AI assistants like Cursor may have their memory reset between sessions, the Memory Bank ensures that critical information about the project's goals, technical details, current progress, and active context is always available.</p>
      <p>Key components typically include:</p>
      <ul>
        <li><code>projectbrief.md</code>: Core requirements and goals.</li>
        <li><code>productContext.md</code>: The 'why' behind the project.</li>
        <li><code>systemPatterns.md</code>: Architecture and technical decisions.</li>
        <li><code>techContext.md</code>: Technologies and setup.</li>
        <li><code>activeContext.md</code>: Current work focus.</li>
        <li><code>progress.md</code>: Status and known issues.</li>
      </ul>
      <p>Maintaining the Memory Bank is crucial for effective collaboration with AI assistants. These files are typically located in the <code>memory-bank/</code> directory, often with subdirectories for each component e.g. <code>memory-bank/projectbrief.md</code></p>
      <p><a href="https://github.com/tacticlaunch/cursor-bank">Browse the Memory Bank documentation</a> 
    </div>
  </details>

</div> 