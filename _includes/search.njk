<div class="search-container">
  <form class="search-form" role="search">
    <label for="search-input" class="visually-hidden">Search</label>
    <input 
      type="search" 
      id="search-input" 
      class="search-input" 
      placeholder="Search prompts, rules, and configurations..."
      aria-label="Search content"
    >
    <button type="submit" class="search-button" aria-label="Search">
      <svg class="search-icon" viewBox="0 0 24 24" width="24" height="24">
        <path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 1 0-.7.7l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0A4.5 4.5 0 1 1 14 9.5 4.5 4.5 0 0 1 9.5 14z"/>
      </svg>
    </button>
  </form>
  <div id="search-results" class="search-results" hidden></div>
</div>

<div id="markdown-modal" class="markdown-modal">
  <div class="markdown-content">
    <button class="close-button" aria-label="Close">&times;</button>
    <div id="markdown-display" class="markdown-body"></div>
  </div>
</div>

<script>
  // Search functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    let searchIndex = [];

    // Fetch search index
    fetch('{{ baseUrl }}/search-index.json')
      .then(response => response.json())
      .then(data => {
        searchIndex = data;
      })
      .catch(error => console.error('Error loading search index:', error));

    // Search function
    function performSearch(query) {
      if (!query || !searchIndex.length) return [];

      const results = searchIndex.filter(item => {
        const searchableText = `${item.title} ${item.description} ${item.content} ${item.tags.join(' ')}`.toLowerCase();
        return searchableText.includes(query.toLowerCase());
      });

      return results;
    }

    // Display results
    function displayResults(results) {
      if (!results.length) {
        searchResults.innerHTML = '<p class="no-results">No results found</p>';
        searchResults.hidden = false;
        return;
      }

      const html = results.map(result => `
        <article class="search-result">
          <h3><a href="{{ baseUrl }}${result.url}">${result.title}</a></h3>
          <p class="result-description">${result.description}</p>
          <div class="result-meta">
            <span class="result-category">${result.category}</span>
            <span class="result-date">${new Date(result.date).toLocaleDateString()}</span>
          </div>
          <button class="view-prompt-button" data-content="${encodeURIComponent(result.content)}">
            View Prompt
          </button>
        </article>
      `).join('');

      searchResults.innerHTML = html;
      searchResults.hidden = false;
    }

    // Handle search form submission
    document.querySelector('.search-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const query = searchInput.value.trim();
      const results = performSearch(query);
      displayResults(results);
    });

    // Handle input changes
    searchInput.addEventListener('input', function() {
      const query = this.value.trim();
      if (query.length < 2) {
        searchResults.hidden = true;
        return;
      }
      const results = performSearch(query);
      displayResults(results);
    });

    // Add markdown display functionality
    const markdownModal = document.getElementById('markdown-modal');
    const markdownDisplay = document.getElementById('markdown-display');
    const closeButton = document.querySelector('.close-button');

    // Handle view prompt button clicks
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('view-prompt-button')) {
        const content = decodeURIComponent(e.target.dataset.content);
        markdownDisplay.innerHTML = marked.parse(content);
        markdownModal.style.display = 'block';
        document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
      }
    });

    // Handle modal close
    closeButton.addEventListener('click', function() {
      markdownModal.style.display = 'none';
      document.body.style.overflow = ''; // Restore scrolling
    });

    // Close modal when clicking outside
    markdownModal.addEventListener('click', function(e) {
      if (e.target === markdownModal) {
        markdownModal.style.display = 'none';
        document.body.style.overflow = ''; // Restore scrolling
      }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && markdownModal.style.display === 'block') {
        markdownModal.style.display = 'none';
        document.body.style.overflow = ''; // Restore scrolling
      }
    });
  });
</script>

<style>
  .search-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
  }

  .search-form {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .search-input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 0.375rem;
    font-size: 1rem;
  }

  .search-input:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
  }

  .search-button {
    padding: 0.75rem 1.5rem;
    background-color: #4299e1;
    color: white;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .search-button:hover {
    background-color: #3182ce;
  }

  .search-icon {
    fill: currentColor;
  }

  .search-results {
    background-color: white;
    border-radius: 0.375rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 1rem;
  }

  .search-result {
    padding: 1rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .search-result:last-child {
    border-bottom: none;
  }

  .search-result h3 {
    margin: 0 0 0.5rem;
    font-size: 1.25rem;
  }

  .search-result h3 a {
    color: #2d3748;
    text-decoration: none;
  }

  .search-result h3 a:hover {
    color: #4299e1;
  }

  .result-description {
    margin: 0 0 0.5rem;
    color: #4a5568;
  }

  .result-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
    color: #718096;
  }

  .no-results {
    text-align: center;
    color: #718096;
    padding: 2rem;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .view-prompt-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    color: #4a5568;
    cursor: pointer;
    transition: all 0.2s;
  }

  .view-prompt-button:hover {
    background-color: #edf2f7;
    border-color: #cbd5e0;
  }

  .markdown-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }

  .markdown-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    padding: 2rem;
    border-radius: 0.5rem;
    max-width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    width: 800px;
  }

  .markdown-body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    line-height: 1.6;
    color: #2d3748;
  }

  .markdown-body h1,
  .markdown-body h2,
  .markdown-body h3,
  .markdown-body h4,
  .markdown-body h5,
  .markdown-body h6 {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    font-weight: 600;
    line-height: 1.25;
  }

  .markdown-body p {
    margin-top: 0;
    margin-bottom: 1em;
  }

  .markdown-body pre {
    background-color: #f7fafc;
    padding: 1rem;
    border-radius: 0.375rem;
    overflow-x: auto;
    margin: 1em 0;
  }

  .markdown-body code {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    background-color: #f7fafc;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }

  .markdown-body pre code {
    padding: 0;
    background-color: transparent;
    border-radius: 0;
  }

  .markdown-body ul,
  .markdown-body ol {
    padding-left: 2em;
    margin-top: 0;
    margin-bottom: 1em;
  }

  .markdown-body li {
    margin-top: 0.25em;
  }

  .markdown-body blockquote {
    margin: 0 0 1em;
    padding: 0 1em;
    color: #6a737d;
    border-left: 0.25em solid #dfe2e5;
  }

  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #718096;
  }

  .close-button:hover {
    color: #2d3748;
  }
</style> 