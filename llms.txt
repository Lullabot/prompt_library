# Project: llmstxt

## Project Structure
This file contains the compressed and processed contents of the project.

### File Types
The following file types are included:
- .py
- .js
- .html
- .css
- .java
- .c
- .cpp
- .h
- .hpp
- .sh
- .txt
- .md
- .json
- .xml
- .yaml
- .yml
- .toml
- .ini

### Special Files
<file>README.md</file>
<metadata>
path: README.md
size: 5282 bytes
</metadata>

# Prompt Library

A collection of AI prompts, rules (guidelines for development environments), project configurations, and workflow states across different disciplines. Built with 11ty and hosted on GitHub Pages.

![Screenshot of the Prompt Library showing the Development AI Prompts page](assets/images/prompt_library.png)

## Features

- Clean, modern design
- Responsive layout
- Easy navigation
- Search functionality
- Content categorization by discipline
- Markdown support

## Getting Started

### Prerequisites

- Node.js (v16 or higher)
- npm or yarn
- Git

### Installation

1. Clone the repository
```bash
git clone https://github.com/yourusername/prompt-library.git
cd prompt-library
```

2. Install dependencies
```bash
npm install
```

3. Start the development server
```bash
npm start
```

4. Build for production
```bash
npm run build
```

## Project Structure

```
├── _data/              # Global data files
├── _includes/          # Includes and partials
├── _layouts/           # Page templates
│   ├── base.njk        # Base layout
│   ├── discipline.njk  # Discipline-specific layout
│   └── content-type.njk # Content type layout
├── assets/             # Static assets
│   ├── css/           # Stylesheets
│   ├── js/            # JavaScript files
│   └── images/        # Image assets
├── development/        # Development discipline content
│   ├── prompts/       # Development prompts
│   ├── rules/  # Development rules
│   ├── project-configs/ # Development project configs
│   └── workflow-states/ # Development workflow states
├── project-management/ # Project Management discipline content
│   ├── prompts/
│   ├── rules/
│   ├── project-configs/
│   └── workflow-states/
├── sales-marketing/    # Sales & Marketing discipline content
│   ├── prompts/
│   ├── rules/
│   ├── project-configs/
│   └── workflow-states/
├── content-strategy/   # Content Strategy discipline content
│   ├── prompts/
│   ├── rules/
│   ├── project-configs/
│   └── workflow-states/
├── design/            # Design discipline content
│   ├── prompts/
│   ├── rules/
│   ├── project-configs/
│   └── workflow-states/
├── quality-assurance/        # Quality Assurance discipline content
│   ├── prompts/        # Quality Assurance prompts and checklists
│   ├── rules/   # Quality Assurance-specific rules and guidelines for maintaining consistency
│   ├── project-configs/ # Quality Assurance tool or process configurations
│   └── workflow-states/ # Quality Assurance workflow documentation
├── .github/           # GitHub configuration
│   └── workflows/     # GitHub Actions workflows
├── .eleventy.js       # 11ty configuration
├── .gitignore
├── package.json
└── README.md
```

## Content Organization

The library is organized by disciplines and content types:

### Disciplines
- Development
- Project Management
- Sales & Marketing
- Content Strategy
- Design
- Quality Assurance

### Content Types
- Prompts: AI prompts for various use cases
- Rules: Guidelines for development environments
- Project Configs: Project configuration templates
- Workflow States: Process and workflow documentation

Each discipline contains all content types, allowing for specialized content within each field.

## Contributing

Content suggestions can also be submitted programmatically via GitHub Actions. This involves sending a `repository_dispatch` event with the type `slack-prompt-submission` to the GitHub API endpoint for this repository (`/repos/Lullabot/prompt_library/dispatches`). The event's `client_payload` must include the content, necessary metadata (author, invoker, permalink), and a pre-configured shared secret for validation. Successful dispatch triggers a workflow that creates a GitHub issue with the submitted content for review. See the workflow file `.github/workflows/slack_submit.yml` and the associated pull request (#40) for payload details and setup instructions.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

- [Submit a Prompt](https://github.com/Lullabot/prompt_library/issues/new?template=prompt-submission.yml) - Share AI prompts for various use cases
- [Submit a Rule](https://github.com/Lullabot/prompt_library/issues/new?template=rule-submission.yml) - Contribute guidelines for development environments
- [Submit a Project Config](https://github.com/Lullabot/prompt_library/issues/new?template=project-config-submission.yml) - Share project configuration templates
- [Submit a Workflow State](https://github.com/Lullabot/prompt_library/issues/new?template=workflow-state-submission.yml) - Contribute process and workflow documentation

## License

This project is licensed under the ISC License.

## Acknowledgments

- [11ty](https://www.11ty.dev/)
- [GitHub Pages](https://pages.github.com/) 

<file>workflow_state.md</file>
<metadata>
path: workflow_state.md
type: md
size: 4087 bytes
</metadata>

<markdown>
# Workflow State Documentation

## Current State
- **Project Status**: Content Organization Phase
- **Last Updated**: 2024-03-20
- **Current Version**: 0.2.0

### Completed Tasks
- [x] Created project configuration documentation
- [x] Established project structure
- [x] Defined content organization by disciplines
- [x] Set up GitHub Pages deployment workflow
- [x] Created base layout template
- [x] Created discipline layout template
- [x] Created content type layout template
- [x] Implemented consistent styling across pages
- [x] Set up development discipline content
- [x] Created example prompts and rules
- [x] Added search functionality
- [x] Updated documentation

### In Progress
- [ ] Creating content for other disciplines
- [ ] Enhancing search capabilities
- [ ] Implementing content filtering
- [ ] Adding content creation guidelines

### Pending Tasks
- [ ] Content for Project Management discipline
- [ ] Content for Sales & Marketing discipline
- [ ] Content for Content Strategy discipline
- [ ] Content for Design discipline
- [ ] Testing framework setup
- [ ] Analytics integration
- [ ] User contribution workflow

## Development Plan

### Phase 1: Foundation (Completed)
- [x] Initialize 11ty project
- [x] Set up basic templates
- [x] Configure GitHub Pages
- [x] Create initial content structure
- [x] Test deployment workflow
- [x] Implement base styling

### Phase 2: Content Organization (Current)
- [x] Implement discipline-based structure
- [x] Create content type templates
- [x] Set up development discipline content
- [x] Implement consistent styling
- [ ] Create content guidelines
- [ ] Add content validation

### Phase 3: Enhancement
- [ ] Implement advanced search features
- [ ] Add discipline-specific filters
- [ ] Create user contribution workflow
- [ ] Add content categorization
- [ ] Implement content relationships
- [ ] Add content versioning

### Phase 4: Polish
- [ ] Optimize performance
- [ ] Enhance accessibility
- [ ] Complete documentation
- [ ] Add analytics
- [ ] Final testing and review

## Rules and Guidelines

### Development Rules
1. All changes must be made in feature branches
2. Each feature branch must have corresponding tests
3. Pull requests require at least one review
4. Documentation must be updated with any changes
5. Follow semantic versioning for releases

### Content Rules
1. Content must be organized by discipline
2. Each discipline follows the same content types
3. All content must include proper frontmatter
4. Content must be properly categorized with tags
5. Regular content audits required

### Deployment Rules
1. All deployments must pass tests
2. Production deployments only from main branch
3. Regular backups of content required
4. Monitor performance metrics
5. Document all deployment changes

## Change Log

### 2024-03-20
- Reorganized content by disciplines
- Created discipline and content type layouts
- Implemented consistent styling
- Added development discipline content
- Updated project documentation

### Upcoming Changes
- Add content for remaining disciplines
- Enhance search functionality
- Implement content filtering
- Add content creation guidelines

## Performance Metrics
- **Build Time**: < 1s
- **Page Load Time**: < 2s
- **Search Response Time**: < 500ms
- **Content Count**: 8 items

## Issues and Resolutions

### Current Issues
1. Need to populate content for other disciplines
2. Search functionality needs enhancement
3. Content filtering not yet implemented

### Resolved Issues
1. Content organization structure implemented
2. Template hierarchy established
3. Consistent styling achieved
4. Development content migration completed

## Notes and Observations
- Discipline-based organization provides better content structure
- Content type templates ensure consistency
- Development discipline serves as a model for other disciplines
- Regular documentation updates essential

## Next Steps
1. Create content for remaining disciplines
2. Enhance search functionality
3. Implement content filtering
4. Add content creation guidelines
5. Set up testing framework 
</markdown>

<file>renovate.json</file>
<metadata>
path: renovate.json
type: json
size: 114 bytes
</metadata>

<content type='json'>
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ]
}

</content>

<file>package-lock.json</file>
<metadata>
path: package-lock.json
type: json
size: 59296 bytes
</metadata>

<content type='json'>
{
  "name": "prompt_library",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "prompt_library",
      "version": "1.0.0",
      "license": "ISC",
      "devDependencies": {
        "@11ty/eleventy": "^3.0.0"
      }
    },
    "node_modules/@11ty/dependency-tree": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@11ty/dependency-tree/-/dependency-tree-4.0.0.tgz",
      "integrity": "sha512-PTOnwM8Xt+GdJmwRKg4pZ8EKAgGoK7pedZBfNSOChXu8MYk2FdEsxdJYecX4t62owpGw3xK60q9TQv/5JI59jw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@11ty/eleventy-utils": "^2.0.1"
      }
    },
    "node_modules/@11ty/dependency-tree-esm": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@11ty/dependency-tree-esm/-/dependency-tree-esm-2.0.0.tgz",
      "integrity": "sha512-+4ySOON4aEAiyAGuH6XQJtxpGSpo6nibfG01krgix00sqjhman2+UaDUopq6Ksv8/jBB3hqkhsHe3fDE4z8rbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@11ty/eleventy-utils": "^2.0.1",
        "acorn": "^8.14.0",
        "dependency-graph": "^1.0.0",
        "normalize-path": "^3.0.0"
      }
    },
    "node_modules/@11ty/eleventy": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@11ty/eleventy/-/eleventy-3.1.1.tgz",
      "integrity": "sha512-nsMCW44WSYzpi6JSQ1ar/wlotj/2cxuP4AABX5Dxqwol3IQ3SkEMgcAugP1t1mthv5I0kIB9lql1Jv/lhUHIkg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@11ty/dependency-tree": "^4.0.0",
        "@11ty/dependency-tree-esm": "^2.0.0",
        "@11ty/eleventy-dev-server": "^2.0.8",
        "@11ty/eleventy-plugin-bundle": "^3.0.6",
        "@11ty/eleventy-utils": "^2.0.7",
        "@11ty/lodash-custom": "^4.17.21",
        "@11ty/posthtml-urls": "^1.0.1",
        "@11ty/recursive-copy": "^4.0.1",
        "@sindresorhus/slugify": "^2.2.1",
        "bcp-47-normalize": "^2.3.0",
        "chokidar": "^3.6.0",
        "debug": "^4.4.1",
        "dependency-graph": "^1.0.0",
        "entities": "^6.0.0",
        "filesize": "^10.1.6",
        "gray-matter": "^4.0.3",
        "iso-639-1": "^3.1.5",
        "js-yaml": "^4.1.0",
        "kleur": "^4.1.5",
        "liquidjs": "^10.21.1",
        "luxon": "^3.6.1",
        "markdown-it": "^14.1.0",
        "minimist": "^1.2.8",
        "moo": "^0.5.2",
        "node-retrieve-globals": "^6.0.1",
        "nunjucks": "^3.2.4",
        "picomatch": "^4.0.2",
        "please-upgrade-node": "^3.2.0",
        "posthtml": "^0.16.6",
        "posthtml-match-helper": "^2.0.3",
        "semver": "^7.7.2",
        "slugify": "^1.6.6",
        "tinyglobby": "^0.2.14"
      },
      "bin": {
        "eleventy": "cmd.cjs"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/11ty"
      }
    },
    "node_modules/@11ty/eleventy-dev-server": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/@11ty/eleventy-dev-server/-/eleventy-dev-server-2.0.8.tgz",
      "integrity": "sha512-15oC5M1DQlCaOMUq4limKRYmWiGecDaGwryr7fTE/oM9Ix8siqMvWi+I8VjsfrGr+iViDvWcH/TVI6D12d93mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@11ty/eleventy-utils": "^2.0.1",
        "chokidar": "^3.6.0",
        "debug": "^4.4.0",
        "finalhandler": "^1.3.1",
        "mime": "^3.0.0",
        "minimist": "^1.2.8",
        "morphdom": "^2.7.4",
        "please-upgrade-node": "^3.2.0",
        "send": "^1.1.0",
        "ssri": "^11.0.0",
        "urlpattern-polyfill": "^10.0.0",
        "ws": "^8.18.1"
      },
      "bin": {
        "eleventy-dev-server": "cmd.js"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/11ty"
      }
    },
    "node_modules/@11ty/eleventy-plugin-bundle": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/@11ty/eleventy-plugin-bundle/-/eleventy-plugin-bundle-3.0.6.tgz",
      "integrity": "sha512-wlEIMa1SEe6HE6ZyREEnPQiTw72337a2MPkyn0D1IzrqHrKU9euB17mv27LnnnyKvMJamCCqtU0985F5yyDL8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@11ty/eleventy-utils": "^2.0.2",
        "debug": "^4.4.0",
        "posthtml-match-helper": "^2.0.3"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/11ty"
      }
    },
    "node_modules/@11ty/eleventy-utils": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@11ty/eleventy-utils/-/eleventy-utils-2.0.7.tgz",
      "integrity": "sha512-6QE+duqSQ0GY9rENXYb4iPR4AYGdrFpqnmi59tFp9VrleOl0QSh8VlBr2yd6dlhkdtj7904poZW5PvGr9cMiJQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/11ty"
      }
    },
    "node_modules/@11ty/eleventy/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/@11ty/lodash-custom": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/@11ty/lodash-custom/-/lodash-custom-4.17.21.tgz",
      "integrity": "sha512-Mqt6im1xpb1Ykn3nbcCovWXK3ggywRJa+IXIdoz4wIIK+cvozADH63lexcuPpGS/gJ6/m2JxyyXDyupkMr5DHw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/11ty"
      }
    },
    "node_modules/@11ty/posthtml-urls": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@11ty/posthtml-urls/-/posthtml-urls-1.0.1.tgz",
      "integrity": "sha512-6EFN/yYSxC/OzYXpq4gXDyDMlX/W+2MgCvvoxf11X1z76bqkqFJ8eep5RiBWfGT5j0323a1pwpelcJJdR46MCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "evaluate-value": "^2.0.0",
        "http-equiv-refresh": "^2.0.1",
        "list-to-array": "^1.1.0",
        "parse-srcset": "^1.0.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@11ty/recursive-copy": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@11ty/recursive-copy/-/recursive-copy-4.0.1.tgz",
      "integrity": "sha512-Zsg1xgfdVTMKNPj9o4FZeYa73dFZRX856CL4LsmqPMvDr0TuIK4cH9CVWJyf0OkNmM8GmlibGX18fF0B75Rn1w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "errno": "^1.0.0",
        "junk": "^3.1.0",
        "maximatch": "^0.1.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@sindresorhus/slugify": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@sindresorhus/slugify/-/slugify-2.2.1.tgz",
      "integrity": "sha512-MkngSCRZ8JdSOCHRaYd+D01XhvU3Hjy6MGl06zhOk614hp9EOAp5gIkBeQg7wtmxpitU6eAL4kdiRMcJa2dlrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sindresorhus/transliterate": "^1.0.0",
        "escape-string-regexp": "^5.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@sindresorhus/transliterate": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/transliterate/-/transliterate-1.6.0.tgz",
      "integrity": "sha512-doH1gimEu3A46VX6aVxpHTeHrytJAG6HgdxntYnCFiIFHEM/ZGpG8KiZGBChchjQmG0XFIBL552kBTjVcMZXwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^5.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/a-sync-waterfall": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/a-sync-waterfall/-/a-sync-waterfall-1.0.1.tgz",
      "integrity": "sha512-RYTOHHdWipFUliRFMCS4X2Yn2X8M87V/OpSqWzKKOGhzqyUxzyVmhHDH9sAvG+ZuQf/TAOFsLCpMw09I1ufUnA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/acorn": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-differ": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/array-differ/-/array-differ-1.0.0.tgz",
      "integrity": "sha512-LeZY+DZDRnvP7eMuQ6LHfCzUGxAAIViUBliK24P3hWXL6y4SortgR6Nim6xrkfSLlmH0+k+9NYNwVC2s53ZrYQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/array-union": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz",
      "integrity": "sha512-Dxr6QJj/RdU/hCaBjOfxW+q6lyuVE6JFWIrAUpuOOhoJJoQ99cUn3igRaHVB5P9WrgFVN0FfArM3x0cueOU8ng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-uniq": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/array-uniq": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz",
      "integrity": "sha512-MNha4BWQ6JbwhFhj03YK552f7cb3AzoE8SzeljgChvL1dl3IcvggXVz1DilzySZkCja+CXuZbdW7yATchWn8/Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/arrify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
      "integrity": "sha512-3CYzex9M9FGQjCGMGyi6/31c8GJbgb0qGyrx5HWxPd0aCwh4cB2YjMb2Xf9UuoogrMrlO9cTqnB5rI5GHZTcUA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/bcp-47": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/bcp-47/-/bcp-47-2.1.0.tgz",
      "integrity": "sha512-9IIS3UPrvIa1Ej+lVDdDwO7zLehjqsaByECw0bu2RRGP73jALm6FYbzI5gWbgHLvNdkvfXB5YrSbocZdOS0c0w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-alphabetical": "^2.0.0",
        "is-alphanumerical": "^2.0.0",
        "is-decimal": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/bcp-47-match": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/bcp-47-match/-/bcp-47-match-2.0.3.tgz",
      "integrity": "sha512-JtTezzbAibu8G0R9op9zb3vcWZd9JF6M0xOYGPn0fNCd7wOpRB1mU2mH9T8gaBGbAAyIIVgB2G7xG0GP98zMAQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/bcp-47-normalize": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/bcp-47-normalize/-/bcp-47-normalize-2.3.0.tgz",
      "integrity": "sha512-8I/wfzqQvttUFz7HVJgIZ7+dj3vUaIyIxYXaTRP1YWoSDfzt6TUmxaKZeuXR62qBmYr+nvuWINFRl6pZ5DlN4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bcp-47": "^2.0.0",
        "bcp-47-match": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/commander": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-10.0.1.tgz",
      "integrity": "sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/dependency-graph": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/dependency-graph/-/dependency-graph-1.0.0.tgz",
      "integrity": "sha512-cW3gggJ28HZ/LExwxP2B++aiKxhJXMSIt9K48FOXQkm+vuG5gyatXnLsONRJdzO/7VfjDIiaOOa/bs4l464Lwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/dom-serializer": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
      "integrity": "sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.0",
        "entities": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/dom-serializer/node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/domelementtype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "BSD-2-Clause"
    },
    "node_modules/domhandler": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-4.3.1.tgz",
      "integrity": "sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "domelementtype": "^2.2.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/domutils": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-2.8.0.tgz",
      "integrity": "sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "^1.0.1",
        "domelementtype": "^2.2.0",
        "domhandler": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/entities": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.0.tgz",
      "integrity": "sha512-aKstq2TDOndCn4diEyp9Uq/Flu2i1GlLkc6XIDQSDMuaFE3OPW5OphLCyQ5SpSJZTb4reN+kTcYru5yIfXoRPw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/errno": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/errno/-/errno-1.0.0.tgz",
      "integrity": "sha512-3zV5mFS1E8/1bPxt/B0xxzI1snsg3uSCIh6Zo1qKg6iMw93hzPANk9oBFzSFBFrwuVoQuE3rLoouAUfwOAj1wQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prr": "~1.0.1"
      },
      "bin": {
        "errno": "cli.js"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/esm-import-transformer": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/esm-import-transformer/-/esm-import-transformer-3.0.3.tgz",
      "integrity": "sha512-Wj9kBIA9vKZRYAQzhe229M7wmWb2f3vTu86CkszZUy2/iiVCYljXm/EkwJtWKc0vup30WHhxbm3rpkysBKczxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.2"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/evaluate-value": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/evaluate-value/-/evaluate-value-2.0.0.tgz",
      "integrity": "sha512-VonfiuDJc0z4sOO7W0Pd130VLsXN6vmBWZlrog1mCb/o7o/Nl5Lr25+Kj/nkCCAhG+zqeeGjxhkK9oHpkgTHhQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/extend-shallow": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
      "integrity": "sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extendable": "^0.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/filesize": {
      "version": "10.1.6",
      "resolved": "https://registry.npmjs.org/filesize/-/filesize-10.1.6.tgz",
      "integrity": "sha512-sJslQKU2uM33qH5nqewAwVB2QgR6w1aMNsYUp3aN5rMRyXEwJGmZvaWzeJFNTOXWlHQyBFCWrdj3fV/fsTOX8w==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 10.4.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fresh": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
      "integrity": "sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gray-matter": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/gray-matter/-/gray-matter-4.0.3.tgz",
      "integrity": "sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-yaml": "^3.13.1",
        "kind-of": "^6.0.2",
        "section-matter": "^1.0.0",
        "strip-bom-string": "^1.0.0"
      },
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/gray-matter/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/gray-matter/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/htmlparser2": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-7.2.0.tgz",
      "integrity": "sha512-H7MImA4MS6cw7nbyURtLPO1Tms7C5H602LRETv95z1MxO/7CP7rDVROehUYeYBUYEON94NXXDEPmZuq+hX4sog==",
      "dev": true,
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.2",
        "domutils": "^2.8.0",
        "entities": "^3.0.1"
      }
    },
    "node_modules/htmlparser2/node_modules/entities": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/entities/-/entities-3.0.1.tgz",
      "integrity": "sha512-WiyBqoomrwMdFG1e0kqvASYfnlb0lp8M5o5Fw2OFq1hNZxxcNk8Ik0Xm7LxzBhuidnZB/UtBqVCgUz3kBOP51Q==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/http-equiv-refresh": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/http-equiv-refresh/-/http-equiv-refresh-2.0.1.tgz",
      "integrity": "sha512-XJpDL/MLkV3dKwLzHwr2dY05dYNfBNlyPu4STQ8WvKCFdc6vC5tPXuq28of663+gHVg03C+16pHHs/+FmmDjcw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/is-alphabetical": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-alphabetical/-/is-alphabetical-2.0.1.tgz",
      "integrity": "sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-alphanumerical": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-alphanumerical/-/is-alphanumerical-2.0.1.tgz",
      "integrity": "sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-alphabetical": "^2.0.0",
        "is-decimal": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-decimal": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-decimal/-/is-decimal-2.0.1.tgz",
      "integrity": "sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-extendable": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
      "integrity": "sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-json": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-json/-/is-json-2.0.1.tgz",
      "integrity": "sha512-6BEnpVn1rcf3ngfmViLM6vjUjGErbdrL4rwlv+u1NO1XO8kqT4YGL8+19Q+Z/bas8tY90BTWMk2+fW1g6hQjbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/iso-639-1": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/iso-639-1/-/iso-639-1-3.1.5.tgz",
      "integrity": "sha512-gXkz5+KN7HrG0Q5UGqSMO2qB9AsbEeyLP54kF1YrMsIxmu+g4BdB7rflReZTSTZGpfj8wywu6pfPBCylPIzGQA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/junk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/junk/-/junk-3.1.0.tgz",
      "integrity": "sha512-pBxcB3LFc8QVgdggvZWyeys+hnrNWg4OcZIU/1X59k5jQdLBlCsYGRQaz234SqoRLTCgMH00fY0xRJH+F9METQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/kleur": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
      "integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/linkify-it": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-5.0.0.tgz",
      "integrity": "sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "uc.micro": "^2.0.0"
      }
    },
    "node_modules/liquidjs": {
      "version": "10.21.1",
      "resolved": "https://registry.npmjs.org/liquidjs/-/liquidjs-10.21.1.tgz",
      "integrity": "sha512-NZXmCwv3RG5nire3fmIn9HsOyJX3vo+ptp0yaXUHAMzSNBhx74Hm+dAGJvscUA6lNqbLuYfXgNavRQ9UbUJhQQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "commander": "^10.0.0"
      },
      "bin": {
        "liquid": "bin/liquid.js",
        "liquidjs": "bin/liquid.js"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/liquidjs"
      }
    },
    "node_modules/list-to-array": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/list-to-array/-/list-to-array-1.1.0.tgz",
      "integrity": "sha512-+dAZZ2mM+/m+vY9ezfoueVvrgnHIGi5FvgSymbIgJOFwiznWyA59mav95L+Mc6xPtL3s9gm5eNTlNtxJLbNM1g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/luxon": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.6.1.tgz",
      "integrity": "sha512-tJLxrKJhO2ukZ5z0gyjY1zPh3Rh88Ej9P7jNrZiHMUXHae1yvI2imgOZtL1TO8TW6biMMKfTtAOoEJANgtWBMQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/markdown-it": {
      "version": "14.1.0",
      "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-14.1.0.tgz",
      "integrity": "sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1",
        "entities": "^4.4.0",
        "linkify-it": "^5.0.0",
        "mdurl": "^2.0.0",
        "punycode.js": "^2.3.1",
        "uc.micro": "^2.1.0"
      },
      "bin": {
        "markdown-it": "bin/markdown-it.mjs"
      }
    },
    "node_modules/markdown-it/node_modules/entities": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/maximatch": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/maximatch/-/maximatch-0.1.0.tgz",
      "integrity": "sha512-9ORVtDUFk4u/NFfo0vG/ND/z7UQCVZBL539YW0+U1I7H1BkZwizcPx5foFv7LCPcBnm2U6RjFnQOsIvN4/Vm2A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-differ": "^1.0.0",
        "array-union": "^1.0.1",
        "arrify": "^1.0.0",
        "minimatch": "^3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/mdurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-2.0.0.tgz",
      "integrity": "sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mime-db": "^1.54.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/moo": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/moo/-/moo-0.5.2.tgz",
      "integrity": "sha512-iSAJLHYKnX41mKcJKjqvnAN9sf0LMDTXDEvFv+ffuRR9a1MIuXLjMNL6EsnDHSkKLTWNqQQ5uo61P4EbU4NU+Q==",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/morphdom": {
      "version": "2.7.4",
      "resolved": "https://registry.npmjs.org/morphdom/-/morphdom-2.7.4.tgz",
      "integrity": "sha512-ATTbWMgGa+FaMU3FhnFYB6WgulCqwf6opOll4CBzmVDTLvPMmUPrEv8CudmLPK0MESa64+6B89fWOxP3+YIlxQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-retrieve-globals": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/node-retrieve-globals/-/node-retrieve-globals-6.0.1.tgz",
      "integrity": "sha512-j0DeFuZ/Wg3VlklfbxUgZF/mdHMTEiEipBb3q0SpMMbHaV3AVfoUQF8UGxh1s/yjqO0TgRZd4Pi/x2yRqoQ4Eg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.14.1",
        "acorn-walk": "^8.3.4",
        "esm-import-transformer": "^3.0.3"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/nunjucks": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/nunjucks/-/nunjucks-3.2.4.tgz",
      "integrity": "sha512-26XRV6BhkgK0VOxfbU5cQI+ICFUtMLixv1noZn1tGU38kQH5A5nmmbk/O45xdyBhD1esk47nKrY0mvQpZIhRjQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "a-sync-waterfall": "^1.0.0",
        "asap": "^2.0.3",
        "commander": "^5.1.0"
      },
      "bin": {
        "nunjucks-precompile": "bin/precompile"
      },
      "engines": {
        "node": ">= 6.9.0"
      },
      "peerDependencies": {
        "chokidar": "^3.3.0"
      },
      "peerDependenciesMeta": {
        "chokidar": {
          "optional": true
        }
      }
    },
    "node_modules/nunjucks/node_modules/commander": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-5.1.0.tgz",
      "integrity": "sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parse-srcset": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/parse-srcset/-/parse-srcset-1.0.2.tgz",
      "integrity": "sha512-/2qh0lav6CmI15FzA3i/2Bzk2zCgQhGMkvhOhKNcBVQ1ldgpbfiNTVslmooUmWJcADi1f1kIeynbDRVzNlfR6Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/please-upgrade-node": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/please-upgrade-node/-/please-upgrade-node-3.2.0.tgz",
      "integrity": "sha512-gQR3WpIgNIKwBMVLkpMUeR3e1/E1y42bqDQZfql+kDeXd8COYfM8PQA4X6y7a8u9Ua9FHmsrrmirW2vHs45hWg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver-compare": "^1.0.0"
      }
    },
    "node_modules/posthtml": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/posthtml/-/posthtml-0.16.6.tgz",
      "integrity": "sha512-JcEmHlyLK/o0uGAlj65vgg+7LIms0xKXe60lcDOTU7oVX/3LuEuLwrQpW3VJ7de5TaFKiW4kWkaIpJL42FEgxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "posthtml-parser": "^0.11.0",
        "posthtml-render": "^3.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/posthtml-match-helper": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/posthtml-match-helper/-/posthtml-match-helper-2.0.3.tgz",
      "integrity": "sha512-p9oJgTdMF2dyd7WE54QI1LvpBIkNkbSiiECKezNnDVYhGhD1AaOnAkw0Uh0y5TW+OHO8iBdSqnd8Wkpb6iUqmw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "posthtml": "^0.16.6"
      }
    },
    "node_modules/posthtml-parser": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/posthtml-parser/-/posthtml-parser-0.11.0.tgz",
      "integrity": "sha512-QecJtfLekJbWVo/dMAA+OSwY79wpRmbqS5TeXvXSX+f0c6pW4/SE6inzZ2qkU7oAMCPqIDkZDvd/bQsSFUnKyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "htmlparser2": "^7.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/posthtml-render": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/posthtml-render/-/posthtml-render-3.0.0.tgz",
      "integrity": "sha512-z+16RoxK3fUPgwaIgH9NGnK1HKY9XIDpydky5eQGgAFVXTCSezalv9U2jQuNV+Z9qV1fDWNzldcw4eK0SSbqKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-json": "^2.0.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/prr": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/prr/-/prr-1.0.1.tgz",
      "integrity": "sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/punycode.js": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode.js/-/punycode.js-2.3.1.tgz",
      "integrity": "sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/section-matter": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/section-matter/-/section-matter-1.0.0.tgz",
      "integrity": "sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "extend-shallow": "^2.0.1",
        "kind-of": "^6.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver-compare": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
      "integrity": "sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/send": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.5",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "mime-types": "^3.0.1",
        "ms": "^2.1.3",
        "on-finished": "^2.4.1",
        "range-parser": "^1.2.1",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/slugify": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/slugify/-/slugify-1.6.6.tgz",
      "integrity": "sha512-h+z7HKHYXj6wJU+AnS/+IH8Uh9fdcX1Lrhg1/VMdf9PwoBQXFcXiAdsy2tSK0P6gKwJLXp02r90ahUCqHk9rrw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/ssri": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/ssri/-/ssri-11.0.0.tgz",
      "integrity": "sha512-aZpUoMN/Jj2MqA4vMCeiKGnc/8SuSyHbGSBdgFbZxP8OJGF/lFkIuElzPxsN0q8TQQ+prw3P4EDfB3TBHHgfXw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^7.0.3"
      },
      "engines": {
        "node": "^16.14.0 || >=18.0.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/strip-bom-string": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom-string/-/strip-bom-string-1.0.0.tgz",
      "integrity": "sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.4.4",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/uc.micro": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-2.1.0.tgz",
      "integrity": "sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/urlpattern-polyfill": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/urlpattern-polyfill/-/urlpattern-polyfill-10.0.0.tgz",
      "integrity": "sha512-H/A06tKD7sS1O1X2SshBVeA5FLycRpjqiBeqGKmBwBDBy28EnRjORxTNe269KSSr5un5qyWi1iL61wLxpd+ZOg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-RKW2aJZMXeMxVpnZ6bck+RswznaxmzdULiBr6KY7XkTnW8uvt0iT9H5DkHUChXrc+uurzwa0rVI16n/Xzjdz1w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}

</content>

<file>package.json</file>
<metadata>
path: package.json
type: json
size: 492 bytes
</metadata>

<content type='json'>
{
  "name": "prompt_library",
  "version": "1.0.0",
  "description": "A collection of AI prompts, rules, project configurations, and workflow states",
  "main": "index.js",
  "scripts": {
    "start": "eleventy --serve",
    "build": "eleventy",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "ai",
    "prompts",
    "cursor",
    "workflow",
    "11ty"
  ],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@11ty/eleventy": "^3.0.0"
  }
}

</content>

<file>project_config.md</file>
<metadata>
path: project_config.md
type: md
size: 8333 bytes
</metadata>

<markdown>
# 11ty Prompt Library Project Configuration

## Project Overview
This project is a static site built with 11ty that organizes and presents AI prompts, rules, project configurations, and workflow state examples across different disciplines. The site is hosted on GitHub Pages and features a clean, modern design with discipline-based content organization.

## Prerequisites
- Node.js (v16 or higher)
- npm or yarn
- Git
- GitHub account

## Initial Setup

1. **Create a new GitHub repository**
   ```bash
   # Initialize a new repository
   git init
   git add .
   git commit -m "Initial commit"
   git branch -M main
   git remote add origin <your-repo-url>
   git push -u origin main
   ```

2. **Initialize 11ty project**
   ```bash
   # Create package.json
   npm init -y

   # Install 11ty and other dependencies
   npm install --save-dev @11ty/eleventy
   ```

3. **Project Structure**
   ```
   ├── _data/              # Global data files
   ├── _includes/          # Includes and partials
   ├── _layouts/           # Page templates
   │   ├── base.njk        # Base layout
   │   ├── discipline.njk  # Discipline-specific layout
   │   └── content-type.njk # Content type layout
   ├── assets/             # Static assets
   │   ├── css/           # Stylesheets
   │   ├── js/            # JavaScript files
   │   └── images/        # Image assets
   ├── development/        # Development discipline content
   │   ├── prompts/       # Development prompts
   │   ├── rules/  # Development rules
   │   ├── project-configs/ # Development project configs
   │   └── workflow-states/ # Development workflow states
   ├── project-management/ # Project Management discipline
   ├── sales-marketing/    # Sales & Marketing discipline
   ├── content-strategy/   # Content Strategy discipline
   ├── design/            # Design discipline
   ├── .github/workflows/  # GitHub Actions workflows
   ├── .eleventy.js       # 11ty configuration
   ├── package.json
   └── README.md
   ```

## Configuration Files

### .eleventy.js
```javascript
const fs = require('fs');
const path = require('path');

module.exports = function(eleventyConfig) {
  // Copy static assets
  eleventyConfig.addPassthroughCopy("assets");

  // Add date filter with format support
  eleventyConfig.addFilter("date", function(date, format = "yyyy-MM-dd") {
    if (date === "now") {
      date = new Date();
    } else if (!(date instanceof Date)) {
      date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
      return "";
    }

    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');

    switch (format) {
      case "yyyy":
        return year.toString();
      default:
        return `${year}-${month}-${day}`;
    }
  });

  // Add discipline filter
  eleventyConfig.addFilter("filterByDiscipline", function(collection, discipline) {
    if (!collection) return [];
    return collection.filter(item => item.data.discipline === discipline);
  });

  // Add collections for content types
  const disciplines = ['development', 'project-management', 'sales-marketing', 'content-strategy', 'design'];
  const contentTypes = ['prompts', 'rules', 'project-configs', 'workflow-states'];

  contentTypes.forEach(type => {
    eleventyConfig.addCollection(type, function(collection) {
      return collection.getFilteredByGlob(
        disciplines.map(discipline => `${discipline}/${type}/**/*.md`)
      );
    });
  });

  // Add base URL for GitHub Pages
  eleventyConfig.addGlobalData("baseUrl", process.env.GITHUB_ACTIONS ? "/prompt_library" : "");

  return {
    dir: {
      input: ".",
      output: "_site",
      includes: "_includes",
      layouts: "_layouts",
      data: "_data"
    },
    templateFormats: ["md", "njk", "html"],
    markdownTemplateEngine: "njk",
    htmlTemplateEngine: "njk",
    dataTemplateEngine: "njk",
    pathPrefix: process.env.GITHUB_ACTIONS ? "/prompt_library/" : "/"
  };
};
```

### package.json Scripts
```json
{
  "scripts": {
    "start": "eleventy --serve",
    "build": "eleventy",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}
```

## Content Structure

### Discipline Organization
Each discipline follows the same content type structure:
```markdown
---
title: "Content Title"
description: "Brief description"
category: "Category"
tags: ["tag1", "tag2"]
date: "2024-03-20"
discipline: "development"
---

Content goes here...
```

### Layout Templates

#### base.njk
Base template with common elements:
```njk
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }} - Prompt Library</title>
    <link rel="stylesheet" href="{{ baseUrl }}/assets/css/styles.css">
</head>
<body>
    <header>
        <nav>
            <a href="{{ baseUrl }}/">Home</a>
            <a href="{{ baseUrl }}/prompts">Prompts</a>
            <a href="{{ baseUrl }}/rules">Rules</a>
            <a href="{{ baseUrl }}/project-configs">Project Configs</a>
            <a href="{{ baseUrl }}/workflow-states">Workflow States</a>
        </nav>
    </header>

    <main>
        {{ content | safe }}
    </main>

    <footer>
        <p>&copy; {{ "now" | date("yyyy") }} Prompt Library</p>
    </footer>
</body>
</html>
```

#### discipline.njk
Template for discipline-specific pages:
```njk
---
layout: base.njk
---

<nav class="discipline-nav">
    <a href="{{ baseUrl }}/{{ discipline }}/prompts">Prompts</a>
    <a href="{{ baseUrl }}/{{ discipline }}/rules">Rules</a>
    <a href="{{ baseUrl }}/{{ discipline }}/project-configs">Project Configs</a>
    <a href="{{ baseUrl }}/{{ discipline }}/workflow-states">Workflow States</a>
</nav>

{{ content | safe }}
```

#### content-type.njk
Template for content type pages:
```njk
---
layout: discipline.njk
---

<div class="content-type-header">
    <h1>{{ title }}</h1>
    <p class="description">{{ description }}</p>
</div>

<div class="content-list">
    {% for item in collections[contentType] | filterByDiscipline(discipline) %}
        <article class="content-item">
            <h2><a href="{{ item.url }}">{{ item.data.title }}</a></h2>
            <p>{{ item.data.description }}</p>
            <div class="metadata">
                <span class="date">{{ item.date | date("yyyy-MM-dd") }}</span>
                {% if item.data.tags %}
                    <div class="tags">
                        {% for tag in item.data.tags %}
                            <span class="tag">{{ tag }}</span>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
        </article>
    {% endfor %}
</div>
```

## GitHub Pages Setup

### .github/workflows/deploy.yml
```yaml
name: Deploy to GitHub Pages
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
```

## Development Workflow

1. **Create content in appropriate discipline directory**
   ```bash
   # Example: Creating a new prompt in the development discipline
   mkdir -p development/prompts/new-prompt
   touch development/prompts/new-prompt/index.md
   ```

2. **Test locally**
   ```bash
   npm start
   ```

3. **Build for production**
   ```bash
   npm run build
   ```

4. **Commit and push changes**
   ```bash
   git add .
   git commit -m "Add new content"
   git push origin main
   ```

## Maintenance

- Keep content organized within appropriate disciplines
- Regularly update dependencies
- Monitor GitHub Pages deployment status
- Review and update content structure as needed
- Test search functionality after content updates
- Check for broken links and assets
- Maintain consistent styling across all pages 
</markdown>

<file>.eleventy.js</file>
<metadata>
path: .eleventy.js
type: js
size: 5616 bytes
</metadata>

<imports>
const fs = require('fs');
const path = require('path');
  // Add URL filter that includes base URL
      includes: "_includes",
</imports>

<code lang='js'>
const fs = require('fs');
const path = require('path');

module.exports = function(eleventyConfig) {
  
  eleventyConfig.addPassthroughCopy("assets");

  eleventyConfig.addFilter("date", function(date, format = "yyyy-MM-dd") {
    if (date === "now") {
      date = new Date();
    } else if (!(date instanceof Date)) {
      date = new Date(date);
    }

    if (isNaN(date.getTime())) {
      return "";
    }

    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');

    switch (format) {
      case "yyyy":
        return year.toString();
      default:
        return `${year}-${month}-${day}`;
    }
  });

  eleventyConfig.addFilter("filterByDiscipline", function(collection, discipline) {
    if (!collection) return [];
    return collection.filter(item => item.data.discipline === discipline);
  });

  const disciplines = ['development', 'project-management', 'sales-marketing', 'content-strategy', 'design', 'quality-assurance'];
  const contentTypes = ['prompts', 'rules', 'project-configs', 'workflow-states', 'resources'];

  contentTypes.forEach(type => {
    eleventyConfig.addCollection(type, function(collection) {
      return collection.getFilteredByGlob(
        disciplines.map(discipline => `${discipline}/${type}/**/*.md`)
      ).map(item => {
        
        if (process.env.GITHUB_ACTIONS && !item.url.startsWith('/prompt_library')) {
          item.url = `/prompt_library${item.url}`;
        }
        return item;
      });
    });
  });

  eleventyConfig.addCollection("searchIndex", async function(collection) {
    const items = collection.getAll().filter(item => item.template.inputPath.endsWith('.md'));
    const searchIndex = [];

    for (const item of items) {
      const content = await item.template.read();
      const url = process.env.GITHUB_ACTIONS && !item.url.startsWith('/prompt_library') 
        ? `/prompt_library${item.url}` 
        : item.url;
        
      searchIndex.push({
        title: item.data.title || '',
        description: item.data.description || '',
        content: content || '',
        url: url,
        discipline: item.data.discipline || '',
        contentType: item.data.contentType || '',
        tags: item.data.tags || [],
        date: item.data.date || new Date().toISOString()
      });
    }

    const outputPath = path.join(__dirname, '_site', 'search-index.json');
    fs.mkdirSync(path.dirname(outputPath), { recursive: true });
    fs.writeFileSync(outputPath, JSON.stringify(searchIndex));

    return searchIndex;
  });

  const baseUrl = process.env.GITHUB_ACTIONS ? "/prompt_library" : "";
  eleventyConfig.addGlobalData("baseUrl", baseUrl);

  eleventyConfig.addFilter("fullUrl", function(url) {
    if (url.startsWith(baseUrl)) {
      return url;
    }
    return `${baseUrl}${url}`;
  });

  eleventyConfig.addNunjucksFilter("hasContent", function(discipline, contentType) {
    
    const collections = this.ctx.collections;

    const logPrefix = "[HAS_CONTENT_NJK_DEBUG]"; 
    console.log(`${logPrefix} Checking filter for: discipline='${discipline}', contentType='${contentType}'`);

    const collectionName = contentType.toLowerCase().replace(/\s+/g, '-');
    
    if (!collections || !collections[collectionName]) {
      console.log(`${logPrefix} Collection not found for '${collectionName}'. Returning false.`);
      return false;
    }
    
    const collectionItems = collections[collectionName];
    console.log(`${logPrefix} Found collection '${collectionName}' with ${collectionItems.length} items.`);

    const hasContent = collectionItems.some(item => {
      const itemDiscipline = item.data.discipline;
      
      const match = typeof itemDiscipline === 'string' && typeof discipline === 'string' && itemDiscipline.toLowerCase() === discipline.toLowerCase();
      console.log(`${logPrefix} Comparing item discipline '${itemDiscipline}' === filter discipline '${discipline}': ${match}`);
      return match;
    });

    console.log(`${logPrefix} Final result for ${discipline}/${contentType}: ${hasContent}`);
    return hasContent;
  });

  eleventyConfig.addCollection('recentlyAdded', function(collection) {
    const types = ['prompts', 'rules', 'project-configs', 'workflow-states', 'resources'];
    let all = [];
    types.forEach(type => {
      all = all.concat(collection.getFilteredByGlob(
        disciplines.map(discipline => `${discipline}/${type}/**/*.md`)
      ));
    });
    return all.sort((a, b) => new Date(b.date) - new Date(a.date));
  });

  return {
    dir: {
      input: ".",
      output: "_site",
      includes: "_includes",
      layouts: "_layouts",
      data: "_data"
    },
    templateFormats: ["md", "njk", "html"],
    markdownTemplateEngine: "njk",
    htmlTemplateEngine: "njk",
    dataTemplateEngine: "njk",
    pathPrefix: baseUrl
  };
}; 
</code>

<file>.tugboat/config.yml</file>
<metadata>
path: .tugboat/config.yml
type: yml
size: 1101 bytes
</metadata>

<content type='yml'>
# Tugboat configuration for PR preview environments, visual diffs, and Lighthouse audits

services:
  apache:
    image: tugboatqa/httpd:latest
    commands:
      init:
        # Install Node.js 18
        - apt-get update
        - apt-get install -yq ca-certificates curl gnupg
        - mkdir -p /etc/apt/keyrings
        - curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
        - echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
        - apt-get update
        - apt-get install -yq nodejs
        # Set the webroot to the Eleventy output directory (_site)
        - ln -snf "${TUGBOAT_ROOT}/_site" "${DOCROOT}"
      update:
        # Install dependencies
        - npm install
      build:
        # Build the static Gatsby site
        - npm run build

    urls:
      - /
      - /development/prompts/ai-code-review/
      - /project-management/prompts/agile-sprint-planning/
      - /help/
      - /contributing/
</content>

<file>development/workflow-states/development.md</file>
<metadata>
path: development/workflow-states/development.md
type: md
size: 1147 bytes
</metadata>

<markdown>
---
title: "General Development Workflow"
description: "Workflow states and processes for general software development projects."
layout: "markdown.njk"
category: "Development"
tags: ["workflow", "development", "process", "best practices"]
date: "2024-03-20"
discipline: "development"
---
```
# Development Workflow State

## Current Status
- **Phase**: Implementation
- **Version**: 0.1.0
- **Last Updated**: 2024-03-20

## Completed Tasks
- [x] Project initialization
- [x] Basic structure setup
- [x] Template creation
- [x] GitHub Pages configuration

## In Progress
- [ ] Content population
- [ ] Search implementation
- [ ] Testing setup
- [ ] Documentation

## Next Steps
1. Add example content
2. Implement search functionality
3. Set up testing framework
4. Complete documentation
5. Deploy to production

## Issues and Resolutions
### Current Issues
1. None reported

### Resolved Issues
1. None yet

## Performance Metrics
- Build Time: Not measured
- Page Load: Not measured
- Search Response: Not implemented

## Notes
- Focus on content structure
- Maintain documentation
- Regular updates required
- Monitor performance metrics 
```
</markdown>

<file>development/workflow-states/drupal-development.md</file>
<metadata>
path: development/workflow-states/drupal-development.md
type: md
size: 1696 bytes
</metadata>

<markdown>
---
title: "Drupal Development Workflow"
description: "Workflow states and processes for Drupal development projects."
layout: "markdown.njk"
category: "Drupal"
tags: ["drupal", "workflow", "development", "process"]
date: "2024-03-20"
discipline: "development"
---
```
# Drupal 11 Development Workflow

## Development States

### 1. Project Setup
- Initialize Composer project
- Configure development environment
- Set up version control
- Configure CI/CD pipeline
- Set up local development tools

### 2. Feature Development
- Create feature branch
- Implement functionality
- Write tests
- Document changes
- Code review process
- Merge to development branch

### 3. Testing
- Run PHPUnit tests
- Execute PHPCS checks
- Perform security scans
- Test accessibility
- Validate performance
- User acceptance testing

### 4. Deployment
- Create release branch
- Update version numbers
- Generate changelog
- Deploy to staging
- Final testing
- Production deployment

### 5. Maintenance
- Security updates
- Performance monitoring
- Bug fixes
- Documentation updates
- Dependency updates
- Backup verification

## Quality Gates

### Code Quality
- PHPCS compliance
- PHPStan analysis
- Test coverage > 80%
- No critical security issues
- Performance benchmarks met

### Documentation
- README updated
- API documentation current
- Change log maintained
- Deployment instructions
- Troubleshooting guide

### Security
- Security updates applied
- Access control verified
- Input validation checked
- Sensitive data protected
- Audit logs maintained

### Performance
- Page load times < 2s
- Cache hit ratio > 90%
- Database queries optimized
- Asset delivery optimized
- Resource usage monitored 
```
</markdown>

<file>development/resources/basic-prompting.md</file>
<metadata>
path: development/resources/basic-prompting.md
type: md
size: 2325 bytes
</metadata>

<markdown>
---
title: "Basic Prompting: Essential Resources for Getting Started"
description: "A curated set of foundational resources for learning how to write effective prompts for AI language models. These links cover best practices, guides, and community-curated prompt collections."
url: "/development/resources/basic-prompting/"
resource_type: "guide list"
skill_level: "Beginner"
discipline: "development"
contentType: "resources"
layout: markdown.njk
date: "2025-05-12"
topics:
  - "prompt engineering"
  - "AI"
  - "best practices"
  - "documentation"
---
## Recommended Resources

- **Prompting Guide**  
  [promptingguide.ai](https://www.promptingguide.ai/)  
  *A comprehensive guide to prompt engineering, including techniques, best practices, and examples for working with large language models.*

- **Tips for Prompting (AuraChat)**  
  [aurachat.io/learn/tips-for-prompting](https://aurachat.io/learn/tips-for-prompting)  
  *Practical tips and best practices for writing effective prompts to get better results from AI chatbots.*

- **Anthropic Claude Prompt Engineering Overview**  
  [docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview)  
  *Official documentation from Anthropic on how to craft effective prompts for Claude, including examples and strategies.*

- **Awesome ChatGPT Prompts**  
  [github.com/f/awesome-chatgpt-prompts](https://github.com/f/awesome-chatgpt-prompts)  
  *A curated list of practical prompt examples for ChatGPT and similar models.*

- **Awesome Prompts (ai-boost)**  
  [github.com/ai-boost/awesome-prompts](https://github.com/ai-boost/awesome-prompts)  
  *Curated list of ChatGPT prompts from the top-rated GPTs in the GPTs Store. Includes advanced prompt engineering papers.*

- **Prompt Engineering Guide (dair-ai)**  
  [github.com/dair-ai/Prompt-Engineering-Guide](https://github.com/dair-ai/Prompt-Engineering-Guide)  
  *Guides, papers, lectures, notebooks, and resources for prompt engineering.*

- **Claude Code for Drupal**  
  [git.drupalcode.org/project/claude_code/-/blob/1.0.x/assets/CLAUDE.md](https://git.drupalcode.org/project/claude_code/-/blob/1.0.x/assets/CLAUDE.md)  
  *Documentation for integrating Claude with Drupal, including prompt examples and usage.* 
</markdown>

<file>development/resources/drupal-and-ddev-links.md</file>
<metadata>
path: development/resources/drupal-and-ddev-links.md
type: md
size: 2732 bytes
</metadata>

<markdown>
---
title: "Drupal and DDEV: Reference Links and Documentation Guidance"
description: "Essential links for Drupal and DDEV development, plus step-by-step instructions and best practices for adding documentation to Cursor AI projects."
url: "/development/resources/drupal-and-ddev-links/"
resource_type: "guide list"
skill_level: "Intermediate"
discipline: "development"
contentType: "resources"
layout: markdown.njk
date: "2025-05-12"
topics:
  - "Drupal"
  - "DDEV"
  - "documentation"
  - "AI agent context"
  - "best practices"
---
# How and Why to Add Docs to Cursor

Adding documentation to Cursor (or similar AI agents) is essential for providing persistent, reusable context that improves the agent's accuracy and usefulness. Well-maintained docs reduce hallucinations, standardize workflows, and encode domain knowledge for both humans and AI.

## How to Add Docs to Cursor

- Open the `@Docs` panel in Cursor and select **Add new doc**.
- Paste the URL of the documentation you want to add. (Tip: Add a trailing slash to the URL to index all subpages and subdirectories.)
- Cursor will crawl, index, and keep your custom doc up to date automatically.
- You can manage your custom docs in **Settings > Features > Docs**—edit, delete, or add new docs as needed.
- Once added, reference your custom docs in chat or prompts using the `@Docs` symbol to bring them into context for the agent.

---

# Drupal and DDEV Reference Links

Essential links for Drupal and DDEV development, useful for both agents and developers.

## Drupal
- **[Drupal - Hooks](https://www.drupal.org/node/3442349):** Overview and usage of hooks in Drupal.
- **[Drupal - Development guide](https://www.drupal.org/docs/develop):** Official Drupal development documentation.
- **[Drupal - Theming](https://www.drupal.org/docs/develop/theming-drupal):** Guide to theming in Drupal.
- **[Drupal - Modules](https://www.drupal.org/docs/develop/creating-modules):** Creating and managing Drupal modules.
- **[Drupal - APIs](https://www.drupal.org/docs/develop/drupal-apis):** Reference for Drupal's APIs.
- **[Drupal - Core modules and theming](https://www.drupal.org/docs/develop/core-modules-and-themes):** Documentation for core modules and themes.

## DDEV
- **[DDEV - Usage](https://ddev.readthedocs.io/en/stable/users/usage/):** How to use DDEV for local development.
- **[DDEV - FAQ](https://ddev.readthedocs.io/en/stable/users/usage/faq/):** Frequently asked questions about DDEV.
- **[DDEV - Commands](https://ddev.readthedocs.io/en/stable/users/usage/commands/):** List of DDEV commands and their usage.

## Other
- **[Lullabot ADRs](https://architecture.lullabot.com):** Architectural Decision Records from Lullabot for reference and inspiration. 
</markdown>

<file>development/project-configs/pre_action_prompt.mdc.txt</file>
<metadata>
path: development/project-configs/pre_action_prompt.mdc.txt
type: txt
size: 2272 bytes
</metadata>

<content type='txt'>
You are a Drupal assistant that will get a list of actions that you can take, including look up things in RAG databases and agents.
Based on the history and the user interaction, I want you to either give one or more actions in JSON format from the list, or
if you can't find anything that might make sense in the list, use a text answer. Never combine text answer with JSON answer.

If you see this text, you have not yet triggered an action. You need to invoke the agent action to do something on the website. You can not do any changes without invoking the agents, only ask for instructions.

You have two choices on how your answer will be formatted - either an actual answer if you need clarification or if you can not produce what they are asking for. Or a JSON with all the actions you will take. DO NOT combine the two. If you need to write some human readable, it should always be in form of a question, suggestion or a refusal to do what they ask for - and no JSON in the end.

Do not confirm or write that you are taking some action, always just respond with JSON object. The agents and RAG will know how to work with the action and give human responses.

Do not say that you will take action and then don't return the JSON object. Always return the JSON object if you say you will take action.

You do not have to check with the agents if they can solve something, just base this on the descriptions.

DO NOT MIX THE JSON OUTPUT WITH A PHRASE THAT YOU CAN DO IT. JUST GIVE BACK JSON.

If you decide to take action, do not include any explanations, only provide a RFC8259 compliant JSON response with questions and answers following this format without deviation:

Take the following into consideration when invoking these actions:
---------------------------------------------------------------
[usage_instruction]
---------------------------------------------------------------

Here are some examples on how to answer:
---------------------------------------------------------------
[learning_examples]
---------------------------------------------------------------

The actions you can take are the following:
---------------------------------------------------------------
[list_of_actions]
---------------------------------------------------------------

</content>

<file>development/project-configs/drupal-setup.md</file>
<metadata>
path: development/project-configs/drupal-setup.md
type: md
size: 2349 bytes
</metadata>

<markdown>
---
title: "Drupal 11 Project Setup"
description: "Configuration and setup instructions for Drupal 11 projects."
layout: "markdown.njk"
category: "Drupal"
tags: ["drupal", "setup", "configuration", "development"]
date: "2024-03-20"
discipline: "development"
---
`````
# Drupal 11 Project Configuration

## Project Structure
```
├── docroot/              # Drupal installation
│   ├── core/            # Drupal core
│   ├── modules/         # Custom modules
│   ├── profiles/        # Installation profiles
│   ├── sites/           # Site-specific files
│   │   └── default/     # Default site
│   │       ├── files/   # Public files
│   │       └── config/  # Configuration files
│   └── themes/          # Custom themes
├── config/              # Configuration export
├── scripts/             # Deployment scripts
├── tests/               # Test files
├── vendor/              # Composer dependencies
├── .gitignore
├── composer.json
├── composer.lock
└── README.md
```

## composer.json Configuration
```json
{
    "name": "organization/project",
    "description": "Drupal 11 project",
    "type": "project",
    "license": "GPL-2.0-or-later",
    "require": {
        "composer/installers": "^2.0",
        "drupal/core": "^11.0",
        "drupal/core-composer-scaffold": "^11.0",
        "drupal/core-project-message": "^11.0",
        "drupal/core-recommended": "^11.0"
    },
    "require-dev": {
        "drupal/core-dev": "^11.0",
        "phpunit/phpunit": "^9.6",
        "drupal/coder": "^8.3"
    },
    "config": {
        "sort-packages": true,
        "allow-plugins": {
            "composer/installers": true,
            "drupal/core-composer-scaffold": true,
            "drupal/core-project-message": true
        }
    },
    "scripts": {
        "post-install-cmd": "Drupal\\Core\\Composer\\Composer::scaffoldFiles",
        "post-update-cmd": "Drupal\\Core\\Composer\\Composer::scaffoldFiles"
    }
}
```

## CI/CD Configuration
1. Set up GitHub Actions
2. Configure automated testing
3. Set up deployment pipeline
4. Configure environment variables

## Development Environment
1. Local development setup
2. Database configuration
3. PHP settings
4. Development tools
5. Debugging configuration 
`````
</markdown>

<file>development/project-configs/11ty-setup.md</file>
<metadata>
path: development/project-configs/11ty-setup.md
type: md
size: 1845 bytes
</metadata>

<markdown>
---
title: "11ty Project Configuration"
description: "Configuration and setup instructions for 11ty static site projects."
layout: "markdown.njk"
category: "Static Sites"
tags: ["11ty", "setup", "configuration", "development"]
date: "2024-03-20"
discipline: "development"
---
`````
# 11ty Project Configuration

## Project Structure
```
├── _data/              # Global data files
├── _includes/          # Layouts and partials
├── _layouts/           # Page templates
├── assets/             # Static assets
│   ├── css/
│   ├── js/
│   └── images/
├── content/            # Content files
├── .eleventy.js        # 11ty configuration
├── .gitignore
├── package.json
└── README.md
```

## .eleventy.js Configuration
```javascript
module.exports = function(eleventyConfig) {
  // Copy static assets
  eleventyConfig.addPassthroughCopy("assets");
  
  // Add filters
  eleventyConfig.addFilter("date", function(date) {
    return new Date(date).toLocaleDateString();
  });

  // Add collections
  eleventyConfig.addCollection("posts", function(collection) {
    return collection.getFilteredByGlob("content/posts/*.md");
  });

  return {
    dir: {
      input: ".",
      output: "_site",
      includes: "_includes",
      layouts: "_layouts",
      data: "_data"
    },
    templateFormats: ["md", "njk", "html"],
    markdownTemplateEngine: "njk",
    htmlTemplateEngine: "njk",
    dataTemplateEngine: "njk"
  };
};
```

## package.json Scripts
```json
{
  "scripts": {
    "start": "eleventy --serve",
    "build": "eleventy",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}
```

## GitHub Pages Deployment
1. Create `.github/workflows/deploy.yml`
2. Configure repository settings
3. Set up GitHub Pages source
4. Monitor deployment status 
`````
</markdown>

<file>development/rules/code-quality.md</file>
<metadata>
path: development/rules/code-quality.md
type: md
size: 1328 bytes
</metadata>

<markdown>
---
title: "Code Quality Standards"
description: "Rules for maintaining high code quality across all projects."
layout: "markdown.njk"
category: "Development"
tags: ["standards", "best practices", "development"]
date: "2024-03-20"
discipline: "development"
---
```
# Code Quality Standards

## General Principles
1. Write code that is easy to read and understand
2. Follow the DRY (Don't Repeat Yourself) principle
3. Keep functions and methods small and focused
4. Use meaningful variable and function names
5. Document complex logic and decisions

## Code Style
- Use consistent indentation (2 or 4 spaces)
- Follow language-specific style guides
- Use proper spacing around operators
- Limit line length to 80-100 characters
- Use descriptive comments where necessary

## Testing
- Write tests for all new functionality
- Maintain test coverage above 80%
- Include both unit and integration tests
- Test edge cases and error conditions
- Keep tests independent and isolated

## Documentation
- Document public APIs and interfaces
- Include usage examples
- Keep README files up to date
- Document configuration options
- Maintain changelog

## Performance
- Optimize critical code paths
- Use appropriate data structures
- Minimize database queries
- Implement caching where appropriate
- Monitor and profile performance 
```
</markdown>

<file>development/rules/drupal-standards.md</file>
<metadata>
path: development/rules/drupal-standards.md
type: md
size: 1516 bytes
</metadata>

<markdown>
---
title: "Drupal 11 Development Standards"
description: "Rules for maintaining high code quality in Drupal 11 projects."
layout: "markdown.njk"
category: "Drupal"
tags: ["drupal", "standards", "best practices", "development"]
date: "2024-03-20"
discipline: "development"
---
```
# Drupal 11 Development Standards

## Drupal Coding Standards
- Follow Drupal core coding standards
- Use PHPCS and DrupalPractice for code review
- Implement proper dependency injection
- Use Drupal's service container
- Follow PSR-4 autoloading standards

## Module Development
- Use proper module structure
- Implement proper hook system
- Use configuration management
- Follow Drupal's plugin system
- Implement proper update hooks

## Theme Development
- Use proper theme structure
- Follow Twig best practices
- Implement proper asset libraries
- Use Drupal's breakpoint system
- Follow accessibility standards

## Security
- Use Drupal's security APIs
- Implement proper access control
- Use Drupal's database abstraction
- Sanitize all user input
- Escape all output

## Performance
- Use Drupal's caching system
- Optimize entity queries
- Implement proper cache tags
- Use lazy loading where appropriate
- Optimize asset delivery

## Testing
- Write PHPUnit tests
- Use Drupal's testing framework
- Test all custom functionality
- Include functional tests
- Test edge cases

## Documentation
- Document all custom code
- Use proper docblocks
- Document configuration
- Maintain README files
- Document deployment process 
```
</markdown>

<file>development/rules/drupal.md</file>
<metadata>
path: development/rules/drupal.md
type: md
size: 4296 bytes
</metadata>

<markdown>
---
title: "Drupal Development"
description: "Rules for maintaining high code quality in Drupal projects."
layout: "markdown.njk"
category: "Drupal"
tags: ["drupal", "standards", "best practices", "development"]
date: "2024-04-17"
discipline: "development"
---

## How these files work together

- drupal-core.mdc is Always applied, giving every generation a Drupal foundation.

- drupal-theme.mdc and drupal-tests.mdc are Auto Attached—they load only when you edit Twig or test files, keeping the model focused.

### 1 `drupal-core.mdc` — Core coding standards & patterns (Auto Attached)

```mdc
---
description: >
  Drupal 10 core standards & your team’s personal preferences. Ensures strict
  typing, DI, visibility, final classes, and hook patterns.
globs:
  - "**/*.php"
  - "**/*.module"
  - "**/*.install"
  - "**/*.services.yml"
alwaysApply: true
---

# Drupal 10 Core Rules

1. **Strict Types & PSR‑12**  
   ~~~php
   declare(strict_types=1);
   ~~~

2. **Final Classes & Visibility**  
   - Declare every class `final` unless you explicitly intend it to be extended.  
   - Make all properties `private readonly` when possible; otherwise `private`.  
   - Methods default to `private`; use `protected`/`public` only as needed.

3. **Dependency Injection**  
   - Never call `\Drupal::service()` or `\Drupal::config()` in classes.  
   - Use constructor injection with promoted properties:  
     ~~~php
     public function __construct(
         private readonly ConfigFactoryInterface $config,
         private readonly LoggerChannelInterface $logger,
     ) {}
     ~~~

4. **Hook Implementations**  
   - Thin wrapper: delegate to an invokable class with the `@Hook` attribute.  
     See OOP hooks: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Hook%21Attribute%21Hook.php/class/Hook/11.x  
   - Provide a `LegacyHook` bridge for procedural modules:  
     https://www.drupal.org/node/3442349

5. **Service Definitions**  
   ~~~yaml
   services:
     my_module.foo:
       class: Drupal\my_module\Foo
       arguments: ['@config.factory', '@logger.channel.my_module']
       tags: ['event_subscriber']
   ~~~

6. **Composer & Vendor**  
   - Add third‑party libraries via `composer require`.  
   - Never commit `vendor/`.

7. **Coding Standards & Checks**  
   - 2‑space indent, 80–120 col soft limit.  
   - Run `phpcbf --standard=Drupal,DrupalPractice` on staged files.

8. **Self‑Verification Checklist**  
   - [ ] Class is `final` and marked `strict_types`.  
   - [ ] All dependencies injected via constructor.  
   - [ ] No static calls to `\Drupal::`.  
   - [ ] Hooks use OOP attribute + LegacyHook.  
   - [ ] Services listed in `<module>.services.yml`.  
   - [ ] Visibility of properties/methods minimized.  
```

---

### 2 `drupal-theme.mdc` — Twig & front‑end (Auto Attached)

```mdc
---
description: Drupal 10 theming & Twig best practices.
globs:
  - "**/*.html.twig"
  - "**/*.theme"
alwaysApply: false
---

# Drupal Theme Rules

* Limit Twig logic to simple conditionals/loops; heavy logic goes to `*.theme` preprocess.
* Follow **BEM** classes (`block__element--modifier`).
* Use `{% raw %}{{ attach_library('my_theme/component') }}{% endraw %}` for assets.
* Prefer `|t` filter for translatable strings.
* To create template overrides, follow naming conventions (e.g. `node--article.html.twig`).
* Provide a matching `*.libraries.yml` entry for every new asset bundle.
```

---

### 3 `drupal-testing.mdc` — Testing patterns (Auto Attached)

```mdc
---
description: PHPUnit Kernel & Functional test scaffolds.
globs:
  - "tests/src/**/*.php"
alwaysApply: false
---

# Drupal Testing Rules

1. **Base classes**  
   * Use `KernelTestBase` for unit‑ish tests needing services.  
   * Use `BrowserTestBase` for full‑stack functional tests.

2. **Fixtures & setup**  
   * Install required modules via `$this->enableModules(['node', 'my_module']);`
   * Use `$this->drupalCreateUser()` and `$this->drupalLogin()` helpers.

3. **Assertions**  
   * Prefer `$this->assertTrue()` / `$this->assertEquals()` over deprecated helpers.  
   * For rendered HTML, use `$this->assertSession()->elementExists('css', '.class');`.

4. **CI**  
   * Tests must pass with `phpunit -c core/phpunit.xml.dist`.
```
</markdown>

<file>development/prompts/ai-code-review.md</file>
<metadata>
path: development/prompts/ai-code-review.md
type: md
size: 1047 bytes
</metadata>

<markdown>
---
title: "AI Code Review Assistant"
description: "AI prompts for performing thorough code reviews and ensuring best practices."
layout: "markdown.njk"
category: "Code Review"
tags: ["code review", "best practices", "development"]
date: "2024-03-20"
discipline: "development"
---
```
Please review the following code with a focus on:

1. Code Quality and Best Practices
   - Code organization and structure
   - Naming conventions
   - Code duplication
   - Error handling
   - Documentation

2. Security Considerations
   - Input validation
   - Authentication and authorization
   - Data protection
   - Common vulnerabilities

3. Performance
   - Algorithm efficiency
   - Resource usage
   - Database queries
   - Caching strategies

4. Maintainability
   - Code readability
   - Modularity
   - Testability
   - Future extensibility

Provide specific recommendations for improvements, including:
- Code examples for suggested changes
- References to relevant documentation
- Security best practices
- Performance optimization techniques 
```
</markdown>

<file>development/prompts/drupal-code-review.md</file>
<metadata>
path: development/prompts/drupal-code-review.md
type: md
size: 1361 bytes
</metadata>

<markdown>
---
title: "Drupal 11 Code Review Assistant"
description: "AI prompts for reviewing Drupal 11 code and ensuring best practices."
layout: "markdown.njk"
category: "Code Review"
tags: ["drupal", "code review", "best practices", "development"]
date: "2024-03-20"
discipline: "development"
---
```
Please review the following Drupal 11 code with a focus on:

1. Drupal Coding Standards
   - Drupal core coding standards compliance
   - PHPCS and DrupalPractice standards
   - Proper use of Drupal APIs and services
   - Correct hook implementations
   - Proper use of dependency injection

2. Drupal Security
   - Proper use of Drupal's security APIs
   - CSRF protection implementation
   - Proper access control
   - Safe database queries
   - Input sanitization and output escaping

3. Drupal Performance
   - Cache implementation
   - Entity query optimization
   - Proper use of Drupal's caching system
   - Database query optimization
   - Asset aggregation and optimization

4. Drupal Maintainability
   - Proper module and theme structure
   - Configuration management
   - Update hooks
   - Documentation standards
   - Test coverage

Provide specific recommendations for improvements, including:
- Drupal-specific code examples
- References to Drupal documentation
- Security best practices for Drupal
- Performance optimization techniques for Drupal 
```
</markdown>

<file>development/prompts/adr.md</file>
<metadata>
path: development/prompts/adr.md
type: md
size: 2211 bytes
</metadata>

<markdown>
---
title: "ADR Generator"
description: "Generate an ADR from a conversation or transcription about a decision."
layout: "markdown.njk"
date: "2025-04-23"
discipline: "development"
contentType: "prompts"
tags:
  - architecture
  - best practices
  - documentation
---
`````
You are a Drupal engineer with excellent communication skills.
Part of your job is to document important architectural decisions the team has made in the form of Architecture Decision Records, or ADRs.
You listen to the reasoning presented by team members and ask clarifying questions so you can format the architecture decision to fit the desired format, as outlined below.
Lullabot's ADR repository is the model you use when forming your ADRs.

It's critical to understand the Context, Decision, Exceptions, and Consequences for each proposed decision. Each new ADR should be in a Proposed state while the team reviews it.

---
# In the metadata section, # is a comment, not a heading.
date: YYYY-MM-DD

# New ADRs start at proposed, then move to accepted, and no longer relevant ADRs are deprecated or superseded.
status: proposed

# Tags are freeform - relevant keywords for this decision
tags:
  - tag1
  - tag2

# Include anyone who was involved in the decision or discussions
contributors:
  - Contributor Name
title: [Decision Title]
context: [1-sentence summary describing the context of the decision]

---
## Decision

[Describe our response to these forces. It is stated in full sentences, with active voice. "We will …".]

## Exceptions

[Outline what exceptions are allowed, and when it's acceptable to make them.]

## Consequences

[Describe the resulting context, after applying the decision. All consequences should be listed here, not just the "positive" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.]

## Status
[Accepted | Deprecated]

<References>
- Lullabot's ADR repository: https://architecture.lullabot.com/
- Basis: https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions.html
- Examples and core definitions: https://github.com/joelparkerhenderson/architecture-decision-record
</References>
`````
</markdown>

<file>project-management/prompts/project-journal-entry.md</file>
<metadata>
path: project-management/prompts/project-journal-entry.md
type: md
size: 1742 bytes
</metadata>

<markdown>
---
title: "Weekly Project Journal Entry"
description: "AI prompt for formatting a transcript into our weekly project journal entry format."
date: "2025-04-17"
layout: "markdown.njk"
discipline: "project-management"
contentType: "prompts"
tags:
  - meetings
  - action-items
  - transcripts
  - project-management
  - task-tracking
---

`````
You are a project manager for a web development company building websites and platforms for clients.
As such you need to produce a weekly report for your manager detailing the progress and health of the current project.
The input will most likely be a transcript or dictation.

<requirements>
1. The report should be written in first person tense.
2. Each section should contain enumerated items.
3. Refer to the glossary below for any jargon or unusual terms.
</requirements>

The format is as follows:

<format>
### Progress & Milestones
[itemized list of accomplishments]

### Problems/Concerns 
[itemized list of issues or concerns]

### Opportunities
[itemized list of things we might be able to explore outside the scope of this project.]

### Other Notes
[anything else that seems worth noting that doesn't fall into the above categories.]

### Things to Share With the Group
[A sentence or two summarizing the project health, and a list of any items outside of standard work updates that should be shared with other PMs or account managers that may be of use on their projects or would affect business outside of day-to-day operations on this project.]

### Quote of the Week
[lookup a funny or inspirational quote around project management or software development, with it's attribution.]
</format>

<glossary>
# Glossary of terms I may use to describe these projects:
- 
</glossary>
`````

</markdown>

<file>project-management/prompts/meeting-notes-extraction.md</file>
<metadata>
path: project-management/prompts/meeting-notes-extraction.md
type: md
size: 2196 bytes
</metadata>

<markdown>
---
title: "Meeting Notes Extraction"
description: "Converts raw meeting transcripts into organized, concise meeting notes by extracting essential information"
date: "2025-05-01"
layout: "markdown.njk"
discipline: "project-management"
contentType: "prompts"
tags:
  - meetings
  - documentation
  - transcripts
  - notes
---
`````
# Meeting Notes Extraction Prompt

You are a professional meeting assistant tasked with converting a raw meeting transcript into organized, concise meeting notes. Your job is to identify and extract the essential information while filtering out casual conversation and irrelevant details.

## Extraction Guidelines:

1. **Meeting Overview**:
   - Identify the date and primary purpose of the meeting
   - List all participants (with roles if mentioned)

2. **Key Discussion Topics**:
   - Identify main topics discussed (use H3 headers)
   - Provide a 2-3 sentence summary of each topic
   - Include only substantive information, not casual exchanges

3. **Decisions Made**:
   - Extract clear decisions or conclusions reached
   - Note any consensus or disagreements on important matters

4. **Action Items**:
   - List tasks assigned to specific people
   - Include deadlines if mentioned
   - Format as: Task - Owner - (Deadline)

5. **Updates/Progress Reports**:
   - Note any status updates on ongoing projects
   - Summarize progress reported by team members

6. **Next Steps**:
   - Identify planned next steps or follow-up items
   - Note any scheduled follow-up meetings

## Output Format:
```
# Meeting Notes: [Date]

## Participants
- [Names of participants]

## Summary
[1-2 paragraph overview of key points]

## Discussion Topics

### [Topic 1]
[Concise summary]

### [Topic 2]
[Concise summary]

## Decisions
- [Decision 1]
- [Decision 2]

## Action Items
- [Task 1] - [Owner] - ([Deadline])
- [Task 2] - [Owner] - ([Deadline])

## Updates
- [Update 1]
- [Update 2]

## Next Steps
- [Next step 1]
- [Next step 2]
```

Please analyze the following meeting transcript and extract the key information according to these guidelines. Focus on substance over form, and ensure all critical information is captured while eliminating irrelevant chatter. 
`````
</markdown>

<file>project-management/prompts/meeting-action-items.md</file>
<metadata>
path: project-management/prompts/meeting-action-items.md
type: md
size: 2759 bytes
</metadata>

<markdown>
---
title: "Meeting Action Items Extractor"
description: "AI prompt for extracting and formatting action items from meeting transcripts"
date: "2024-03-21"
layout: "markdown.njk"
discipline: "project-management"
contentType: "prompts"
tags:
  - meetings
  - action-items
  - transcripts
  - project-management
  - task-tracking
---

`````
You are an AI assistant tasked with extracting action items from a meeting transcript. This is a crucial task as it helps team members identify and follow up on important tasks discussed during the meeting.

Guidelines for identifying action items:
1. Look for specific tasks or responsibilities assigned to individuals or teams
2. Pay attention to deadlines or timeframes mentioned
3. Note any follow-up activities or next steps discussed
4. Identify decisions that require further action

Here is the meeting transcript:

<meeting_transcript>
pm/meetings/Pre-kickoff/transcript.txt
</meeting_transcript>

Please carefully read through the transcript and extract all action items. For each action item:
1. Identify the task or responsibility
2. Note who is responsible (if specified)
3. Include any deadlines or timeframes mentioned
4. Provide context if necessary (briefly)

After extracting the action items, provide a brief summary of how many action items you found.

Format your response as follows:
1. List each action item in a numbered list
2. Use bold text for the main task
3. Use italics for the responsible person or team
4. Include deadlines in parentheses
5. Add a brief context or note if needed, separated by a colon

Your final output should only include the numbered list of action items followed by the summary of the number of items found. Do not include any other text or explanations. Enclose your entire response in <action_items> tags.

<action_items>
1. **[Main task]** - *[Responsible person/team]* (Deadline): Context or note if needed
2. **[Main task]** - *[Responsible person/team]* (Deadline): Context or note if needed
...

Summary: [Number] action items found.
</action_items>
`````

### Example Usage

Here's an example of using this prompt with a meeting transcript:

```text
Meeting Transcript:
Sarah: We need to update the project timeline by next Friday.
John: I'll take care of the vendor contracts, aiming to have them signed by end of month.
Team: Let's schedule the kickoff meeting for early next week.
Mike: I can prepare the budget forecast, give me 3 days.

AI Response:
<action_items>
1. **Update project timeline** - *Sarah* (Next Friday)
2. **Process vendor contracts** - *John* (End of month): Needs signatures
3. **Schedule kickoff meeting** - *Team* (Early next week)
4. **Prepare budget forecast** - *Mike* (3 days)

Summary: 4 action items found.
</action_items>
``` 
</markdown>

<file>project-management/prompts/summarize-this.md</file>
<metadata>
path: project-management/prompts/summarize-this.md
type: md
size: 1247 bytes
</metadata>

<markdown>
---
title: "Summarize This"
description: "A prompt for summarizing long transcripts of meetings, YouTube videos, and other content"
date: "2025-04-11"
layout: "markdown.njk"
discipline: "project-management"
contentType: "prompts"
tags:
  - summary
  - transcripts
  - meetings
  - video
---

# A prompt for summarizing long transcipts of meetings, YouTube videos, etc.

`````
When creating a summary, include:

- A brief introduction explaining the video's main purpose/problem
- A detailed breakdown of all major points, with specific examples from the video
- Sub-sections for each key concept with explanations of how they connect
- Practical applications of the ideas presented
- Any frameworks or systems the presenter introduces
- Notable quotes or specific terminology used by the presenter

Structure the summary with clear headings and bullet points where appropriate to enhance readability.

## Summary rules for sizing

IF request contains "short" OR "small" THEN use 250-300 words to summarize
IF request contains "medium" THEN use 300-500 words  to summarize
IF request contains "long" OR "large" THEN use 500-750 words to summarize 
IF no size preference is detected THEN ask for clarification
`````
</markdown>

<file>project-management/prompts/readable-zoom-transcripts.md</file>
<metadata>
path: project-management/prompts/readable-zoom-transcripts.md
type: md
size: 1908 bytes
</metadata>

<markdown>
---
title: "Readable Zoom Transcripts"
description: "A prompt for cleaning and formatting meeting transcripts to improve readability while maintaining content integrity."
date: "2024-04-04"
layout: "markdown.njk"
discipline: "project-management"
contentType: "prompts"
tags: 
  - transcription
  - meetings
  - documentation
  - communication
---
`````
You will be given a transcript of a conversation. Your task is to clean up this transcript to make it more readable while maintaining the original content and meaning.

## Instructions

Follow these steps to clean up the transcript:

1. Remove all timestamps from the transcript.

2. Combine consecutive entries from the same author into a single paragraph. For example:

   John [10:15]: Hello there.
   John [10:16]: How are you?

   Should become:
   
   John: Hello there. How are you?

3. Remove filler words and slight interjections such as "Um", "Ah", "Uh", "Er", and similar sounds. Only remove these when they are used as filler words and not when they are part of the actual content.

4. Maintain the overall content and meaning of the text. Do not paraphrase or summarize the content. Keep the exact wording except for the removals mentioned above.

5. Format the cleaned transcript as follows:
   - Start each new speaker's dialogue with their name followed by a colon.
   - Use a blank line to separate different speakers' dialogues.
   - If a single speaker's dialogue is very long, you may split it into paragraphs for readability, but do not add blank lines between these paragraphs.

6. Ensure that the cleaned transcript remains true to the original content, preserving the flow of the conversation and all important information.

Once you have cleaned up the transcript according to these instructions, please provide the cleaned version in a new markdown file. Process the entire transcript and verify once complete. 
`````
</markdown>

<file>sales-marketing/prompts/create-natm-from-rfp.md</file>
<metadata>
path: sales-marketing/prompts/create-natm-from-rfp.md
type: md
size: 3006 bytes
</metadata>

<markdown>
---
title: "Create an NATM from an RFP"
description: "This prompt creates an NATM write up for an RFP. It does so by finding and collecting citations from the RFP, enumerating them, and then writing a prose style NATM."
date: "2025-05-30"
layout: "markdown.njk"
discipline: "sales-marketing"
contentType: "prompts"
tags:
  - natm
  - rfp
  - business-analysis
  - sales
  - proposal-response
---

`````
You are an expert business analyst working for Lullabot, a company that responds to Requests for Proposal (RFPs). Your task is to analyze an RFP and extract key information using the NATM (Need, Authority, Timeframe, Money) framework. This analysis will help Lullabot craft an effective response to the RFP.

Your goal is to create a clear, concise NATM breakdown of the RFP that will be used in an internal email to colleagues. Follow these steps:

## Analysis Process

1. Carefully read the entire RFP text.

2. Wrap your analysis inside `<natm_analysis>` tags. For each category of the NATM framework:

### NATM Framework Categories

- **Need**: Identify the core problem or requirement the client wants to address.
- **Authority**: Determine who the decision-makers and key stakeholders are.
- **Timeframe**: Extract information about project timelines and deadlines.
- **Money**: Find any budget information or financial constraints.

### For Each Category

a) List all relevant quotes from the RFP.
b) Analyze each quote for its significance to the category.
c) Synthesize the information into numbered key points.
d) Summarize the findings.
e) Identify any gaps or missing information.

*Note: It's OK for this section to be quite long, as thorough analysis is crucial.*

## Final NATM Breakdown

After your analysis, create a final NATM breakdown using bold headers for each section:

**Need**: [A concise paragraph describing the client's needs and requirements. Include specific numbers and technical details where available (e.g., number of pages, domains, traffic volumes, compliance requirements).]

**Authority**: [A concise paragraph about decision-makers and stakeholders, including names and titles where provided.]

**Timeframe**: [A concise paragraph about project timelines and deadlines, noting any deadlines that may have already passed.]

**Money**: [A concise paragraph about budget and financial information, noting when no specific budget is disclosed but providing context about contract scale based on other indicators.]

## Style Guidelines

Present your final breakdown adhering to these style principles:

- Use short, direct sentences
- Choose simple words over complicated ones
- Minimize adverbs and passive voice
- Prioritize clarity and readability
- Include specific numbers, dates, and technical details that demonstrate the scope
- Note when information is missing or unclear

Your analysis should be thorough, but your final breakdown must be clear, concise, and directly relevant to helping Lullabot assess the opportunity and craft an effective response.
````` 
</markdown>

<file>content-strategy/rules/lullabot-voice-and-tone-styleguide.md</file>
<metadata>
path: content-strategy/rules/lullabot-voice-and-tone-styleguide.md
type: md
size: 4585 bytes
</metadata>

<markdown>
---
title: "Lullabot Voice and Tone Styleguide"
description: "MAINTAIN consistent brand voice and tone when WRITING CONTENT to ENSURE clear and effective communication"
date: "2025-05-07"
layout: "markdown.njk"
discipline: "content-strategy"
contentType: "rules"
tags:
  - "brand voice"
  - "tone"
  - "writing style"
  - "content guidelines"
  - "communication"
---
`````
---
description: MAINTAIN consistent brand voice and tone when WRITING CONTENT to ENSURE clear and effective communication
globs: *.md,*.txt
alwaysApply: false
---
# Voice and Tone Standards

<version>1.0.0</version>

## Context
- Apply when writing or editing any client-facing content
- Used to maintain brand consistency across all communications
- Essential for conveying professionalism and expertise

## Requirements
- Adhere to core voice characteristics
- Adapt tone to match specific content types
- Structure content for maximum clarity and impact
- Follow specific writing style rules
- Incorporate brand reinforcement naturally

## Core Voice Characteristics

All content should consistently embody these qualities:

- **Knowledgeable**: Demonstrate deep technical understanding and industry expertise
- **Empowering**: Give readers actionable insights they can implement
- **Conversational**: Use natural language with "you" for readers and "we" for the company
- **Clear and Simple**: Break down complex concepts without oversimplification
- **Helpful**: Focus on solving problems and providing practical value
- **Respectful**: Maintain professional courtesy toward all mentioned parties

## Tone Patterns by Content Type

- **Technical Tutorials**: Confident and instructional, not condescending
- **Case Studies**: Confident but humble, focusing on lessons learned
- **Industry Insights**: Thoughtful and analytical with measured opinions
- **Company Culture**: Warm and authentic with personal touches
- **Client Communications**: Professional, responsive, and solutions-oriented

## Structural Elements

Essential components for all content:

- Relevant, approachable introduction
- Clear problem statement or purpose declaration
- Logical progression from general to specific
- Defined technical terms on first use
- Practical examples illustrating concepts
- Actionable takeaways or next steps

## Writing Style Rules

1. Use second-person ("you") to address the reader
2. Represent the company with "we" (first-person plural)
3. Keep paragraphs short (3-4 sentences maximum)
4. Vary sentence length for rhythm and readability
5. Use active voice predominantly
6. Break text with meaningful headings and subheadings
7. Define technical terms for broader audience understanding
8. Follow American English spelling conventions

## Examples

<example>
**Technical Introduction**

"Managing content across multiple platforms presents unique challenges for enterprise organizations. At Lullabot, we've helped companies like NBC solve these exact problems. Here's how you can implement a similar approach for your content architecture."

This example demonstrates expertise, addresses the reader directly, establishes credibility, and promises valuable information.
</example>

<example>
**Technical Explanation**

"When you implement a headless CMS architecture—where your content management system is separate from your front-end presentation layer—you gain flexibility in how your content appears across different platforms."

This example defines technical terminology, addresses the reader directly, and clearly explains benefits.
</example>

<example type="invalid">
**Poor Introduction**

"Content management is hard. This article will explain multi-platform content management."

This example lacks specificity, fails to establish expertise, doesn't address the reader, and provides no compelling reason to continue reading.
</example>

<example type="invalid">
**Poor Technical Explanation**

"Headless CMS separates the content repository from content presentation, offering flexibility through APIs."

This example uses undefined technical terms, lacks conversational tone, and doesn't clarify the benefit to the reader.
</example>

## Voice and Tone Decision Flow

```mermaid
---
title: Content Voice and Tone Selection Process
---
graph TD
    A[Identify Content Type] --> B[Determine Primary Audience]
    B --> C[Select Appropriate Tone Pattern]
    C --> D[Apply Core Voice Characteristics]
    D --> E[Structure Content With Required Elements]
    E --> F[Review Against Writing Style Rules]
    F --> G[Check Examples for Consistency]
    G --> H[Finalize Content]
```

`````
</markdown>

<file>memory-bank/techContext.md</file>
<metadata>
path: memory-bank/techContext.md
type: md
size: 998 bytes
</metadata>

<markdown>
# Tech Context

## Core Technologies
- **Static Site Generator:** 11ty (Eleventy)
- **Hosting:** GitHub Pages
- **Content Format:** Markdown (.md)
- **Runtime:** Node.js (v16 or higher required)
- **Package Manager:** npm (or yarn)
- **Version Control:** Git

## Supporting Technologies / Formats
- **GitHub Issue Templates:** YAML format used for creating structured issue forms (`.github/ISSUE_TEMPLATE/*.yml`).
- **GitHub Actions (`repository_dispatch`):** Used to receive external events (like Slack prompt submissions) and trigger workflows. Requires a shared secret (`SLACK_SHARED_SECRET`) configured in repository secrets.

## Development Setup
1.  Clone the repository.
2.  Install dependencies using `npm install`.
3.  Run the development server using `npm start`.

## Build Process
- Production builds are generated using `npm run build`.

## Dependencies
- **Primary:** `@11ty/eleventy` (^3.0.0) as a dev dependency.
- See `package.json` for a full list of npm dependencies. (Verified). 
</markdown>

<file>memory-bank/activeContext.md</file>
<metadata>
path: memory-bank/activeContext.md
type: md
size: 2072 bytes
</metadata>

<markdown>
# Active Context

## Current Focus
- Implementing and testing GitHub Issue Templates as a primary method for content contribution, aligning with an "invite and curate" strategy.
- Refining the contribution workflow based on discussions in Issue #34.
- Ensuring all discipline/content-type folders (including QA) are properly initialized with customized `index.njk` files containing relevant metadata and placeholder content, replacing any `.gitkeep` files.
- **FIXED:** Quality Assurance discipline was missing from Eleventy's config. It has now been added to the `disciplines` array, so QA content is visible and highlighted on the homepage and navigation.
- **Next:** Rebuild the site and verify that the homepage and navigation now correctly highlight Quality Assurance when content exists.

## Recent Activity
- Discussed various approaches to simplifying contribution and frontmatter generation (GitHub Issue #34).
- Explored GitHub Issue Templates/Forms as a user-friendly option.
- Drafted and created the initial `prompt-submission.yml` template in `.github/ISSUE_TEMPLATE/`.
- Replaced `.gitkeep` files in all `quality-assurance/` subfolders with Quality Assurance-specific `index.njk` files, each including tailored metadata and a section description.

## Next Steps
- **Test Issue Template:** Submit test content using the new prompt submission template on GitHub.
- **Define Maintainer Workflow:** Document the process for maintainers to review issue submissions and convert them into markdown files with correct frontmatter and structure.
- **Finalize Template Fields:** Review and finalize the dropdown options for `discipline` and `content-type` in `prompt-submission.yml`.
- **Create More Templates:** Draft and create similar issue templates for other content types (workflows, rules, configs) as needed.
- **Update Contribution Docs:** Update `contributing.njk` to reflect the primary use of issue templates.
- **Verify Section Initialization:** Ensure all discipline/content-type folders are initialized with appropriate `index.njk` files and metadata. 
</markdown>

<file>memory-bank/progress.md</file>
<metadata>
path: memory-bank/progress.md
type: md
size: 2393 bytes
</metadata>

<markdown>
# Progress

## What Works / Exists
- Project repository cloned.
- Basic project structure as defined in `README.md` is present.
- Core memory bank files created and populated with initial project details and context.
- Dependencies verified via `package.json` (`@11ty/eleventy@^3.0.0`).
- 11ty configuration (`.eleventy.js`) details (collections, filters, search index generation, directory structure, base path handling) documented.
- CI/CD workflow (`.github/workflows/deploy.yml`) identified and basic purpose (deployment, base path handling) documented.
- Initial content is populated in discipline directories (e.g., `development/`, `project-management/`).
- Search UI implemented (see `_includes/search.njk`).
- Search UI implementation details (client-side, uses `search-index.json`, includes modal view) understood and documented.
- Contribution process documented (see `contributing.njk`).
- Contribution process details (GitHub, Cursor w/ rules, Issues methods; metadata/formatting requirements) understood and documented.
- Content file structure verified (discipline folders, content-type subfolders, `kebab-case.md` file naming, presence of `index.njk` at both levels).
- **GitHub Issue Template:** Created initial template (`prompt-submission.yml`) for submitting prompts via issues.
- **Quality Assurance Section Initialization:** All `quality-assurance/` subfolders now have customized `index.njk` files with Quality Assurance-specific metadata and placeholder content, replacing `.gitkeep` files.
- **Quality Assurance Config Fix:** The Eleventy config now includes 'quality-assurance' in the disciplines array, so QA content is visible and highlighted on the homepage and navigation.

## What's Left to Build / Document
- Verification of the *actual* file structure and content existence within all discipline/content-type folders.
- Detailed documentation for specific components or features if needed (e.g., specific 11ty filters).
- Further population of content across all disciplines and types.
- **Define Maintainer Workflow:** Process for handling issue template submissions needs to be defined and documented.
- **Update Contribution Docs:** `contributing.njk` needs to be updated to feature the issue template method.
- **Additional Issue Templates:** Templates for other content types (workflows, rules, etc.) may be needed.

## Known Issues
- None identified yet. 
</markdown>

<file>memory-bank/productContext.md</file>
<metadata>
path: memory-bank/productContext.md
type: md
size: 1239 bytes
</metadata>

<markdown>
# Product Context

## Why This Project Exists
To provide a central, organized repository for AI prompts, rules, project configurations, and workflow states.

## Problems It Solves
Addresses the issue of scattered resources, making it difficult for individuals to find and share relevant prompts, rules, configurations, and workflows efficiently. It eliminates the need to search across disparate locations or rely on ad-hoc sharing methods.

## How It Should Work
The collection is presented through a web user interface built with the 11ty static site generator. Content is stored in flat Markdown files and organized by discipline (e.g., Project Management, Development). Users access the content via this web UI.

## User Experience Goals
The user experience should be straightforward and intuitive. Users should be able to:
*   Easily search for specific content using a search bar.
*   Browse content categorized by discipline.
*   Find clear instructions on how to contribute their own content to the library.
*   **Contribution Strategy:** Employ an "invite and curate" model, encouraging contributions through various channels, including user-friendly GitHub Issue Templates/Forms, with maintainers handling the final integration. 
</markdown>

<file>memory-bank/projectbrief.md</file>
<metadata>
path: memory-bank/projectbrief.md
type: md
size: 153 bytes
</metadata>

<markdown>
A collection of AI prompts, rules, project configurations, and workflow states across different disciplines. Built with 11ty and hosted on GitHub Pages. 
</markdown>

<file>memory-bank/systemPatterns.md</file>
<metadata>
path: memory-bank/systemPatterns.md
type: md
size: 6882 bytes
</metadata>

<markdown>
# System Patterns

## Architecture
- Static website generated by 11ty.
- Content is sourced from Markdown files organized within discipline-specific directories.
- Hosted directly via GitHub Pages.

## Content Organization
- **Top-level:** Disciplines (e.g., `development/`, `project-management/`, `sales-marketing/`, `content-strategy/`, `design`, `quality-assurance`)
- **Second-level:** Content Types (`prompts/`, `rules/`, `project-configs/`, `workflow-states/`)
- Specific content items are individual Markdown files within these directories, typically using `kebab-case.md` naming.
- An `index.njk` file often exists within discipline directories (e.g., `development/index.njk`) and content-type directories (e.g., `development/prompts/index.njk`) likely serving as landing/listing pages.
- 11ty collections are automatically generated for each content type, aggregating across disciplines.
- **IMPORTANT:** The list of disciplines in `.eleventy.js` (`const disciplines = [...]`) must always include all actual discipline folders. If a discipline is missing from this array, its content will not appear in collections, the homepage, or navigation. This caused the Quality Assurance section to be invisible until fixed.

## Templating
- Nunjucks (.njk) is used as the primary templating engine (for md, html, data files).
- Key layout files:
    - `_layouts/base.njk`
    - `_layouts/discipline.njk`
    - `_layouts/content-type.njk`
- Includes/partials are stored in `_includes/`.
- Global data is stored in `_data/`.
- Custom Nunjucks filters defined in `.eleventy.js`: `date`, `filterByDiscipline`, `fullUrl`, `hasContent`.
- Directory structure configured in `.eleventy.js`: input (`.`), output (`_site`), includes (`_includes`), layouts (`_layouts`), data (`_data`).

## Search
- A search index (`search-index.json`) is generated during build containing title, description, content, url, discipline, contentType, tags, and date for all `.md` files.
- Search functionality is implemented client-side via JavaScript in `_includes/search.njk`.
- **Implementation:**
    - Fetches `search-index.json` on page load.
    - Filters the index in the browser based on user input (case-insensitive matching on title, description, content, tags).
    - Results displayed dynamically, updating as user types (min 2 chars).
- **Features:**
    - Results link to the content page.
    - "View Prompt" button on each result opens a modal displaying the full Markdown content rendered using `marked.parse()` (requires `marked.js` library).
- Styling for search components and modal is included within `_includes/search.njk`.

## Styling & Assets
- Static assets (CSS, JS, Images) are located in the `assets/` directory and copied directly to `_site/assets` during build.

## CI/CD
- GitHub Actions workflow defined in `.github/workflows/deploy.yml`.
- **Trigger:** Runs on push to `main` branch and `workflow_dispatch`.
- **Environment:** `ubuntu-latest` with Node.js v22.
- **Process:**
    1. Checkout code.
    2. Setup Node.js & cache npm dependencies.
    3. Install dependencies (`npm install`).
    4. Build site (`npm run build`) - output to `./_site`.
    5. Deploy `./_site` contents to `gh-pages` branch using `peaceiris/actions-gh-pages@v4`.
- The build process adapts URLs based on `process.env.GITHUB_ACTIONS` (adds `/prompt_library` base path), configured in `.eleventy.js`.
- A `baseUrl` global variable and `pathPrefix` are configured in `.eleventy.js` to handle deployment to GitHub Pages subpath.

## Contribution Process
- Contribution guidelines are documented in the `contributing.njk` page.
- **Methods:**
    - **GitHub Direct:** Standard Fork -> Branch -> Add File -> Commit -> PR workflow.
    - **Cursor:** Recommends using Cursor AI with the `prompt-library-requirements` rule for guided content creation.
    - **GitHub Issues:** Allows users to suggest content via issues tagged "Content Suggestion:".
- **Content Requirements:**
    - **Metadata (Frontmatter):** `title`, `description`, `date`, `tags` (min 2).
    - **Formatting:** Markdown, clear headings, code blocks, reasonable line length, lists.
    - **Validation:** Check metadata, preview locally (`npm start`), validate links/code, check style.
- The `contributing.njk` page includes an accordion UI (JS/CSS) to present the methods.

### Planned Contribution Workflow (via Issue Templates)
- **Initiation:** Contributor selects an Issue Template (e.g., for prompts) and fills out the form.
- **Submission:** A GitHub Issue is created with structured data and specific labels (e.g., `new-contribution`, `needs-review`).
- **Curation:** Maintainer reviews the issue, verifies the content, and potentially refines the data (e.g., adds tags).
- **Conversion:** Maintainer manually creates the corresponding Markdown file in the correct location, populating the frontmatter and content from the issue data.
- **Integration:** Maintainer commits the new file, typically via a PR, for final review and merge.

### Slack Prompt Submission Workflow (via GitHub Actions)
- **Initiation:** A Slack bot sends a `repository_dispatch` event (`type: slack-prompt-submission`) to the GitHub API for this repository.
- **Payload:** The event's `client_payload` contains the prompt content, author, invoker, permalink, and a shared secret.
- **Trigger:** The dispatch event triggers the `.github/workflows/slack_submit.yml` workflow.
- **Validation:** The workflow validates the shared secret against a repository secret (`secrets.SLACK_SHARED_SECRET`) and checks for required fields in the payload.
- **Issue Creation:** If validation passes, the workflow uses the GitHub API (via `gh` CLI with `GITHUB_TOKEN`) to create a new issue in this repository, formatted with the content and metadata from the payload.
- **Labels:** The issue is automatically labeled (e.g., `new-prompt`, `from-slack`).
- **Response Limitation:** The workflow trigger (`repository_dispatch`) does not return a custom response body to the caller (Slack bot). The bot only receives confirmation that the event was dispatched (HTTP 204), not that the issue was successfully created.
- **Maintainer Action:** This issue follows the same curation and conversion process as issues created via templates. 

## Section Initialization Pattern
- All discipline/content-type folders (e.g., `quality-assurance/prompts/`, `quality-assurance/rules/`, etc.) should be initialized with a customized `index.njk` file containing relevant metadata (title, description, layout, discipline, contentType, category) and placeholder content describing the section's purpose.
- This replaces the use of `.gitkeep` files for empty folder tracking, ensuring each section is ready for content and discoverable in the UI.
- This pattern was applied to the Quality Assurance section, with each subfolder now containing a Quality Assurance-specific `index.njk` file. 

</markdown>

<file>.github/PULL_REQUEST_TEMPLATE.md</file>
<metadata>
path: .github/PULL_REQUEST_TEMPLATE.md
type: md
size: 961 bytes
</metadata>

<markdown>
---
name: "Pull Request"
about: "Submit a pull request to Noko-LSM"
---

## Issue Reference
Closes #[issue-number] <!-- Replace with the issue number this PR addresses -->

## Description of Changes
Describe what this PR changes, adds, or fixes. Include context and reasoning for the change.

## Testing Instructions
1. List steps to test the changes
2. Include any setup or configuration required
3. Note any edge cases to consider

## Screenshots (if applicable)
Add screenshots or GIFs to help reviewers understand the changes.

## Checklist for Reviewers
- [ ] Code follows project best practices
- [ ] All tests pass locally
- [ ] Documentation is updated as needed
- [ ] Configuration changes (if any) are exported and committed
- [ ] Update hooks or data migrations are included (if needed)
- [ ] No sensitive data or credentials are committed
- [ ] PR description is clear and complete

## Additional Notes
Add any other information for reviewers here. 
</markdown>

<file>.github/workflows/deploy.yml</file>
<metadata>
path: .github/workflows/deploy.yml
type: yml
size: 712 bytes
</metadata>

<content type='yml'>
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          publish_branch: gh-pages
          commit_message: ${{ github.event.head_commit.message }} 
</content>

<file>.github/workflows/slack_submit.yml</file>
<metadata>
path: .github/workflows/slack_submit.yml
type: yml
size: 2600 bytes
</metadata>

<content type='yml'>
# .github/workflows/slack_submit.yml
name: Slack Prompt Submission

on:
  repository_dispatch:
    types: [slack-prompt-submission]

permissions:
  issues: write # Required to create issues

jobs:
  create_issue_from_slack:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Shared Secret
        if: github.event.client_payload.secret != secrets.SLACK_SHARED_SECRET
        run: |
          echo "::error::Invalid shared secret provided."
          exit 1

      - name: Validate Payload Content
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const payload = context.payload.client_payload;
            if (!payload) {
              core.setFailed('Missing client_payload in event.');
              return;
            }
            const required = ['content', 'author', 'invoker', 'permalink', 'secret']; // Also check secret presence before validation step
            const missing = required.filter(field => !(field in payload) || !payload[field]);
            if (missing.length > 0) {
              core.setFailed(`Missing required fields in payload: ${missing.join(', ')}`);
              return;
            }
            // Make payload data easily accessible for later steps
            core.setOutput('content', payload.content);
            core.setOutput('author', payload.author);
            core.setOutput('invoker', payload.invoker);
            core.setOutput('permalink', payload.permalink);

      - name: Create GitHub Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAYLOAD_CONTENT: ${{ steps.validate.outputs.content }}
          PAYLOAD_AUTHOR: ${{ steps.validate.outputs.author }}
          PAYLOAD_INVOKER: ${{ steps.validate.outputs.invoker }}
          PAYLOAD_PERMALINK: ${{ steps.validate.outputs.permalink }}
          # Ensure labels exist in the repo or creation will fail. Default labels:
          ISSUE_LABELS: "new-prompt,from-slack"
        run: |
          ISSUE_TITLE="New Prompt Submission from Slack: @${PAYLOAD_AUTHOR}"
          # Using heredoc for multi-line body ensures proper formatting
          ISSUE_BODY=$(cat <<-EOF
          ${PAYLOAD_CONTENT}

          ---
          *Metadata:*
          *   Submitted via \`/add-prompt\` by: @${PAYLOAD_INVOKER}
          *   Original Author: @${PAYLOAD_AUTHOR}
          *   Original Slack Message: ${PAYLOAD_PERMALINK}
          EOF
          )
          # Use gh cli to create issue.
          gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" --label "$ISSUE_LABELS" --repo "$GITHUB_REPOSITORY" 
</content>

<file>.github/ISSUE_TEMPLATE/workflow-state-submission.yml</file>
<metadata>
path: .github/ISSUE_TEMPLATE/workflow-state-submission.yml
type: yml
size: 1752 bytes
</metadata>

<content type='yml'>
name: Submit a New Workflow State
description: Contribute a new workflow state (process step, status, or stage) to the library.
title: "[Workflow State Contribution]: Title for your workflow state"
labels: ["new-contribution", "workflow-state", "needs-review"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for contributing! Please provide the core details for your workflow state below.
        The issue title you set above will be used as the workflow state's title.

  - type: textarea
    id: workflow-state-description
    attributes:
      label: Description
      description: "Explain what the workflow state is, its purpose, and intended use cases. This appears below the title."
      placeholder: "e.g., This workflow state represents the QA review phase in the publishing process..."
    validations:
      required: true

  - type: textarea
    id: workflow-state-content
    attributes:
      label: Workflow State Content
      description: "Paste the full text or checklist of the workflow state here."
      placeholder: "Enter the complete workflow state details or checklist..."
      render: markdown
    validations:
      required: true

  - type: dropdown
    id: discipline
    attributes:
      label: Primary Discipline
      description: "Select the main area this workflow state is most relevant to."
      options:
        - Development
        - Design
        - Marketing
        - Project Management
        - Content Strategy
        - Research
        - Support
        - Operations
    validations:
      required: true

  - type: markdown
    attributes:
      value: |
        A maintainer will review your submission, add relevant tags, and convert it into the library format. Thank you! 
</content>

<file>.github/ISSUE_TEMPLATE/project-config-submission.yml</file>
<metadata>
path: .github/ISSUE_TEMPLATE/project-config-submission.yml
type: yml
size: 1734 bytes
</metadata>

<content type='yml'>
name: Submit a New Project Config
description: Contribute a new project configuration (settings, templates, or environment configs) to the library.
title: "[Project Config Contribution]: Title for your project config"
labels: ["new-contribution", "project-config", "needs-review"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for contributing! Please provide the core details for your project config below.
        The issue title you set above will be used as the config's title.

  - type: textarea
    id: config-description
    attributes:
      label: Description
      description: "Explain what the project config does, its purpose, and intended use cases. This appears below the title."
      placeholder: "e.g., This configuration sets up a standard ESLint environment for React projects..."
    validations:
      required: true

  - type: textarea
    id: config-content
    attributes:
      label: Project Config Content
      description: "Paste the full text or code of the project config here."
      placeholder: "Enter the complete configuration or template..."
      render: markdown
    validations:
      required: true

  - type: dropdown
    id: discipline
    attributes:
      label: Primary Discipline
      description: "Select the main area this project config is most relevant to."
      options:
        - Development
        - Design
        - Marketing
        - Project Management
        - Content Strategy
        - Research
        - Support
        - Operations
    validations:
      required: true

  - type: markdown
    attributes:
      value: |
        A maintainer will review your submission, add relevant tags, and convert it into the library format. Thank you! 
</content>

<file>.github/ISSUE_TEMPLATE/resource-submission.yml</file>
<metadata>
path: .github/ISSUE_TEMPLATE/resource-submission.yml
type: yml
size: 2393 bytes
</metadata>

<content type='yml'>
name: "Resource Submission"
description: "Suggest a new external resource (guide, documentation, prompt list, etc.) for the library."
title: "[Resource] <title>"
labels: ["new-resource", "needs-review"]
body:
  - type: input
    id: title
    attributes:
      label: "Resource Title"
      description: "Name of the resource."
      placeholder: "e.g., Awesome ChatGPT Prompts Collection"
    validations:
      required: true
  - type: textarea
    id: description
    attributes:
      label: "Description"
      description: "Brief summary of what the resource covers."
      placeholder: "A curated list of useful ChatGPT prompts for various use cases."
    validations:
      required: true
  - type: input
    id: url
    attributes:
      label: "Resource URL"
      description: "Link to the external resource."
      placeholder: "https://github.com/f/awesome-chatgpt-prompts"
    validations:
      required: true
  - type: dropdown
    id: resource_type
    attributes:
      label: "Resource Type"
      description: "What kind of resource is this?"
      options:
        - Article
        - Video
        - Documentation
        - Prompt List
        - Tool
        - Course
        - Tutorial
        - Other
    validations:
      required: true
  - type: dropdown
    id: skill_level
    attributes:
      label: "Skill Level (optional)"
      description: "Intended audience skill level."
      options:
        - Beginner
        - Intermediate
        - Advanced
        - Not specified
    validations:
      required: false
  - type: input
    id: topics
    attributes:
      label: "Topics/Tags"
      description: "Comma-separated list of topics or tags."
      placeholder: "prompt engineering, AI, development"
    validations:
      required: true
  - type: textarea
    id: notes
    attributes:
      label: "Additional Notes (optional)"
      description: "Any extra context or recommendations."
      placeholder: "Regularly updated. Highly recommended for new users."
    validations:
      required: false
  - type: dropdown
    id: discipline
    attributes:
      label: "Discipline"
      description: "Which discipline does this resource belong to?"
      options:
        - Development
        - Project Management
        - Quality Assurance
        - Content Strategy
        - Design
        - Sales & Marketing
    validations:
      required: true 
</content>

<file>.github/ISSUE_TEMPLATE/feature_request.md</file>
<metadata>
path: .github/ISSUE_TEMPLATE/feature_request.md
type: md
size: 757 bytes
</metadata>

<markdown>
---
name: "✨ Feature request"
about: "Suggest a new feature or enhancement for Noko-LSM"
title: "[Feature] <short description>"
labels: [enhancement]
---

## Summary
A clear and concise description of the feature or enhancement.

## Problem Statement
What problem does this feature solve? Why is it important?

## Proposed Solution
Describe the solution you'd like, including any specific requirements or constraints.

## Alternatives Considered
Have you considered any alternative solutions or features?

## Acceptance Criteria
- [ ] Feature solves the stated problem
- [ ] Implementation follows project best practices
- [ ] Tests and documentation are updated

## Additional Context
Add any other context or screenshots about the feature request here. 
</markdown>

<file>.github/ISSUE_TEMPLATE/bug_report.md</file>
<metadata>
path: .github/ISSUE_TEMPLATE/bug_report.md
type: md
size: 849 bytes
</metadata>

<markdown>
---
name: "🐛 Bug report"
about: "Report a bug to help us improve Noko-LSM"
title: "[Bug] <short description>"
labels: [bug]
---

## Description
A clear and concise description of what the bug is.

## Steps to Reproduce
1. Go to '...'
2. Click on '...'
3. Scroll down to '...'
4. See error

## Expected Behavior
A clear and concise description of what you expected to happen.

## Actual Behavior
What actually happened?

## Environment
- OS:
- Browser:
- Noko-LSM version:
- Any relevant configuration (e.g., custom modules, config changes):

## Screenshots
If applicable, add screenshots to help explain your problem.

## Acceptance Criteria
- [ ] Bug is reproducible
- [ ] Steps to fix are clear
- [ ] PR includes tests (if applicable)
- [ ] Documentation updated (if needed)

## Additional Context
Add any other context about the problem here. 
</markdown>

<file>.github/ISSUE_TEMPLATE/documentation_update.md</file>
<metadata>
path: .github/ISSUE_TEMPLATE/documentation_update.md
type: md
size: 688 bytes
</metadata>

<markdown>
---
name: "📝 Documentation update"
about: "Request an update or improvement to the documentation"
title: "[Docs] <short description>"
labels: [documentation]
---

## Summary
Briefly describe the documentation update needed.

## Affected Documentation
List the files, sections, or topics that need updating.

## Proposed Changes
Describe the changes you propose.

## Motivation
Why is this update necessary? Who will benefit?

## Acceptance Criteria
- [ ] Documentation is clear and accurate
- [ ] Follows Drupal and project documentation standards
- [ ] All relevant sections are updated

## Additional Context
Add any other context or screenshots about the documentation update here. 
</markdown>

<file>.github/ISSUE_TEMPLATE/rule-submission.yml</file>
<metadata>
path: .github/ISSUE_TEMPLATE/rule-submission.yml
type: yml
size: 1606 bytes
</metadata>

<content type='yml'>
name: Submit a New Rule
description: Contribute a new rule (guideline, standard, or best practice) to the library.
title: "[Rule Contribution]: Title for your rule"
labels: ["new-contribution", "rule", "needs-review"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for contributing! Please provide the core details for your rule below.
        The issue title you set above will be used as the rule's title.

  - type: textarea
    id: rule-description
    attributes:
      label: Description
      description: "Explain what the rule does, its purpose, and intended use cases. This appears below the title."
      placeholder: "e.g., This rule enforces code style consistency across the team..."
    validations:
      required: true

  - type: textarea
    id: rule-content
    attributes:
      label: Rule Content
      description: "Paste the full text or checklist of the rule itself here."
      placeholder: "Enter the complete rule text or checklist..."
      render: markdown
    validations:
      required: true

  - type: dropdown
    id: discipline
    attributes:
      label: Primary Discipline
      description: "Select the main area this rule is most relevant to."
      options:
        - Development
        - Design
        - Marketing
        - Project Management
        - Content Strategy
        - Research
        - Support
        - Operations
    validations:
      required: true

  - type: markdown
    attributes:
      value: |
        A maintainer will review your submission, add relevant tags, and convert it into the library format. Thank you! 
</content>

<file>.github/ISSUE_TEMPLATE/performance_issue.md</file>
<metadata>
path: .github/ISSUE_TEMPLATE/performance_issue.md
type: md
size: 1072 bytes
</metadata>

<markdown>
---
name: "🚀 Performance issue"
about: "Report a performance problem or bottleneck in Noko-LSM"
title: "[Performance] <short description>"
labels: [performance]
---

## Summary
A clear and concise description of the performance issue.

## Affected Area
Which part of the application is affected (e.g., chart rendering, API response, etc.)?

## Steps to Reproduce
1. Go to '...'
2. Perform '...'
3. Observe performance issue

## Expected Performance
Describe what you expected in terms of speed or responsiveness.

## Actual Performance
Describe what actually happened, including any metrics or measurements if available.

## Environment
- OS:
- Browser:
- Noko-LSM version:
- Data size (if relevant):

## Proposed Solution
If you have ideas for how to resolve the issue, describe them here.

## Acceptance Criteria
- [ ] Issue is reproducible
- [ ] Performance improvement is measurable
- [ ] Solution follows best practices
- [ ] Tests and documentation updated (if needed)

## Additional Context
Add any other context or screenshots about the performance issue here. 
</markdown>

<file>.github/ISSUE_TEMPLATE/config.yml</file>
<metadata>
path: .github/ISSUE_TEMPLATE/config.yml
type: yml
size: 181 bytes
</metadata>

<content type='yml'>
blank_issues_enabled: false
contact_links:
  - name: 💬 General Question
    url: https://github.com/lullabot/noko-lsm/discussions
    about: Ask a question or start a discussion 
</content>

<file>.github/ISSUE_TEMPLATE/prompt-submission.yml</file>
<metadata>
path: .github/ISSUE_TEMPLATE/prompt-submission.yml
type: yml
size: 2184 bytes
</metadata>

<content type='yml'>
name: Submit a New Prompt
description: Contribute a new AI prompt to the library.
# The issue title itself will serve as the initial title.
title: "[Prompt Contribution]: Title for your prompt"
labels: ["new-contribution", "prompt", "needs-review"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for contributing! Please provide the core details for your prompt below.
        The issue title you set above will be used as the prompt's title.

  - type: textarea
    id: prompt-description
    attributes:
      label: Description
      description: "Explain what the prompt does, its purpose, and intended use cases. This appears below the title."
      placeholder: "e.g., This prompt takes code as input and generates a concise explanation..."
    validations:
      required: true

  - type: textarea
    id: prompt-content
    attributes:
      label: Prompt Content
      description: "Paste the full text of the prompt itself here."
      placeholder: "Enter the complete prompt text..."
      render: markdown
    validations:
      required: true

  - type: dropdown
    id: discipline
    attributes:
      label: Primary Discipline
      description: "Select the main area this prompt is most relevant to."
      # TODO: Finalize the definitive list of disciplines
      options:
        - Development
        - Design
        - Marketing
        - Project Management
        - Content Strategy
        - Research
        - Support
        - Operations
    validations:
      required: true

  - type: dropdown
    id: content-type
    attributes:
      label: Primary Content Type
      description: "Select the primary type of output this prompt is designed for."
       # TODO: Finalize the definitive list of content types
      options:
        - Code
        - Text (General)
        - Documentation
        - Marketing Copy
        - Email
        - Report
        - Image Description
        - Data Analysis
        - Strategy/Plan
    validations:
      required: true

  - type: markdown
    attributes:
      value: |
        A maintainer will review your submission, add relevant tags, and convert it into the library format. Thank you! 
</content>

<file>_data/search-index.js</file>
<metadata>
path: _data/search-index.js
type: js
size: 1606 bytes
</metadata>

<imports>
const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');
</imports>

<code lang='js'>
const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

function getMarkdownFiles(dir) {
  let results = [];
  const items = fs.readdirSync(dir);

  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      results = results.concat(getMarkdownFiles(fullPath));
    } else if (item.endsWith('.md')) {
      results.push(fullPath);
    }
  }

  return results;
}

function createSearchIndex() {
  const contentDirs = [
    'development',
    'project-management',
    'sales-marketing',
    'content-strategy',
    'design',
    'quality-assurance'
  ];

  const searchIndex = [];

  for (const dir of contentDirs) {
    if (!fs.existsSync(dir)) continue;

    const files = getMarkdownFiles(dir);
    
    for (const file of files) {
      const content = fs.readFileSync(file, 'utf8');
      const { data, content: markdown } = matter(content);
      const relativePath = path.relative(process.cwd(), file);
      const url = '/' + relativePath.replace(/\\/g, '/').replace(/\.md$/, '/');

      searchIndex.push({
        title: data.title || '',
        description: data.description || '',
        content: markdown,
        url: url,
        discipline: data.discipline || dir,
        contentType: data.contentType || '',
        tags: data.tags || [],
        date: data.date || new Date().toISOString()
      });
    }
  }

  return searchIndex;
}

module.exports = createSearchIndex; 
</code>

<file>quality-assurance/prompts/qa-test-checklist.md</file>
<metadata>
path: quality-assurance/prompts/qa-test-checklist.md
type: md
size: 1077 bytes
</metadata>

<markdown>
---
title: "Quality Assurance Test Checklist"
description: "A comprehensive checklist to ensure quality and consistency before releasing any feature or update. Covers requirements, testing, documentation, and stakeholder sign-off."
date: "2025-04-11"
layout: "markdown.njk"
discipline: "quality-assurance"
contentType: "prompts"
tags:
  - quality-assurance
  - testing
  - checklist
  - release
  - bugs
  - review
  - documentation
---
# Quality Assurance Test Checklist

```
Use this checklist to ensure quality and consistency before releasing any feature or update:

- [ ] Requirements are clearly defined and understood
- [ ] All acceptance criteria are met
- [ ] Code has been peer reviewed
- [ ] Unit tests are written and passing
- [ ] Integration tests are written and passing
- [ ] Manual testing completed on all supported browsers/devices
- [ ] No critical or high-severity bugs remain
- [ ] Documentation is updated
- [ ] Rollback plan is in place
- [ ] Stakeholders have signed off
```
---

*Add or modify checklist items as needed for your project or workflow.* 
</markdown>

<file>assets/css/styles.css</file>
<metadata>
path: assets/css/styles.css
type: css
size: 25993 bytes
</metadata>

<content type='css'>
:root {
    /* Light theme variables */
    --primary-color: #2563eb;
    --secondary-color: #1e40af;
    --text-color: #1f2937;
    --background-color: #ffffff;
    --card-background: #f3f4f6;
    --tag-background: #e5e7eb;
    --border-color: #e5e7eb;
    --search-bg: rgba(255, 255, 255, 0.15);
    --search-bg-focus: rgba(255, 255, 255, 0.25);
    --search-text: white;
    --search-placeholder: rgba(255, 255, 255, 0.7);
    --header-text: white;
    --theme-transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
}

/* Dark theme variables */
:root.dark-theme {
    --primary-color: #60a5fa;
    --secondary-color: #93c5fd;
    --text-color: #f3f4f6;
    --background-color: #0f172a;
    --card-background: #1e293b;
    --tag-background: #334155;
    --border-color: #334155;
    --search-bg: rgba(0, 0, 0, 0.2);
    --search-bg-focus: rgba(0, 0, 0, 0.3);
    --search-text: #f3f4f6;
    --search-placeholder: rgba(243, 244, 246, 0.7);
    --header-text: #f3f4f6;
    --code-background: #1a2234;
    --code-text: #e2e8f0;
    --code-border: #2d3748;
    --inline-code-background: #2d3748;
    --inline-code-text: #e2e8f0;
    --card-text: #f3f4f6;
    --card-hover-shadow: rgba(0, 0, 0, 0.5);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--background-color);
    transition: var(--theme-transition);
}

header {
    background-color: var(--primary-color);
    padding: 1rem 0;
    color: var(--header-text);
    transition: var(--theme-transition);
}

nav {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    justify-content: space-between;
}

.home-link {
    color: var(--header-text);
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    white-space: nowrap;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s ease;
}

.home-link:hover {
    background-color: var(--secondary-color);
}

nav a {
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

nav a i {
    font-size: 1.1em;
}

nav a:hover {
    background-color: var(--secondary-color);
}

.discipline-nav {
    background-color: var(--card-background);
    padding: 1rem 2rem;
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
}

.discipline-nav .discipline-name {
    font-weight: 500;
    color: var(--text-color);
    margin-right: 1rem;
    text-transform: none;
    white-space: nowrap;
}

.discipline-nav nav {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.discipline-nav a {
    color: var(--text-color);
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    margin: 0 0.25rem;
    transition: background-color 0.2s ease;
}

.discipline-nav a:hover {
    background-color: var(--tag-background);
}

.content-type-header {
    text-align: center;
    padding: 3rem 2rem;
    background-color: var(--card-background);
    margin-bottom: 2rem;
}

.content-type-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: var(--text-color);
}

.content-type-header .description {
    max-width: 800px;
    margin: 0 auto;
    color: var(--text-color);
    opacity: 0.8;
}

.content-list {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

/* Homepage cards */
.content-list > div {
    background-color: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1.5rem;
    transition: transform 0.2s, box-shadow 0.2s, var(--theme-transition);
}

.content-list > div:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--card-hover-shadow);
}

.content-list > div h2 {
    color: var(--text-color);
    margin-bottom: 1rem;
}

.content-list > div a {
    color: var(--text-color);
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s ease;
}

.content-list > div a:hover {
    background-color: var(--tag-background);
}

.content-list > div i {
    color: var(--text-color);
    opacity: 0.9;
}

/* Update existing card styles to ensure they don't override homepage cards */
.content-item {
    background-color: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1.5rem;
    transition: transform 0.2s, box-shadow 0.2s, var(--theme-transition);
    color: var(--text-color);
}

.content-item h2 {
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--text-color);
}

.content-item h2 a {
    color: var(--primary-color);
    text-decoration: none;
}

.content-item h2 a:hover {
    text-decoration: underline;
}

.content-item p {
    color: var(--text-color);
    opacity: 0.9;
}

.content-item .metadata {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    color: var(--text-color);
}

.content-item .date {
    font-size: 0.875rem;
    color: var(--text-color);
    opacity: 0.8;
}

.tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
}

.tag {
    background-color: var(--tag-background);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    color: var(--text-color);
    opacity: 0.9;
}

footer {
    text-align: center;
    padding: 2rem;
    background-color: var(--card-background);
    margin-top: 4rem;
}

/* Search Component */
.search-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: auto;
    max-width: 800px;
    width: 60%;
    position: relative;
}

.search-form {
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
}

.search-input {
    width: 100%;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    background-color: var(--search-bg);
    color: var(--search-text);
    transition: var(--theme-transition);
}

.search-input::placeholder {
    color: var(--search-placeholder);
}

.search-input:focus {
    outline: none;
    background-color: var(--search-bg-focus);
}

.search-button {
    padding: 0.5rem;
    margin-left: 0.5rem;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    opacity: 0.8;
    transition: opacity 0.2s ease;
}

.search-button:hover {
    opacity: 1;
}

/* Search Results */
.search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
    background-color: var(--background-color);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    margin-top: 0.5rem;
}

.search-results[hidden] {
    display: none;
}

.search-results:not([hidden]) {
    display: block;
}

.search-result {
    border-bottom: 1px solid var(--border-color);
}

.search-result:last-child {
    border-bottom: none;
}

.result-link {
    display: block;
    padding: 1rem;
    color: var(--text-color);
    text-decoration: none;
    transition: background-color 0.2s ease;
}

.result-link:hover,
.result-link:focus {
    background-color: var(--card-background);
}

.result-title {
    margin: 0 0 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    color: var(--primary-color);
}

.result-meta {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.8rem;
    color: var(--text-color);
    opacity: 0.8;
}

.result-discipline,
.result-type {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    background-color: var(--tag-background);
    border-radius: 4px;
    font-size: 0.75rem;
    color: var(--text-color);
}

.result-description {
    margin: 0 0 0.5rem;
    font-size: 0.9rem;
    color: var(--text-color);
    opacity: 0.9;
    line-height: 1.4;
}

.no-results {
    padding: 1rem;
    text-align: center;
    color: var(--text-color);
    opacity: 0.8;
}

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

/* Markdown Modal */
.markdown-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 100;
    overflow-y: auto;
    padding: 2rem;
}

.markdown-content {
    max-width: 800px;
    margin: 2rem auto;
    background-color: white;
    border-radius: 0.5rem;
    padding: 2rem;
    position: relative;
}

.close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--text-color);
    cursor: pointer;
    opacity: 0.6;
    transition: opacity 0.2s;
}

.close-button:hover {
    opacity: 1;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .content-list {
        grid-template-columns: 1fr;
    }
    
    nav {
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .content-type-header {
        padding: 2rem 1rem;
    }

    .content-type-header h1 {
        font-size: 2rem;
    }

    .discipline-nav {
        flex-direction: column;
        align-items: flex-start;
        padding: 1rem;
    }

    .discipline-nav .discipline-name {
        margin-bottom: 0.5rem;
    }

    .search-container {
        order: 2;
        width: 100%;
        max-width: 100%;
        margin: 0.5rem 0;
    }

    .home-link {
        order: 1;
    }

    .theme-toggle {
        order: 3;
    }

    .search-results {
        position: fixed;
        top: auto;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        max-height: 60vh;
        margin: 0;
        border-radius: 1rem 1rem 0 0;
    }

    .markdown-modal {
        padding: 1rem;
    }

    .markdown-content {
        margin: 1rem auto;
        padding: 1rem;
    }
}

/* Add theme toggle button styles */
.theme-toggle {
    background: none;
    border: none;
    color: var(--header-text);
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.9rem;
    transition: background-color 0.2s ease;
    border-radius: 0.25rem;
    min-width: 2.5rem;
    height: 2.5rem;
    flex-shrink: 0;
}

.theme-toggle:hover {
    background-color: var(--secondary-color);
}

.theme-toggle i {
    font-size: 1.1em;
}

/* Update search results for dark mode */
:root.dark-theme .search-results {
    background-color: var(--card-background);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
}

:root.dark-theme .search-result {
    border-bottom: 1px solid var(--border-color);
}

:root.dark-theme .result-link:hover,
:root.dark-theme .result-link:focus {
    background-color: var(--background-color);
}

:root.dark-theme .result-title {
    color: var(--primary-color);
}

:root.dark-theme .result-meta {
    color: var(--text-color);
    opacity: 0.8;
}

:root.dark-theme .result-discipline,
:root.dark-theme .result-type,
:root.dark-theme .tag {
    background-color: var(--tag-background);
    color: var(--text-color);
}

:root.dark-theme .result-description {
    color: var(--text-color);
    opacity: 0.9;
}

/* Update markdown modal for dark mode */
:root.dark-theme .markdown-content {
    background-color: var(--card-background);
    color: var(--text-color);
}

:root.dark-theme .close-button {
    color: var(--text-color);
}

/* Code block styles */
pre {
    background-color: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1rem 0;
    overflow-x: auto;
    white-space: pre-wrap;       /* CSS 3 */
    white-space: -moz-pre-wrap;  /* Mozilla */
    white-space: -pre-wrap;      /* Opera 4-6 */
    white-space: -o-pre-wrap;    /* Opera 7 */
    word-wrap: break-word;       /* Modern browsers */
}

code {
    background-color: var(--inline-code-background);
    color: var(--inline-code-text);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.9em;
    white-space: pre-wrap;
    word-wrap: break-word;
}

pre code {
    background-color: transparent;
    color: inherit;
    padding: 0;
    border-radius: 0;
    font-size: 1em;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/* Dark mode code block styles */
:root.dark-theme pre {
    background-color: var(--code-background);
    border-color: var(--code-border);
    color: var(--code-text);
}

:root.dark-theme code {
    background-color: var(--inline-code-background);
    color: var(--inline-code-text);
}

:root.dark-theme pre code {
    background-color: transparent;
    color: inherit;
}

/* Syntax highlighting for dark mode */
:root.dark-theme .hljs-keyword,
:root.dark-theme .hljs-built_in {
    color: #93c5fd;
}

:root.dark-theme .hljs-string,
:root.dark-theme .hljs-regexp {
    color: #86efac;
}

:root.dark-theme .hljs-number,
:root.dark-theme .hljs-literal {
    color: #fca5a5;
}

:root.dark-theme .hljs-comment {
    color: #94a3b8;
}

:root.dark-theme .hljs-function,
:root.dark-theme .hljs-class {
    color: #c4b5fd;
}

:root.dark-theme .hljs-variable,
:root.dark-theme .hljs-params {
    color: #e2e8f0;
}

:root.dark-theme .hljs-attr,
:root.dark-theme .hljs-property {
    color: #fcd34d;
}

/* Add a subtle scrollbar for code blocks in dark mode */
:root.dark-theme pre::-webkit-scrollbar {
    height: 8px;
    background-color: var(--code-background);
}

:root.dark-theme pre::-webkit-scrollbar-thumb {
    background-color: var(--code-border);
    border-radius: 4px;
}

:root.dark-theme pre::-webkit-scrollbar-thumb:hover {
    background-color: #4a5568;
}

/* Update icon colors in dark mode */
:root.dark-theme .content-item i {
    color: var(--text-color);
    opacity: 0.9;
}

/* Dark mode specific overrides for homepage cards */
:root.dark-theme .content-list > div {
    background-color: var(--card-background);
    border-color: var(--border-color);
}

:root.dark-theme .content-list > div h2,
:root.dark-theme .content-list > div a,
:root.dark-theme .content-list > div i {
    color: var(--text-color);
}

:root.dark-theme .content-list > div a:hover {
    background-color: var(--tag-background);
}

/* Base Template Styles */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

.site-header {
    background-color: #f8fafc;
    padding: 1rem 0;
    margin-bottom: 2rem;
    border-bottom: 1px solid #e2e8f0;
}

.main-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2d3748;
    text-decoration: none;
}

.nav-links {
    display: flex;
    gap: 2rem;
    list-style: none;
    margin: 0;
    padding: 0;
}

.nav-links a {
    color: #4a5568;
    text-decoration: none;
    font-weight: 500;
    padding: 0.5rem 0;
    position: relative;
}

.nav-links a:hover {
    color: #2b6cb0;
}

.nav-links a::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #2b6cb0;
    transition: width 0.2s;
}

.nav-links a:hover::after {
    width: 100%;
}

.nav-item {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.nav-item.nav-empty {
    color: #94a3b8;
    opacity: 0.6;
}

.site-footer {
    margin-top: 4rem;
    padding: 2rem 0;
    border-top: 1px solid #e2e8f0;
    text-align: center;
    color: #718096;
}

.footer-links {
    margin-top: 0.5rem;
}

.footer-links a {
    color: #718096;
    text-decoration: none;
    margin: 0 0.5rem;
}

.footer-links a:hover {
    text-decoration: underline;
}

.home-header {
    text-align: center;
    margin: 3rem 0;
}

.home-header h1 {
    font-size: 2.5rem;
    color: #2d3748;
    margin-bottom: 1rem;
}

.home-header p {
    font-size: 1.25rem;
    color: #4a5568;
}

.discipline-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
}

.discipline-card {
    background-color: #1a2234;
    border-radius: 0.75rem;
    padding: 1.5rem;
}

.discipline-card h2 {
    color: #ffffff;
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.content-type-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
}

.content-type-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background-color: #2a3447;
    border-radius: 0.5rem;
    color: #ffffff;
    text-decoration: none;
    transition: all 0.2s;
    position: relative;
}

.content-type-link:hover {
    background-color: #3a4559;
}

.content-type-link.empty {
    opacity: 0.6;
    background-color: #1a2234;
    pointer-events: none;
}

.content-type-icon {
    font-size: 1.25rem;
}

.content-type-text {
    font-size: 0.875rem;
    font-weight: 500;
}

.share-section {
    text-align: center;
    background-color: #1a2234;
    border-radius: 0.75rem;
    padding: 3rem 2rem;
    margin: 4rem 0;
}

.share-section h2 {
    color: #ffffff;
    font-size: 2rem;
    margin-bottom: 1rem;
}

.share-section p {
    color: #94a3b8;
    margin-bottom: 2rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

/* Discipline Template Styles */
.discipline-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
}

.page-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #2d3748;
    margin-bottom: 0.5rem;
    text-align: center;
}

.page-description {
    font-size: 1.25rem;
    color: #4a5568;
    text-align: center;
    margin-bottom: 3rem;
}

.content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.content-card {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    transition: transform 0.2s, box-shadow 0.2s;
}

.content-card.content-empty {
    background-color: #f8fafc;
    border: 1px dashed #e2e8f0;
    opacity: 0.6;
}

.content-card.content-empty h2,
.content-card.content-empty p {
    color: #94a3b8;
}

.content-card.content-empty .button {
    background-color: #e2e8f0;
    color: #94a3b8;
    pointer-events: none;
}

.card-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
}

.content-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.content-card h2 {
    font-size: 1.5rem;
    color: #2d3748;
    margin-bottom: 1rem;
}

.content-card p {
    color: #4a5568;
    margin-bottom: 1.5rem;
}

/* Media Queries */
@media (max-width: 768px) {
    .main-nav {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-links {
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
}

@media (max-width: 640px) {
    .content-grid {
        grid-template-columns: 1fr;
    }
}

/* Content indicator styles */
.content-indicator {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #22c55e;
    margin-left: 0.5rem;
}

.nav-empty .content-indicator,
.empty .content-indicator,
.content-empty .content-indicator {
    background-color: #e2e8f0;
}

/* Empty state styles */
.nav-empty {
    opacity: 0.5;
    cursor: not-allowed;
}

.nav-empty:hover {
    background-color: transparent !important;
    color: inherit !important;
}

.content-type-link.empty {
    opacity: 0.5;
    background-color: var(--card-background);
    pointer-events: none;
    cursor: not-allowed;
}

.content-type-link.empty .content-type-icon {
    opacity: 0.5;
}

.content-type-link.empty .content-type-text {
    color: var(--text-color);
}

.content-card.content-empty {
    opacity: 0.5;
    background-color: var(--card-background);
    border: 1px dashed var(--border-color);
}

.content-card.content-empty h2,
.content-card.content-empty p {
    color: var(--text-color);
}

.content-card.content-empty .button {
    background-color: var(--card-background);
    color: var(--text-color);
    pointer-events: none;
    cursor: not-allowed;
}

/* Dark theme adjustments for empty states */
:root.dark-theme .nav-empty .content-indicator,
:root.dark-theme .empty .content-indicator,
:root.dark-theme .content-empty .content-indicator {
    background-color: #334155;
}

:root.dark-theme .content-type-link.empty {
    background-color: var(--card-background);
}

:root.dark-theme .content-card.content-empty {
    background-color: var(--card-background);
    border-color: var(--border-color);
}

:root.dark-theme .content-card.content-empty .button {
    background-color: var(--secondary-color);
    color: var(--background-color);
}

/* Style for the entire discipline card when it's empty */
.discipline-card.discipline-empty {
    background-color: var(--card-background);
    border: 2px dashed var(--border-color);
}

.discipline-card.discipline-empty h2 {
    color: var(--text-color);
    opacity: 0.6;
}

:root.dark-theme h2,
:root.dark-theme .content-list > div h2,
:root.dark-theme .content-item h2,
:root.dark-theme .content-card h2 {
    color: #ffffff;
}

:root.dark-theme .description,
:root.dark-theme .content-type-header .description {
    color: #e0e7ef;
    opacity: 1;
}

/* End Global Styles */

/* Help Page and Accordion Styles */
.help-container {
  max-width: 900px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.help-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: var(--text-color);
  margin-bottom: 2rem;
  text-align: center;
}

.section-heading {
  font-size: 2rem;
  font-weight: 700;
  color: var(--text-color);
  margin-top: 3rem;
  margin-bottom: 1.5rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid var(--border-color);
}

.accordion-section {
  background-color: var(--card-background);
  border-radius: 0.5rem;
  margin-bottom: 1.5rem;
  border: 1px solid var(--border-color);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.accordion-section summary {
  font-size: 1.75rem;
  font-weight: 600;
  color: var(--text-color);
  padding: 1rem 1.5rem;
  cursor: pointer;
  list-style: none;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid transparent;
}

.accordion-section[open] summary {
  border-bottom-color: var(--border-color);
}

.accordion-section summary::after {
  content: '\25BC';
  font-size: 1rem;
  transition: transform 0.3s ease-in-out;
}

.accordion-section[open] summary::after {
  transform: rotate(180deg);
}

.accordion-content {
  padding: 1.5rem;
}

.accordion-content p,
.accordion-content ul,
.accordion-content .example-block,
.accordion-content .submit-link {
  margin-bottom: 1rem;
}

.accordion-content p:last-child,
.accordion-content ul:last-child,
.accordion-content .example-block:last-child,
.accordion-content .submit-link:last-child {
  margin-bottom: 0;
}

.accordion-content ul {
  padding-left: 20px;
  list-style-position: outside;
}

.accordion-content .example-block {
    margin-top: 0.5rem;
}

.help-link {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  background-color: var(--tag-background);
  border-radius: 0.375rem;
  color: var(--text-color);
  text-decoration: none;
  font-weight: 500;
  margin-bottom: 1rem;
  transition: background-color 0.2s, transform 0.2s;
}

.help-link:hover {
  background-color: var(--background-color);
  transform: translateY(-1px);
}

.link-icon {
  font-size: 1.25rem;
}

.example-label {
  font-weight: 500;
  color: var(--text-color);
  opacity: 0.8;
  margin-bottom: 0.5rem;
}

.use-cases {
  font-style: italic;
  opacity: 0.9;
}

.file-location {
  font-size: 0.95rem;
  color: var(--text-color);
  margin-bottom: 1rem;
  padding: 0.5rem;
  background-color: var(--tag-background);
  border-radius: 0.375rem;
}

.file-location code {
  background-color: var(--background-color);
  padding: 0.2rem 0.4rem;
  border-radius: 0.25rem;
  font-family: monospace;
}

.submit-link {
  margin-top: 1rem;
  text-align: right;
}
.cta-button {
  display: inline-block;
  background-color: var(--primary-color);
  color: var(--header-text); 
  padding: 0.4rem 1.1rem;
  border-radius: 0.375rem;
  text-decoration: none;
  font-weight: 500;
  transition: background 0.2s;
  border: none;
  margin-left: 0.5rem;
}
.cta-button:hover {
  background-color: var(--secondary-color); 
}
/* End Help Page and Accordion Styles */

/* Dark Theme Overrides and Specifics */
:root.dark-theme h2,
:root.dark-theme h3,
:root.dark-theme .content-list > div h2,
:root.dark-theme .content-item h2,
:root.dark-theme .content-card h2 {
    color: #ffffff;
}

:root.dark-theme .description,
:root.dark-theme .content-type-header .description {
    color: #e0e7ef;
    opacity: 1;
}

:root.dark-theme .accordion-content a {
    color: var(--primary-color); /* Ensure links in accordions are readable in dark mode */
}

:root.dark-theme .accordion-content a:hover {
    color: var(--secondary-color); /* Optional: slightly brighter on hover */
    text-decoration: underline;
}

/* Ensure CTA buttons have good contrast in dark mode */
:root.dark-theme .cta-button {
    background-color: #2b6cb0; /* Darker blue for background */
    color: #ffffff;             /* White text for high contrast */
}

:root.dark-theme .cta-button:hover {
    background-color: #1d4e89; /* Even darker blue for hover */
} 
</content>

<file>assets/js/theme.js</file>
<metadata>
path: assets/js/theme.js
type: js
size: 1467 bytes
</metadata>

<imports>
</imports>

<code lang='js'>

const STORAGE_KEY = 'theme-preference';
const DARK_CLASS = 'dark-theme';

function getColorPreference() {
    if (localStorage.getItem(STORAGE_KEY)) {
        return localStorage.getItem(STORAGE_KEY);
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
}

function setTheme(theme) {
    localStorage.setItem(STORAGE_KEY, theme);
    reflectTheme(theme);
}

function reflectTheme(theme) {
    document.documentElement.classList.toggle(DARK_CLASS, theme === 'dark');
    document.querySelector('#theme-toggle')?.setAttribute('aria-label', 
        theme === 'dark' ? 'Switch to light theme' : 'Switch to dark theme'
    );
}

function toggleTheme() {
    const currentTheme = getColorPreference();
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
}

function initializeTheme() {
    
    const theme = getColorPreference();
    setTheme(theme);

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches }) => {
        if (!localStorage.getItem(STORAGE_KEY)) {
            setTheme(matches ? 'dark' : 'light');
        }
    });
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTheme);
} else {
    initializeTheme();
} 
</code>

<file>assets/js/main.js</file>
<metadata>
path: assets/js/main.js
type: js
size: 6441 bytes
</metadata>

<imports>
    // Get base URL from meta tag or default to empty string
            // Remove any number of occurrences of baseUrl from the start
                const titleScore = title.toLowerCase().includes(queryLower) ? 3 : 0;
                const descriptionScore = description.toLowerCase().includes(queryLower) ? 2 : 0;
                const contentScore = content.toLowerCase().includes(queryLower) ? 1 : 0;
                const tagScore = tags.some(tag => tag.toLowerCase().includes(queryLower)) ? 2 : 0;
</imports>

<code lang='js'>

document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
        });
    });
});

document.addEventListener('DOMContentLoaded', function() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('nav a');
    
    navLinks.forEach(link => {
        if (link.getAttribute('href') === currentPath) {
            link.classList.add('active');
        }
    });
});

document.addEventListener('DOMContentLoaded', function() {
    let searchIndex = [];
    const searchForm = document.querySelector('.search-form');
    const searchInput = document.querySelector('.search-input');
    const searchResults = document.querySelector('.search-results');
    const markdownModal = document.querySelector('.markdown-modal');
    let debounceTimeout;

    const baseUrl = document.querySelector('meta[name="base-url"]')?.getAttribute('content') || '';

    function getFullUrl(url) {
        if (!url) return url;

        if (baseUrl) {
            
            const baseUrlPattern = new RegExp(`^(?:${baseUrl}/?)+`);
            url = url.replace(baseUrlPattern, '');
        }

        url = url.replace(/^\/+/, '');

        if (!baseUrl) return '/' + url;

        return `${baseUrl}/${url}`;
    }

    fetch(getFullUrl('search-index.json'))
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            searchIndex = data;
            console.log('Search index loaded successfully');
        })
        .catch(error => {
            console.error('Error loading search index:', error);
            searchResults.innerHTML = '<div class="no-results">Search is currently unavailable</div>';
        });

    function performSearch(query) {
        if (!query || query.length < 2) {
            searchResults.hidden = true;
            return;
        }

        const queryLower = query.toLowerCase();
        const results = searchIndex
            .map(item => {
                
                const title = String(item.title || '');
                const description = String(item.description || '');
                const content = String(item.content || '');
                const tags = Array.isArray(item.tags) ? item.tags.map(tag => String(tag || '')) : [];

                const titleScore = title.toLowerCase().includes(queryLower) ? 3 : 0;
                const descriptionScore = description.toLowerCase().includes(queryLower) ? 2 : 0;
                const contentScore = content.toLowerCase().includes(queryLower) ? 1 : 0;
                const tagScore = tags.some(tag => tag.toLowerCase().includes(queryLower)) ? 2 : 0;
                
                const totalScore = titleScore + descriptionScore + contentScore + tagScore;
                
                return {
                    ...item,
                    score: totalScore
                };
            })
            .filter(item => item.score > 0)
            .sort((a, b) => b.score - a.score)
            .slice(0, 10);

        displayResults(results);
    }

    function displayResults(results) {
        searchResults.hidden = false;
        
        if (results.length === 0) {
            searchResults.innerHTML = '<div class="no-results">No results found</div>';
            return;
        }

        const html = results.map(result => `
            <div class="search-result">
                <a href="${getFullUrl(result.url)}" class="result-link">
                    <h3 class="result-title">${result.title || ''}</h3>
                    <div class="result-meta">
                        <span class="result-discipline">${result.discipline || ''}</span>
                        <span class="result-type">${result.contentType || ''}</span>
                    </div>
                    <p class="result-description">${result.description || ''}</p>
                    ${Array.isArray(result.tags) && result.tags.length ? `
                        <div class="result-tags">
                            ${result.tags.map(tag => `<span class="tag">${tag || ''}</span>`).join('')}
                        </div>
                    ` : ''}
                </a>
            </div>
        `).join('');

        searchResults.innerHTML = html;
    }

    searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        performSearch(searchInput.value);
    });

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => {
            performSearch(searchInput.value);
        }, 300);
    });

    document.addEventListener('click', function(e) {
        if (!searchForm.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.hidden = true;
        }
    });

    searchResults.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
            e.preventDefault();
            const links = searchResults.querySelectorAll('.result-link');
            const currentIndex = Array.from(links).indexOf(document.activeElement);
            let nextIndex;

            if (e.key === 'ArrowDown') {
                nextIndex = currentIndex < links.length - 1 ? currentIndex + 1 : 0;
            } else {
                nextIndex = currentIndex > 0 ? currentIndex - 1 : links.length - 1;
            }

            links[nextIndex].focus();
        }
    });
}); 
</code>

